[
    {
        "original": "My grandmother has dementia. About twice a day, she calls my parents every 5 minutes, forgetting that she just hung up. The calls are always the same: \"You live there now. Yes you have money. We came to visit you yesterday.\" This can go on for an hour or so.My parents are incredibly patient, but after a couple of these calls, they'll just leave the phone to ring. The soundtrack of the phone constantly ringing in the house, and the guilt associated with not picking up, is unbearable.My brother and I built a system where her calls get re-routed to a rotation of relatives to answer her calls, to spread the load. After a call with her, each person gets a 2 hour break (customizable). If no one is available to answer, or if everyone is on break, she gets a voicemail that my dad recorded that explains that we love her, that she lives there, all the usual stuff.It's working beautifully.",
        "summary": "My family has developed a system to manage my grandmother's frequent calls due to her dementia, which involves rotating relatives to answer her calls and providing a voicemail if no one is available."
    },
    {
        "original": "I have a rail line right under my apartment, so I built a small computer vision app running on a Rasperry Pi which records each train passing, and tries to stitch an image of it.It has a frontend at https://trains.jo-m.ch/.Edit: it's currently raining and the rain drops are disturbing the images a bit.",
        "summary": "The computer vision app records each train passing and attempts to stitch an image of it, although rain drops are currently disrupting the images."
    },
    {
        "original": "I have a \"TV channel\" app running on a Raspberry Pi serving up local video content to a schedule I create.The Pi has a 5TB hard drive attached with perhaps 1000 videos or so. The app has a schedule and plays the videos according to the schedule. It starts up in the morning, plays tele-courses, moves on to old TV shows, an afternoon movie, after school shows begin around 3:00 PM, a comedy show around dinner time, an evening movie, some late-night content, then the Indian head and \"We Will Resume Broadcasting Tomorrow Morning....\"It fills dead airtime by choosing randomly among (literally) thousands of YouTube short clips I have on the drive \u2014 or showing a title card indicating when the next show begins.Partly it's a fantasy \u2014 to have my own \"channel\" with my own scheduled content \u2014 my fantasy station.Partly it serves to put on content I would otherwise not be inclined to pull up, double click and watch. It adds the serendipitous element to TV watching that I miss before streaming. The movie \"Charly\" (1968) just came on last night and I am sure I have not seen it since I was a teenager \u2014 had to stop what I was doing and watch a few scenes I recall vividly.Today's lineup here: https://engineersneedart.com/UHF/(Since the schedule is in JSON format, it was easy enough to make a web front end to display today's schedule.)",
        "summary": "This comment describes a Raspberry Pi app that serves up local video content to a schedule, providing a \"fantasy station\" with serendipitous elements to TV watching."
    },
    {
        "original": "Blind developer here; I often write tools for myself to perform some task that is not well supported by my screenreader. For example:* I wrote an add-on that allows me to read HN comments in a structured way. A typical screenreader would present page in a linear manner, so you'd have to read all replies in order, which is quite tedious in popular posts. My add-on parses the page and identifies the level of each comment, and then I can navigate to previous/next comment at any level. So I can quickly check top-level comments and then read replies only if I'm interested.* Another add-on makes Jupyter edit boxes to work with my screenreader. Jupyter was requiered at my company , so I either had to write that add-on or else. The way it works is that it sends Control+C Control+V keystrokes to the browser to retrieve contents and then presents them to me in an accessible window for editing. When I'm done it would Control+A Control+V new content back to edit box.* BlindCompass - iOS app that I wrote for myself to navigate on the streets. One of the problems of blind people is that it is easy to lose the sense of heading, e.g. where is north vs South. So BlindCompass would read my heading and present it as a two-pitch sound, that allows me to deduce rough direction. It's also easy to figure out the right direction and just maintain it, so with BlindCompass I can cross large open spaces easily.",
        "summary": "A blind developer has written various tools to make tasks more accessible, such as an add-on to read HN comments in a structured way, an add-on to make Jupyter edit boxes work with a screenreader, and an iOS app to help with navigation."
    },
    {
        "original": "I built myself an automated hydroponic grow tent.It measures and corrects pH, electrical conductivity, oxidation reduction potential, temperature of the air and water, water level, and humidity. It also automates pumps, lights, and fans (I know people normally advise against this). None of it is particularly sophisticated, but I\u2019m really proud of it.I initially used a deep water culture and later moved on to the nutrient film technique. It produces a lot of greens and herbs \u2014 way more than I ever expected \u2014 and it\u2019s remarkably hands off. I recently left it to do its thing for almost 3 months before I had to intervene, and the problem wasn\u2019t the water, nutrients, or the system failing explicitly. The plants just got too big for their channels and as they became stressed, they developed some pest issues. It was such a cool and empowering experience to see real world automation Just Work.The whole thing is powered by an Arduino Nano RP2040 Connect. It\u2019s a great little controller.I\u2019m currently designing my first PCB to consolidate the system onto a single board so my friends can easily build their own. It\u2019s not extremely cheap, but it\u2019s not too expensive either and you get a tremendous amount of food from it. It\u2019s such a fun hobby.",
        "summary": "The author built an automated hydroponic grow tent powered by an Arduino Nano RP2040 Connect, which produces a lot of greens and herbs and is remarkably hands-off, and is now designing a PCB to help others build their own."
    },
    {
        "original": "For 6 years I had a long distance relationship between Peru and Germany.When you are in different timezones it can actually be nice to fall asleep with the other person \"close\" to you; so we kept Skype running while one of us went to bed and the other person was working on the PC.Unfortunately the internet connection would regularly drop, ending the Skype call. Now you did not want to wake the other person by calling them.So I wrote a small script that would allow you to send a secret word in the chat and invoke the other persons' Skype to call you instead automatically.Kept our relationship healthy. Now we've been married for nearly 10 years and are happily living together :)",
        "summary": "A script was created to help maintain a long-distance relationship between Peru and Germany, which ultimately led to a successful marriage."
    },
    {
        "original": "My townhome complex had one of those call boxes at the front gate. When Doordash/FedEx/the cleaners/the in-laws/etc arrived they would have to call me from the call box and I'd have to answer it and listen to garbled audio to figure out who it was and press 9 to open the gate. It was kind of a pain, so I made a Twilio app to answer calls from the call box.I set up custom entry codes that I could hand out to anyone. Everyone got their own code, and it would text me whenever someone used a code so I'd instantly know who was coming. The text conversation was my timestamped access log. I also put time constraints on some codes so e.g. Doordash couldn't open the gate in the middle of the night, or I could set up a temporary access code for a party, and I rotated codes too, with text notifications if an outdated code was used.I thought about making a paid app out of it, but it just didn't seem worthwhile. I didn't expect that many people would want to pay for it. For a while I was excited about a YC startup called Doorport that was going to make a hardware device that you'd install inside those dumb call boxes and make them smart with all sorts of cool features, better than my Twilio hack. But I think they pivoted to a much less interesting pure software thing and then got acquihired.",
        "summary": "I created a Twilio app to make it easier to manage access to my townhome complex's call box, but decided not to make a paid app out of it as I didn't expect many people would want to pay for it."
    },
    {
        "original": "I just moved to the bay area. I made an app that scrapes all bay area events from  meetup, eventbrite, and a couple of other sites- This way you end up with around 100 events a day, way too much to read through.So next I take each event, send it to chatgpt3.5 and ask it to rate this event on around 20 parameters. Next, I take the latitude/longitude of each event and measure driving distance from my house. Then I have a master formula based on my personal interests and driving preferences and an app shows me the 10 events every day most likely to be interesting to me for any day.",
        "summary": "The app scrapes events from multiple sites, uses GPT-3.5 to rate them on 20 parameters, and uses a master formula based on personal interests and driving preferences to show the user the 10 most interesting events for any day."
    },
    {
        "original": "I'll describe one tool that I built that sparks joy every time I use it:For a long time I wanted to listen to lots of different stuff, podcasts, sermons, YouTube videos, online courses. But I'd always forget about them and never got around to listening to most of them.So last year I started tracking this in a Google Sheet. Initially just a link of URLs, then I added date added/date completed, length, etc. Recently I even added some custom menu items in Sheets so I can add items and mark them done faster.I've greatly increased the amount of audio content I consume, even when I get in the car it's easy to select something to play next. But one conclusion: I add on average 4 items per week and I listen to only 3, so my queue grows unbounded.",
        "summary": "This tool has enabled the speaker to consume more audio content, but the queue continues to grow."
    },
    {
        "original": "I co-organized a weekly hacknight meetup of 40-70 people.I wrote a script to make Anki spaced repetition flash card decks with avatars and names pulled from the meetup API. I would use GitHub Actions to run the script a few hours before the event, then drop the importable deck into a Google Drive folder. I'd review the deck before the meetup, and then at the event, I'd not stress about names. I'd pretend to introduce myself to new people like I didn't already know their names, but I'd be able to make them feel very welcome when I remembered, or introduced them to others.Why do this arguably creepy thing? Because I am really forgetful with names, and when I forget, I become reluctant to approach people, which comes across as less friendly than I prefer to be. But I believe using people's names is REALLY important to community organizing. When I know names, I am really great at using them a lot, helping others learn them, generously making introductions, and helping people to feel a sense of belonging.It was the best community organizer hack I ever came up with, until meetup locked down their API and broke it...!https://github.com/CivicTechTO/anki-meetup-memorizer",
        "summary": "I created a script to generate Anki flashcards with avatars and names from the Meetup API to help me remember names and make people feel welcome at the weekly hacknight meetup."
    },
    {
        "original": "Oh, I think I have a good one. I had an HP-25 calculator as old as myself, and couldn't use it. The original battery pack contained two sealed NiCd cells, which obviously failed many years ago. Most people replaced their NiCd cells with new ones, then with NiMh cells, or even alkaline AA batteries. This was always problematic: newer batteries were slightly larger and never fit well. Also, the power consumption of a calculator with an LED display was significant, so frequent battery replacements were needed. And the original HP charger was risky and could easily destroy the calculator.So I designed and built a wirelessly (Qi) charged battery pack for it.https://partsbox.com/blog/wireless-charging-for-a-hp-25-calc...After a year of use, it's totally over-engineered and has so much energy and so little idle power consumption, that I have to remind myself to charge sometimes, the thing lasts for months.I'm the only user. There are many people who wanted to buy one, but the step from a hobby design to small-scale production is a big one and it simply doesn't make business sense. Especially with Li-Po batteries being difficult to ship and potentially a hazard. I guess maybe if I found a manufacturer that would be willing to take the design and manufacture it on demand, taking over all of the shipping/support issues\u2026",
        "summary": "I designed and built a wirelessly (Qi) charged battery pack for an HP-25 calculator which has low idle power consumption and lasts for months, but it does not make business sense to produce it on a small-scale."
    },
    {
        "original": "My MIL is 93, and the only tech she can really deal with is turning on the radio and TV and changing channels.She is fond of music from old classics (from the 60's and earlier), so I hooked up a Raspberry PI with an FM transmitter and created her own private radio station. She tells me what songs she likes and I create different playlists that get broadcast on her station. It preserves the surprise element of radio, and there is nothing in there she doesn't like.The tiny FM transmitter is surprisingly powerful. Her neighbours (of similar vintage) are very happy too, so their requests have also started coming in :)EDIT: I wanted to add that I am the UI ... she doesn't get to choose the playlist. To make my life easier, I just created different playlists for different times of the day ... calm/spiritual/slower numbers in the early and late hours, peppy during the late morning and evening etc.",
        "summary": "A Raspberry PI with an FM transmitter was used to create a private radio station for the speaker's 93-year-old mother-in-law, with different playlists for different times of the day, which is enjoyed by her and her neighbours."
    },
    {
        "original": "Smart RSS reader that,  right now,  ingests about 1000 articles a day and picks out 300 for me to skim.  Since I helped write this paperhttps://arxiv.org/abs/cs/0312018I was always asking \"Why is RSS failing?  Why do failing RSS readers keep using the same failing interface that keeps failing?\" and thought that text classification was ready in 2004 for content-based recommendation,  then I wrotehttps://ontology2.com/essays/ClassifyingHackerNewsArticles/a few years ago,  after Twitter went south I felt like I had to do something,  so I did.  Even though my old logistic regression classifier works well,  I have one based on MiniLM that outperforms it,  and the same embedding makes short work of classification be it \"cluster together articles about Ukraine,  sports, deep learning, etc.\" over the last four months or \"cluster together the four articles written about the same event in the last four days\".I am looking towards applying it to: images, sorting 5000+ search results on a topic, workflow systems (would this article be interesting to my wife, my son, hacker news?), and commercially interesting problems (is this person a good sales prospect?)",
        "summary": "A smart RSS reader uses text classification and embedding to classify and cluster articles, and can be applied to images, search results, workflow systems and commercially interesting problems."
    },
    {
        "original": "My mom digitized many many old family videos, and wanted them online for sharing with family (including elderly & not-super-tech-savvy relatives). She asked me \u201cshould I just upload them all to a YouTube channel?\u201dThankfully it was a phone call so my mom didn\u2019t see my aghast expression. I prefer that big tech not index this stuff! Better to keep \u201cin the family\u201dSeriously why does big tech deserve this free & super-private window into me & my ancestors lives?So I wrote something[1] where:* it\u2019s fully free & open source* cloud native* plays on any device, any bandwidth, even if shitty* yes my 90+yo Aunt Loretta (w00t to you Aunt Lo!) can use it on her phone & computer* all data can be always encrypted, both source videos and derived/optimized assets* and there\u2019s more. please have funBasically point it at a source bucket on S3 or B2, and get your own private YouTube.What I\u2019ve built is very limited in functionality atm, but I believe the foundation is solid and plan to extend media support to photos and audio.This can be a nice alternative to Plex/Google Photos/YT/etc.It\u2019s for when you don\u2019t care about \u201cbuilding an audience\u201d and in fact prefer that big tech can only see encrypted bytes from you.Try it out and lmk![1] https://github.com/cobbzilla/yuebing",
        "summary": "I have built an open source, cloud-native alternative to YouTube which allows for private sharing of media with family, including elderly and non-tech-savvy relatives."
    },
    {
        "original": "Throwaway time!I built a custom smart motorized masturbator.It borrows from 3D printer design, and has a NEMA 17 stepper motor driving a 2GT belt loop around a short length of 2020 extrusion to slide a carriage along a linear rail. The carriage has attachment points that I've put clamps on, that close around a fleshlight-style sheath. There's a brace at the business end that you put around the base of the penis and it keeps everything aligned.All the parts are custom-designed and 3d printed.It has an outboard control box that contains:  - an ESP32-based microcontroller with a small OLED screen. \n  - a clickable rotary encoder that is the single input control\n  - a TMC2209 stepper driver\n  - 12v power input and a buck converter to feed the esp32\n  - 12v output ports for 2 additional vibrators and an an H-bridge module to control them\n\nThe simple UI allows full control over the motion:  - stroke duration\n  - stroke amplitude\n  - offset from the 0 position\n  - motion path (just sinusoidal vs triangle wave so far)\n\nThe controls also allow control over the secondary vibrators for intensity, rhythm, and duty cycle.It's been evolving for a couple years now and it works brilliantly!",
        "summary": "This comment describes a custom-designed and 3D printed smart motorized masturbator with a simple UI that allows full control over the motion and secondary vibrators."
    },
    {
        "original": "I built a proxy number for my sister who has to deal with her abusive ex-husband. She has court ordered visitations via phone for their kids. He would give her number to any multitude of people that would send harassing messages on his behalf.The proxy allows any calls or texts from her number to send out with the proxy number. Any calls or texts from his number connect to her phone. All other communications are given a notice that they don't have access to call or message the proxy number and communications are recorded for court. It does not forward blocked communications to her phone. He continues to give out the number to harass her, but the family court judge gets a monthly report of all the attempted harassment.",
        "summary": "This proxy number allows her to protect herself from her ex-husband's harassment while providing evidence to the court."
    },
    {
        "original": "Every night, at 3 AM, my cat will meow and paw at the bedroom door like a banshee. I tried everything to get him to stop, including the off-the-shelf air sprayers that trigger with motion.Eventually, I decided to build my own. I 3D printed a case and trigger for an air sprayer can, created some electronics with an ESP32 and RF trigger, and wrote my own \"motion detection\" logic - this time with an ultrasonic sensor, which works much better in the dark.Now, the cat knows that a meow or paw will get him sprayed, and my wife and I can finally sleep!I also built an air filtration system for my 3D printer, a level checker for my water softener, and a custom keepsake box that only opens with an RFID chip that you can read more about on my blog: https://www.mikebuss.com/blog",
        "summary": "Mike Buss was able to solve his cat's 3 AM meowing problem by creating his own motion-detection system using 3D printing and an ESP32."
    },
    {
        "original": "A software developer and football (soccer) fan who lives in an antipodean time zone, I enjoy watching games on demand the morning after they occur. Apart from watching the games of the team I support, I like to watch one or two of the most entertaining games in any given week, but score spoilers absolutely ruin the experience for me.So, I created https://laterball.com: a web app the algorithmically determines the best games of the past 7 days without score spoilers, to let me (and you) know which games are worth spending time watching. There was also an associated twitter bot at https://twitter.com/laterball which occasionally tweets when there's been a high-quality game until the recent Twitter API changes.Technical stuff: the back end is a Ktor server hosted on a linode instance which pulls statistics data from an API to determine the ratings. Factors used to determine ratings include goals (number, timing, swings in score, comebacks), xG, wins or draws against the odds, cards, and a few others.",
        "summary": "The author created Laterball, a web app and associated Twitter bot, to algorithmically determine the best games of the past 7 days without score spoilers."
    },
    {
        "original": "The most interesting tech I've build for myself is boring: a writing tool I use every day for journaling: https://enso.sonnet.ioWith that out of the way here's some more ridiculous stuff:In 2016, I made a browser based AR party game where you'd fight kittens falling from the sky by dancing with vegetables in your hands (CMYK was easier to track using the webcam). I have some photos here: https://goo.gl/photos/g6Dp8GLDbuuhT1TRAFrom a technical PoV it was exciting (running AR, in a browser, in pre Pokemon GO, pre WASM times!)I also made a simple photography lighting tool, replacing professional lights with computer/tablet/phone screens (facade.photo). I put it in an old wardrobe bought in a thrift store on Brick Lane and during my startup launch. Results: https://goo.gl/photos/RZ3fCRcScYSGr7aG6Ah, I also made an AI-powered voice assistant in 2014. The tagline was HTML5-powered voice assistant, as AI wasn't really _the_ buzzword then, but _HTML5_... oh yeah.",
        "summary": "I have built a variety of interesting tech projects, ranging from a writing tool to an AR party game and an AI-powered voice assistant."
    },
    {
        "original": "We recently remodelled our kitchen and dining area, and I wanted some art piece on the wall but couldn\u2019t decide what. For months the wall was a little bare and we were having a lot of dinner guests. I realised our WiFi password was too complicated to keep reading out to family and friends so I built a QR code in Lego that automatically connects you to our guest WiFi. It looks good, and it\u2019s Lego so it was a fun project with the kids. It took about 4 hours to build. The only problem was having enough 1x1 tiles to put on a 37x37 matrix.",
        "summary": "A QR code made out of Lego was used to provide guests with the WiFi password, which was a fun project to do with the kids that took about 4 hours to complete, although there was a problem with having enough 1x1 tiles."
    },
    {
        "original": "I trained the raccoons that visit my house at night. I started them out getting a peanuts from a water bottle. Then I tied the bottle to a rope. Then kept raising the bottle higher. At that point, I built an automated feeder system using a linear actuator activated by pulling the rope with the bottle attached. It had LEDs that were green / red to show when the feeder would / wouldn't dispense peanuts. It was all driven by an ESP32, it even had a web page on our LAN reporting how many correct / incorrect pulls were done. Over the coarse of a few nights they figured it out. Raccoons are so cool.",
        "summary": "I trained raccoons to use an automated feeder system with a linear actuator, LEDs, and an ESP32, and they were able to figure it out over a few nights."
    },
    {
        "original": "My wife and I lived on a Sailboat for a few years. The boat had a 20 year old SeaTalk bus connected to the sensors (depth, wind speed/direction, water speed). I bought a newer radio with an AIS receiver. Of course I wanted to hook it all to my computer & phone.So I built some hardware to interface with the SeaTalk network, the AIS radio (and a modern GPS)\nhttps://github.com/johnboiles/Helm-hardware\nhttps://github.com/johnboiles/Helm-firmwareAnd a Python proxy running on a Pi to pass messages back and forth across the network.\nhttps://github.com/johnboiles/NMEAProxyAnd an iOS app that could drive my autopilot\nhttps://github.com/johnboiles/helm-iosSince my proxy spoke the NMEA standard, you could also hook up with other apps like iSailor and get all the sensor data + gps + AIS data.\nhttps://apps.apple.com/us/app/w\u00e4rtsil\u00e4-isailor/id398456162To my knowledge, 0 other people have ever used any of this but I've always been proud of it :)",
        "summary": "John Boiles built hardware, firmware and a Python proxy to connect a 20 year old SeaTalk bus to a newer radio with an AIS receiver, allowing him to access sensor data, GPS and AIS data on his computer and phone."
    },
    {
        "original": "Not sure if this counts:A lighting desk for my hobby of lighting live music. For reasons I like doing live control along with the music (known as busking). Existing things are either limited and can't control moving lights, or don't have the flexibility to busk the way I want. so, having worked a long time ago for a crowd that built what were at the time the best lighting desks in the world, I built my ownIt has 36 motorised faders and a bunch of other boards with buttons, that each ave their own AtTiny to run the function, they talk to a BeagleBone Black  which runs the main code loop and uses its on board realtime processors to generate DMX, and a raspberry Pi to run the GUI for configuration.Worked a treat most of the time, and I've done hundreds of shows with it, with crowds of up to 400 people, Sadly, I made a dumb decision on the protocol for the fader and button boards to talk to the BeagleBone and every now and then it causes a kernel panic on the Beaglebone, which means at best you lose control of the lights and at worst it goes dark on stage.I started a redesign using a more sensible protocol but got hit by a double whammy of Covid killing the live music scene for a couple of years, plus the all the supply chain issues, so it's on hold now.",
        "summary": "The author built their own lighting desk to control moving lights and busk live music, but it has caused kernel panics on the BeagleBone, so the redesign is on hold due to Covid-19."
    },
    {
        "original": "Not sure if it counts as tech, but I created a voiceboard for my mother to help her communicate while in hospice. She had a massive stroke and could no longer speak.I thought of a tablet app, but the stakes were too high, so it wound up as a laminated paper. You can read about my design decisions here:https://voiceboard.org",
        "summary": "Creating a voiceboard for a family member in hospice was a successful way to help them communicate despite a stroke that prevented them from speaking."
    },
    {
        "original": "My current favorite: I often go camping deep in the backwoods with friends, far from any sort of cell service. So I built a LoRa radio system that allows us to text each other, physically locate each other, etc. when we go off and do our own things. The system consists of small radio units that are carried, and a larger (but still backpackable) base unit that gets set up in camp.They run as a mesh network, so you don't have to be in range of the base unit for it to work.Regular radios don't work well for this use case because the terrain is very mountainous.Currently looking into making one that can be attached to a dog collar to allow for geolocating the animal.",
        "summary": "I have built a LoRa radio system to enable communication and location tracking between friends while camping in remote areas with mountainous terrain."
    },
    {
        "original": "I've modified Ghidra in order to unlink pieces of an executable back into relocatable object files.To keep things simple, source code files are compiled into object files which are linked into an executable. Object files have sections (named array of bytes), symbols (either defined as an offset within a section or undefined) and relocations (a request to patch up an offset within a section with the final address of a symbol) while executable files only have sections. The linker takes all the object files, lays out the sections in memory, fixes up the relocation and writes out an executable file without the symbols or relocations.With Ghidra I can reverse-engineer an executable and recreate symbols, data types and references between symbols. Then, with my modifications I can recreate relocations with that information and, once a range of addresses has been fully processed, I can select it and export it as a relocatable ELF object file.Why? This allows me to extract parts of an executable as object files and reuse these by linking them my own source code ; I don't need to fully-reverse engineer these extracted parts, I just have to basically identify every relocation there was originally in that part. I can also divide and conquer my way to decompiling an executable by splitting an executable into multiple object files and recreate its source code one object file at a time, like the Ship of Theseus.So far it works with what I've tested it with and I've been meaning to write a series of articles to explain that process in detail, but writing quality technical articles with illustrations on a topic this esoteric is very hard.  - My Ghidra fork: https://github.com/boricj/ghidra/tree/feature/elfrelocatebleobjectexporter\n  - My initial prototype in Jython (has a readme): https://github.com/boricj/ghidra-unlinker\n\nNote: this works only with 32-bit MIPS, little endian, statically-linked executables. It can be made to work with other architectures by writing a relocation synthesizer for it, but so far I only care about decompiling PlayStation 1 games.",
        "summary": "I have modified Ghidra to unlink pieces of an executable back into relocatable object files, allowing me to extract parts of an executable and reuse them by linking them to my own source code."
    },
    {
        "original": "- A ChatGPT shell that integrates well into my editor of choice https://xenodium.com/chatgpt-shell-available-on-melpa- A scriptable screenshot/video capture utility https://xenodium.com/recordscreenshot-windows-the-lazy-way- An iOS habit tracker that's neither cloud-based, nor needs an account, social, wants my attention, data, etc. https://flathabits.com- An iOS scratch pad that removes further friction than typical note apps https://xenodium.com/scratch-a-minimal-scratch-area- An iOS org mode app 'cause there are lots of Markdown ones but almost no org mode ones https://plainorg.com- A way to easily record more complex commands (ie. ffmpeg) and make them reusable for the future https://xenodium.com/seamless-command-line-utils",
        "summary": "Xenodium provides a range of tools for iOS and Windows, including a ChatGPT shell, a scriptable screenshot/video capture utility, a habit tracker, a scratch pad, and a way to record and reuse complex commands."
    },
    {
        "original": "At the beginning of COVID i switched to weekly shopping and realized that it takes a significant time to inventarize the storage to make sure I make it through the week.I built a storage shelf that self-inventorizes based on strain gauges. Through the change in weight distribution it can determine the weight and 2D location of the item added or removed. LED strips give immediate feedback.\nhttps://www.niels-ole.com/arduino/iot/2021/03/21/storage-sys...I used this to automatically add the items consumed throughout the week to my shopping list.I only ever built a single shelf board (subsequent boards had issues) and I never fully implemented the advanced usability features of adding new items for the first time and automatically determining good places for them, but it was a very fun project.",
        "summary": "This project created a storage shelf that self-inventorizes based on strain gauges and LED strips to help with weekly shopping and automatically add items to a shopping list."
    },
    {
        "original": "@dang regarding pagination    // Get the anchor tag element\n    const anchorTag = document.querySelector('.morelink');\n\n    // Add a scroll event listener to the window object\n    window.addEventListener('scroll', () => {\n      // Check if the user has scrolled to the bottom of the page\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        // Fetch the content from the URL stored in the anchor tag's href attribute\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', anchorTag.href, true);\n        xhr.onload = () => {\n          // Append the fetched content to the page\n          const div = document.createElement('div');\n          div.innerHTML = xhr.responseText;\n          document.body.appendChild(div);\n        };\n        xhr.send();\n      }\n    });",
        "summary": "This comment describes how to implement pagination by adding a scroll event listener to the window object and fetching content from the URL stored in the anchor tag's href attribute when the user has scrolled to the bottom of the page."
    },
    {
        "original": "I realized at some point that in learning languages, I was often limited by how much vocabulary I was picking up. The main advice I got was to read more, but progress was slow; I learned less from more basic texts, but constantly had to look up words when reading more advanced stuff.So I wrote myself an e-reader (in Kivi) that is aware of my vocabulary and integrates with a flashcard system. For more obscure words it just shows the translation in-line so that I can focus on the most vocabulary. I pick up way more words and phrases, and can enjoyably read at a significantly higher level than without it.",
        "summary": "Using a custom e-reader with a flashcard system and in-line translations helped the speaker to learn more vocabulary and read at a higher level."
    },
    {
        "original": "When I was a student there was this power-of-two game on my friend's iPhone that I was literally addicted to. I didn't have an iPhone and eventually the game even disappeared from the AppStore. I missed it very much and my friends jokingly mentioned building a copy just for me. They never got around to it but at some point I thought \"maybe I should give it a try?\". So I gave it a try with no game dev knowledge and the second iteration turned out just fine for my needs: https://kiryhas.github.io/memechain/I've considered rewriting it to make the code better many times but every time I sit down to do that I think to myself \"it works just fine, why touch it\" and leave this idea for a while :)BTW the idea of the game is to combine cubes with the same number and color until there are only 4 left.",
        "summary": "I was able to build a copy of a game I was addicted to, even though I had no game development knowledge."
    },
    {
        "original": "A website to see a map of the world's tides, and bidirectional predictions for individual stations (edit: worldwide too, forgot I added that). The UI/UX is... archaic, but that's just how I wanted it. It works fully offline. https://solunar.pages.devMost fun part was transcribing 70+ year old NOAA tide calculation mathematic/astronomic/hydrologic research papers into modern TypeScript. Approach is semi-documented here: https://github.com/JacksonKearl/solunar",
        "summary": "This website provides a map of the world's tides and bidirectional predictions for individual stations, and works fully offline, despite its archaic UI/UX."
    },
    {
        "original": "One of my big \"side projects\" over the last few months has been my personal website and blog (https://epiccoleman.com). It's not very interesting per se - I mean, who doesn't have a blog these days - but it has been really educational and fun to work on. It's a really simplistic stack which makes working on it pretty frictionless. I spent a lot of time tweaking the look and feel of the site and am pretty happy with how everything has turned out.I've also been putting a lot of work into a React component that renders a nice looking SVG Circle of Fifths, and just recently got to a point where I felt I could call a release \"1.0.0\". This has also been a really educational project and I'm super proud of the component. It's a little basic right now, but it looks very nice, and I have a lot of cool features planned.It's licensed MIT, so if this sounds like something you'd like to use in an app, you can check it out here: https://github.com/epiccoleman/react-circle-of-fifths. I'd love any feedback, issues, etc.Edit:\nOh, I just thought of one other thing - a single line of code I wrote which frequently gives me great joy. In zsh you can define a function called `command_not_found_handler` which gets invoked whenever a command ... isn't found.Mine says: `figlet lol, $@`, so whenever you make a typo like \"gits status\" or something, you get a big \"lol, gits tatus\" printed out, which is amusing.",
        "summary": "The author has been working on a personal website and blog, as well as a React component, and has also written a line of code which prints out a humorous response when a command is not found."
    },
    {
        "original": "I'm slightly embarrassed that in terms of building personally relevant things, my proudest (digital) work is always shell scripts I use daily. Most of my personal projects are non-technical meat-space things like building with wood and the like. Here's some that I've open-sourced:- A git interface using fzf that works pretty nicely and is very composable. https://github.com/bigH/git-fuzzy- An interactive evaluator, perfect for interactive `sed`, `grep`, `jq`, etc. If properly configured, it'll keep history per command or using whatever key you give it. I find myself using it often with `jq`. https://github.com/bigH/interactivelyThere are many other shell functions/scripts that are interesting from my `dotfiles`. Particularly interesting snippets for anyone who wants them:- A recursize `which` that follows symlinks and stops at a real file. https://github.com/bigH/dotfiles/blob/3d48792b4e910d2fc82504...- A `watch` alternative that runs in the current shell. https://github.com/bigH/dotfiles/blob/3d48792b4e910d2fc82504...",
        "summary": "The speaker has open-sourced several shell scripts and functions that they have created for personal use."
    },
    {
        "original": "The G-Seat as part of my sim-rig. 9 AC Servos, borderline dangerous, beast of a simulator. The G-Seat I decided to do better than commercial offerings (had tried \"the best\" and it was pretty average). CNC brake folded aluminium seat with moveable flaps controlled by AC Servos - had to 'de tune' as they were literally at rib-breaking speed initially. About a year worth of development designed and prototype in Fusion 360, through to this :https://www.youtube.com/watch?v=STnnqonpcAUAnd another vid at max rpm on the servos...https://youtu.be/eMZC0ekEXQ8?t=39",
        "summary": "The G-Seat is a CNC brake folded aluminium seat with moveable flaps controlled by AC Servos, designed and prototyped in Fusion 360, which is better than commercial offerings."
    },
    {
        "original": "We were using facebook exclusively for the 'private group' feature with a some friends in 2012. We liked the fact that it was private and asynchronous.\nBut I didn't like the fact that it was tied to facebook. I decided to put into practice what I've learned that year at my informatics school and created forum written in php. It was not much but we liked the fact that it was ours.Ten years later, I'm still fiddling on it and it has grown to a real open-source project that you can find on github [0]. It's still primarly here to serve me since I'm the only maintainer but starts to be driven by external propositions. It's meant to be easy to deploy, easy to use, cheap in resources and reliable.[0] https://github.com/zusam/zusam",
        "summary": "In 2012, a group of friends used Facebook's 'private group' feature, but decided to create their own forum written in PHP due to not liking the fact that it was tied to Facebook, which has since grown into an open-source project."
    },
    {
        "original": "A tool called \"diff modulo base\": https://git.sr.ht/~nhaehnle/diff-modulo-baseGiven two version (old and new) of a Git change (i.e., individual commit or patch series from a pull request) it produces a diff that is actually useful for reviewing purposes, assuming you've already reviewed the old version of the change.It's sort of like `git range-diff`, but where `git range-diff` produces a \"diff of diffs\" that is very hard to impossible to read, this tool gives you a direct diff between old and new versions, but filters out any irrelevant changes that were introduced because the author rebased on a more recent version of the target branch.I hope that makes sense - I never know quite how to put it into words for somebody to understand who isn't intimately familiar with Git. It is very powerful though if you combine it with a minimal amount of setup e.g. for fetching all PR branches from a GitHub repository. I use it almost daily as part of my code review workflow.",
        "summary": "\"Diff modulo base\" is a tool that produces a direct diff between two versions of a Git change, filtering out any irrelevant changes introduced by rebasing on a more recent version of the target branch."
    },
    {
        "original": "I created an AI that can beat the first and second boss in my favourite pc game Dark souls 3First boss:https://www.youtube.com/watch?v=zcbH7jt4w0wSecond boss:https://www.youtube.com/watch?v=IeEoQVT66t8I am using cheat engine to get information from the game such as hero position, boss position, hero animation, boss animation, time since animation change, life, stamina, current rotation and the angle between the boss' heading and the hero. (to see if hero is behind or in front of or to the side/behind the boss)When the boss or hero starts an animation i start a counter at 0. For every timestep that the animation is still running i increment that counter and feed it as inputThe AI has no knowledge about the lengths of the animations. It has to learn that.The animation names are converted to a one hot encoding and fed to the networkThe different examples shown in the videos have only been trained for a few days in real time (only 1 instance of the game running). But the episodes are cherry picked. In the Iudex case it actually kills the boss almost every time, however Vordt is a lot harder to learn so these are the some of the kills that i have picked out.Other games have APIs made for reinforcement learning so that the agent can take an action at each frame of the game. I have kind of hacked my own implementation and are actually doing keypresses with sleeps in between each step as i can't control the frames on a frame by frame basis.I am using python and stable baselines for the reinforcement learning part. I made my own implementation of a \"gym\" for dark souls. Then i set up a lua script in cheat engine that opens a socket from this socket i read the state in my python script.",
        "summary": "An AI was created using python and stable baselines to beat the first and second bosses in the game Dark Souls 3 by using cheat engine to read the game state and keypresses with sleeps in between each step."
    },
    {
        "original": "I created a todo thermal printer so that I can write messages whenever I remember something. For example when I'm lying in bed and I remember that I have to do something or reading a book and think that's a great thought that I should look more into someday.Basically I have a mobile app that I can send a message to a api. Sometimes it's just a note, sometimes it is a todo item.Then I have a raspberry pi that polls the api for new messages and prints them onto a receipt/thermal printer on my desk. Then every morning I usually look and see if there is a todo item, or more long term item.I haven't exactly thought of how to store the messages, but basically when the \"receipt\" gets to CVS level, I rip it off and store it in in a document shelf organizer. Every few months I'll go through the receipt for any long term touch items.",
        "summary": "The todo thermal printer allows the user to write messages and todo items which are printed onto a receipt and stored in a document shelf organizer for long-term tasks."
    },
    {
        "original": "A deadman's switch connected to a manner of things. It basically works by 'non-existence' instead of existence and fires a webhook once something stops. For example, if my computer is turned off for a couple of weeks, it will send an email to loved ones. When I go day hiking, something similar happens when my phone loses service/power for more than a couple hours and sends a low-quality gps track. Basically it's if-this-then-that but more like if-this-stops-then-that. I have it tracking all kinds of things, like git-commits-per-person, server/device health metrics, and things like that.",
        "summary": "A deadman's switch can be used to trigger an action when something stops, such as sending an email when a computer is turned off or a low-quality GPS track when a phone loses service/power."
    },
    {
        "original": "I made a \"laser-beam-break\" camera trigger for my Nikon D750, which I use to capture images of hummingbirds at my feeder.Instead of paying $125 for this ... (https://www.bhphotovideo.com/c/product/1337050-REG/pluto_tri...)I decided to build one using an Arduino. I probably spent more than $125 on the project, but I ended up buying a lot of hobbyist electronics parts, soldering gun, etc.I learned a bit about what Arduino can do, learned some baby electronics.And I have some nice pics of hummingbirds.https://flickr.com/photos/184781347@N05/52648636091/in/datep...https://flickr.com/photos/184781347@N05/52325370300/in/datep...",
        "summary": "The author built a camera trigger for their Nikon D750 using an Arduino, which allowed them to learn about electronics and take nice pictures of hummingbirds."
    },
    {
        "original": "My wife has her work schedule in a mobile web app, but the app is really bad. Turns out the app is just a wrapper around a web site.So I made a KVM instance which does one thing - login automatically, start Firefox, login with Selenium, then uses some kind of other Python desktop control contraption to press CTRL-S, tab-tab, save the web page to the Downloads folder.Then, the python program proceeds to parse the HTML (with BeautifulSoup), extract the schedule times from how they are showed in some <div> or other (super weird ugly text format). Checks for changes over time and emails her what has changed. (So she gets a notice when her schedule changes and she doesn't have to periodically check in with the app.)Finally converts the schedule to calendar format and publishes on a web site so the schedule can also be seen in the phone calendar.",
        "summary": "A KVM instance was created to automate the process of extracting and converting the work schedule from a mobile web app to a calendar format, and then publishing it on a web site so it can be seen in the phone calendar."
    },
    {
        "original": "About 8 years back, I was leading an engineering team which was the escalation path for customer support. We were sitting on a large corpus of support tickets but didn't have any insights. I was amazed when word2vec came out and blew my mind. So I built a language model that trained on support ticket data. I modeled system logs attached to support tickets as an NLP model to predict what was going to fail next and for which customer.Never made it to prod but was a great tool for me to see where I want to budget my team's time.This is way before all the LLM and Generator models, but it was such a fun project.",
        "summary": "This comment highlights the use of a language model to predict what was going to fail next and for which customer, which was built before the development of LLM and Generator models."
    },
    {
        "original": "I built a web app that keeps track of every link I ever find to be interesting.  It allows for fine-grained topics (e.g., individual academic papers, or topics more specific than that).  It groups the topics in a DAG, so that you can get to a topic via more than one path from the top.  And it allows you to look at intersections of transitive closures over topics in order to narrow down a search.It keeps a history of every change to the graph in Git, so one day you could potentially implement some form of time travel and see what the graph looked like at an earlier point in time without too much difficulty.I have used the app every day for years.  I feel like there's something promising there that is of general interest, but I have not figured out how to communicate the value.",
        "summary": "The web app I built keeps track of interesting links, organises them in a DAG, and stores changes to the graph in Git, which I have used daily for years, but I have not figured out how to communicate its value."
    },
    {
        "original": "Older 1999-2007 model year Ford vehicles don\u2019t come with an aux input audio option and they have a cd changer under the seat instead. I made an Arduino shield that emulates the CD changer and injects my iPhone\u2019s audio pretending to be a CD. \nThe shield also handles intercepting the car headunit\u2019s playback commands when you press the physical radio buttons on your car so it does a second emulation of a earphone clicker and passes headunit playback commands back to control the phone over the aux cable.In short I can control my phone\u2019s audio playback using my retro radio headunit using only a wired connection and no Bluetooth.My schematic and source code are available at https://github.com/ansonl/FordACP-AUX",
        "summary": "An Arduino shield was created to emulate a CD changer and inject audio from an iPhone into an older Ford vehicle, allowing the car's headunit to control the phone's audio playback over a wired connection without Bluetooth."
    },
    {
        "original": "https://mathb.in/I wrote this 11 years ago for my friends and myself who were going through a phase in our lives when we used to challenge each other with mathematical puzzles.The use of this tool spread from my friends to their friends and colleagues, then schools and universities, and then to IRC channels. Now it is the oldest mathematics pastebin that is still online and serving its community of users. Visit https://github.com/susam/mathb for the source code of this tool.",
        "summary": "Mathb.in is an online mathematics pastebin that has been serving its community of users for 11 years."
    },
    {
        "original": "This thread is giving me a complex. Why? Well, because the answer is basically \"nothing\". I mean, don't get me wrong - I've built all sorts of stuff, and plenty of it was not for my $DAYJOB. And I think (at times) of myself as being fairly creative and having lots of \"ideas\". And yet... at least in the context of this thread (the way I'm interpreting the OP's question anyway) I just don't have much to offer up.FWIW, I interpret the question as being strictly about stuff one built for oneself in the context of everyday, day-in, day-out life. Stuff to use yourself. And on that front, I just realized I almost never build anything strictly for myself. I work on Open Source projects and work on projects at Fogbeam that I (want|hope|expect|whatever) other people to use, or things I would use myself in a business context. But I just don't build handy little gadgets to use around the house, or in my truck, or when out and about.This may be one of the first times I've really felt a strong case of the \"imposter syndrome\" that one hears so much about. I feel like I should have some answers for this, so why don't I? :-(OK, to be fair, I did built at least one thing just for myself. I have a couple of lamps that are positioned in an out of the way location in my living room, and I hate having to walk to them and stretch to reach the switch(es). So I did the whole \"IP controlled lamp\" thing with a relay and an Arduino Nano 33 IoT board. The power strip the lamps are plugged into is controlled by the relay, and I can send an HTTP request to turn the relay on or off. I created a shortcut on my phone's homescreen so I can easily control it from my phone. But that's such a chintzy project I almost feel worse for admitting to it. :p",
        "summary": "The OP feels imposter syndrome for not having any ideas for building things for themselves in their everyday life, but admits to having built one thing for themselves."
    },
    {
        "original": "My ex used to be pissed when I spent whole day coding and dont wrote her a single message...It was way back before gpt and twilio, so I bent one IRC bot and wrote collection of warm messages that was send via SMS on a pseudorandom timeframe. We broke up when she finds out ... Luckly for both of us I guess.",
        "summary": "The narrator used an IRC bot to send automated messages to their ex, which ultimately led to the end of their relationship."
    },
    {
        "original": "I like to play Factorio, but too often lose track of time while playing. There's no clock in the game's UI, and no way to access the system's time through the mod API. So I made a script that runs as a process on the host machine that every minute, sends commands to the game's process to build a clock in the center of the map out of concrete. Its pretty cool because you can also clearly see the time from the mini map.https://gitlab.com/smew/factorio-clock",
        "summary": "A script was created to build a clock in the game Factorio to help players keep track of time."
    },
    {
        "original": "I made a gender swapping algorithm for my own use only. You put in any text and it outputs the exact same thing with all the genders reversed. Man to woman, he to she, Prince to princess, witch to wizard.Then got a book deal to create a series of gender swapped illustrated books \u2018Gender Swapped Fairy Tales\u2019 and \u2018Gender swapped Greek myths\u2019It seems like a simple enough task but gets complicated in weird ways. For example - his can swap to her or hers depending on the context. And her can swap to his of him depending on context.The idea is to show the biases in the original stories that you are blind to because you\u2019ve been reading them forever.",
        "summary": "The author created a gender swapping algorithm to demonstrate the biases in original stories that are often overlooked."
    },
    {
        "original": "Not nearly as cool as all the other stuff here, but still my favorite piece of tech for myself:IMO, Vim + Markdown is one of the best ways to take notes, brainstorm, or just explore ideas. However, I found the questions of \"Where should I put the notes in my dir hierarchy?\" and \"How do I find the notes again?\" and \"How do I ensure I have my notes across all devices?\" to be inhibiting.I wrote a CLI \"journal\" tool that says \"forget putting them into folders\", dumps all the Markdowns into a single Google Drive folder, and instead focuses on providing really good search.Now, in my day to day, I can do \"journal new some-meeting-with-dan.md\" and I get a fresh Markdown. I can also do \"journal find\" to search by name, date of creation, or tag, and then open notes in either Vim or as rendered HTML in Chrome (for copy-pasting). Behind the scenes all the information is just encoded in the filename (so it becomes \"some-meeting-eith-dan~2023-04-23T22:10:23~tag1,tag2.md\", with no extra DB needed).I'm also now trying to rewrite the frontend as a Charm TUI, which is another whole fun growth path!",
        "summary": "A CLI \"journal\" tool has been created to make taking notes, brainstorming and exploring ideas easier by providing good search and encoding information in filenames."
    },
    {
        "original": "Back in 2001-ish, looking for a rental house with good public transport.  Screen scraped the entire realestate.com.au database overnight, then fed the addresses into some mapping API that gave me coordinates, and caluclated the distance from those addresses to the addresses of Zone 1 train stations.Also had descriptions, so wrote a simple regex based scorer that classified the descriptions by keywords that I valued.  Spat out a hitlist of likely candidate houses to go inspect....Also wrote a basic wedding registry that allowed people to scan our list of things we wanted and say they had purchased them, or were interested and it gave a list of others who might want to go in on a group purchase.  No privacy, but it was only sent to friends.  Circa 2004....Finally, wrote a diary and calendar tool which took emails with very simply structured subjects and built a static website showing travels through Europe in 2002.  Could email from any net cafe with any email address and it would update the travel diary, or a website with a calendar saying which city we were in and how we were traveling to the next one.  Friends could elect to get immediate updates or a daily summary.  Purely static built from cron and email archives.  Worked like a charm....More recently, hmm... as treasurer for various choir things I've written a ton of little commandline tools which give very quick access to data and allow tracking who owes what and logging their payments into a database, and tools which generate email invoices and receipts.Everything else is either opensource or work stuff.  And I don't code so much these days either, though this week I started diving into Python to create tools that help keep data for our marketing team up-to-date without manually copying stuff around, and some maintenance work on code I wrote 15 years ago which is still running really nicely but needs some updates.",
        "summary": "The comment discusses various coding projects the speaker has undertaken over the years."
    },
    {
        "original": "Kirby's Adventure for the NES, one of my favorite games, ignores your controller inputs sometimes. I dove into the ROM, figured out the problem and fixed it: https://www.romhacking.net/hacks/7595/I'm currently hacking the SNES mouse into Sim City.",
        "summary": "Kirby's Adventure for the NES was fixed by the author after they identified a problem with controller inputs and hacked the SNES mouse into Sim City."
    },
    {
        "original": "One super niche project I made recently lets you search through dialogue in public domain films:https://public-domain-film-quote-search.stefanbohacek.devI made it so that I can quickly find vocal samples to use in music production.",
        "summary": "The project allows users to search through dialogue in public domain films to quickly find vocal samples for music production."
    },
    {
        "original": "I hooked up an analog phone to Whisper, ChatGPT, and TTS.  I used of one of those old timey candlestick phones you'd see in a 1920 gangster movie.  Initially this was a prop for a murder mystery party I was hosting  (ChatGPT would give clues if you said certain words), but now I use it for a silly distraction here and there. Ask ChatGPT a question by picking up a phone like it's last century!  I think it is fun.I am using Asterisk on Debian that calls my python script.  The analog phone adapter auto dials when the receiver goes off hook, because rotary dialing sucks that much and the answering extension is chatgpt role playing different characters based on prompting.I think it is neat. I need to work on better voice synthesis and improve latency a bit still, but it is a nice toy.",
        "summary": "I have connected an analog phone to Whisper, ChatGPT, and TTS to create a fun distraction that uses Asterisk on Debian to call a python script and role play different characters."
    },
    {
        "original": "I recently took up the banjo and as a musician who learns by ear, I wanted a way to quickly loop a phrase of music, slow it down and learn by repetition. Speeding it up as i go and moving on to the next phase.So I built https://looptube.xyz \nIt takes a YouTube ID input and allows you manipulate the video to loop and change tempo",
        "summary": "LoopTube.xyz provides a way for musicians who learn by ear to quickly loop a phrase of music, slow it down, speed it up, and move on to the next phase."
    },
    {
        "original": "Control your fan speed with your heartbeat.I created this while setting up a home trainer for bike training in my garage during the lockdown in 2020. One issue with home trainers, unlike biking outdoors, is that you don't get the benefit of the wind generated by your speed that cools you down. So you sweat a lot, and this creates dehydration. Not cool (pun intended).The solution is to use a fan. But when you are lazy (and focused on your workout) you don't want to have to get up and adjust fan speed (and I don't have a remote for my fan, and it's much cooler to have it automated instead).https://github.com/edelans/Heart-Rate-Smart-Fan",
        "summary": "A fan can be automated to adjust its speed based on one's heartbeat to provide cooling during a workout."
    },
    {
        "original": "I built a program in Go to defeat GeoIP lock-outs for my home network.It runs on our home router and functions as the primary DNS server. If the record name matches a regex the DNS request is forwarded over a VPN to a DNS server in the target country. Any other requests are forwarded to my ISP\u2019s DNS. If the response is a CNAME then the A record name is cached so that follow-up requests are also forwarded over the VPN.Before returning the IPs in the foreign DNS response /32 routes for the IPs are added to send any home network traffic for them over the VPN.This means that any client on our home network can transparently access GeoIP locked sites. It\u2019s worked for around 8 years with no modifications.",
        "summary": "I built a program in Go to allow clients on my home network to transparently access GeoIP locked sites by forwarding DNS requests over a VPN and adding /32 routes for the IPs."
    },
    {
        "original": "I have been struggling with my circadian rhythm and have been exploring light therapy and novel techniques that will help me wake up. I learned that a smart light I bought, from Kasa, has a solid community written python library that controls it on the local network. I made a little app that adjusts the lamp color based on sunrise and sunset hours. It's relatively simple technology wise, but it's forced me to rethink how I evaluate \"smart\" technology.I am thinking of expanding it to be a notification light of sorts. Not for anything related to the internet, but for chores, like the laundry machine finishing, or reminders to take a break from work. It's helped me remember to grab lunch more than a few times this week. There's something pleasant about light notifications compared to vibrations or sounds.I am working on making an advanced wifi enabled timer using an esp32. I love the idea of a dedicated timer, seperate from my phone, that I can use day to day. I have a basic display and webserver for scheduling countdowns/alarms, but I want to incorporate some sort of keypad and a couple input buttons. There's plenty of ways in can be improved.I also have a first generation raspberry pi monitoring my washing machine, it sends me notifications when a cycle finishes. It uses a simple ultrasonic sensor and is hosting a web server showing a readout.",
        "summary": "Exploring light therapy and novel techniques has enabled me to create a smart light app that adjusts the lamp color based on sunrise and sunset hours, as well as a wifi enabled timer and a raspberry pi monitoring my washing machine."
    },
    {
        "original": "https://neighbs.us/Really fucking dumb. Uses browser geolocation to tell me which neighborhood in San Francisco I'm currently standing in.  Grabbed the lat/longs of each neighborhood from the SFData [0].  It works by plotting a circle representing your location + uncertainty and determining which of SF's 117 neighborhoods intersect with it.  If your circle intersects with more than one neighborhood, it's smart enough to categorize them in order of certainty.  It even automatically updates as you move, it's pretty fun to sit in an Uber and watch the neighborhood change as you move across the city. Learned a lot about polygon intersection algorithms, they're pretty amazing!Built it a number of years ago when I moved here.  Since it runs entirely in the browser, it's hosted for free on github pages and I don't need to maintain a server.0 https://datasf.org/opendata/",
        "summary": "This comment describes a browser-based geolocation tool that uses polygon intersection algorithms to determine which of San Francisco's 117 neighborhoods a user is located in."
    },
    {
        "original": "I have a wonderful group of friends from back home, ranging all over the age spectrum, who all golf together almost religiously every weekend. I made them an app that resembles the PGATour's live scoring, so folks can be on the course and input their scores on the holes and get a live leaderboard of how everyone is doing, factoring in everyone's handicap. There are some commercial apps that kind of do this, but the issue with us there are several members who for one reason or another don't. have phones to input their scores themselves, so my app lets one person in the group put their scores in for the other ones.After I left the country, this has had the wonderful side benefit that I can still follow along with everyone's game, and has been instrumental in me staying in touch and connected to my friends, so that when I come to visit on vacation it's like I never left!",
        "summary": "My app helps me stay connected to my friends by allowing me to follow their golf games even when I'm away."
    },
    {
        "original": "I have glued BLE beacons onto my trash cans in the backyard and written a Python program for a Raspberry Pi that uses its Bluetooth interface to detect the beacons and keep track of whether they are present or not. It also downloads the trash collection calendar from the local utility provider responsible for collecting them and produces an overview over all four types of trash cans with info on their whereabouts (in the backyard or next to the street, based on whether the beacons are visible or not) and number of days until they are collected. If collection is imminent (tomorrow) and the location is still \"the backyard\", a big flashing warning is shown, requesting whoever reads it to move the trash can to the street so it can be collected.The Python program produces a regularly updated XML document, which references some XSLT so that when it's loaded in a browser it'll render a nice HTML page with styling and images and stuff. The Raspberry Pi serves that over an HTTP server in the local WiFi, and in the kitchen there's an old Amazon Fire 7 tablet stuck to the wall where a Kiosk browser keeps that page on fullscreen display and regularly updated. The tablet also has all sleep modes deactivated so it is on all the time.This way we never forget to move out the trash for collection, which we did regularly before I had this solution in place (built it about 5 or 6 years ago). It's horrible in a family of four if the trash is overflowing just because you forgot to move the trash cans to the street so they can be picked up.2 years ago the solution (called \"Internet of Trash\") was extended by a little Bluetooth label printer located next to the tablet in the kitchen and some UI on the web page allowing to quickly print sticky labels with two lines of text, usually used to label boxes with food leftovers and pre-cooked ingredients (such as sauces for example) with what's in the box and the date when it was cooked. The UI has easy quick-choice buttons for the common food items we usually have and the last few days for the second line, but also allows free-form entry. It relays all input via the Raspberry Pi which sends it over Bluetooth to the printer. The labels help us immensely to keep track of leftovers stored in the fridge or the freezer - not just to know the exact type of food in the boxes, but also to determine when stuff has to be thrown away or which to use first when multiple boxes contain the same food ingredient.",
        "summary": "A Python program running on a Raspberry Pi with a Bluetooth interface is used to detect BLE beacons attached to trash cans, keep track of their whereabouts, and provide a warning when collection is imminent."
    },
    {
        "original": "I have been working for a while on a wooden sailing ship model, where at times one will reference model parts in terms of real dimensions - e.g., a 4\" x 18\" piece of wood.  But that has to be translated into the model's scale when measuring the model parts.To streamline this, I made a little Arduino-driven device with an OLED display that can plug into the digital output port that many digital micrometers have.  It takes the current micrometer measurement, applies the scaling factor, and displays the scaled dimension on the OLED.So that means I can take a small piece of wood from the kit, measure it with the micrometer, and directly see its full scale dimension - e.g., it's a scale 8\" thick plank.  Or I can take the micrometer to the 8 foot measure, and use it to mark off a piece of wood that I want to be that long.",
        "summary": "I made an Arduino-driven device with an OLED display to translate real dimensions into model parts' scale and display the scaled dimension on the OLED."
    },
    {
        "original": "It's not specifically just for me but for my team at the World Largest Trivia Contest [0]. It's a 54 hour long contest, questions are broadcast over the radio, you have the length of 2 songs to call in the answers, and you can use any source to find the answer. Sounds easy, right? Just Google it? Nope. \"In a big screen flick, XYZ is talking to ABC about something. In the background, a train passes. What does it say on the train?\"This has led to a ton of fun little coding projects to help us answer questions better. A lot of very hard to Google questions involve album covers, so I ran every album cover I could get through Google Vision and built a little search engine. Another part of the contest is short (1-2s) clips of songs being broadcast and you have a few hours to come up with what they are. We built a massive fingerprint library ahead of time and used it to answer some of those (Google finally got better at this too, before we built this, it'd never work because the clip was so short). We also use AWS to live transcribe the broadcast because one of the hardest parts was remembering \"were they asking for the actor? their character? the movie?\" and having to wait until they ask the question again between songs.Next up is a parallel auto-dialer. There's only a handful of people answering phones, so actually calling in the answer can be a struggle.[0] http://90fmtrivia.org",
        "summary": "The team at the World Largest Trivia Contest has developed a range of coding projects to help them answer questions better."
    },
    {
        "original": "I bought one of these LED screens (you get 64*32px, so not a lot!), and I wrote an app to view my local surf conditions on it (so I know what I'm missing out on while working). But because it doesn't support a way to run local apps that fetch from APIs, I had to add a way to show the forecast for other spots and make it \"official\". No idea how many people use it, but I saw it on instagram ads so that was some kind of validation haha. It looks like this: https://pbs.twimg.com/media/FMi996lVIAAQMI3?format=jpg&name=...",
        "summary": "I created an app to view local surf conditions on an LED screen, and added a way to show the forecast for other spots to make it \"official\", which was validated by seeing it on Instagram ads."
    },
    {
        "original": "I'll share a project I've been working on that has greatly improved my meal planning. I created a tool to tell me what and how much to eat from a list of ingredients.Unlike most existing apps that only track what you eat, my app helps you figure out how much to eat to hit your target macros. Initially, I had created some Python scripts that worked well, but I found them inconvenient to use as I needed to be near a computer, edit the script and manually add ingredients to a dictionary. To make it more user-friendly/faster, I re-wrote it as a web app in Rust for the backend and integrated a free food database.Now, I can quickly and easily add a list of ingredients I have at home from my phone and hit calculate.Currently, I'm the only user, and the tool is designed entirely for my needs. However, I think it could be useful for others looking to plan their meals and eat healthier, which is why I host publically. If I were to build it for general public use, I would need to relax the constraints to allow flexibility on how close it can match your targets. I would also want to add more food sources, maybe the USDA database, but since I'm not in the US, a lot of the foods won't be relevant to me. Maybe if I get the time i'll work on it but for now it works perfectly for me.You can check it out at https://www.macrosolver.com/. Let me know what you think!",
        "summary": "I created a web app to help me plan my meals and hit my target macros, and I am hosting it publicly in case it is useful for others."
    },
    {
        "original": "I built the \"Harry Potter clock\", a screen that shows the location of each family member. It's just and old monitor on the kitchen wall + raspberry pi + zigbee 220V plug to switch it off at night.I worked beautifully for a few years displaying Apple's \"Find My\" via a Chromium browser in kiosk mode. However, Apple closed off web access to Find My, so I've now redone it via Google Maps. The Google Maps version doesn't work nearly as well and the maps are cluttered with lot's of stuff you don't want to see, so I'm currently looking at redoing it again by using the Home Assistant app and API.",
        "summary": "I built a \"Harry Potter clock\" to display family member locations, but had to switch from Apple's \"Find My\" to Google Maps due to web access closure, and am now looking to use Home Assistant app and API for a better experience."
    },
    {
        "original": "I suppose this counts: Although not that interesting, I have one of those AC units in my apartment that sits on the floor with an outlet tube terminating at a window to pipe out hot air. The internal reservoir for this unit is quite small so I hacked together a float valve that triggers a pump to offload the condensation water to a larger bin, that way I don't have to empty the reservoir as often.Pretty simple, but saves lots of time and I don't have to worry about the air conditioner turning off in the middle of the night due to it's internal reservoir becoming full.",
        "summary": "A float valve and pump have been installed to offload condensation water from the AC unit's small internal reservoir, saving time and preventing the unit from turning off in the middle of the night."
    },
    {
        "original": "I'm a big SNL nerd and have favorite sketches/memories going back over 30 years. I find it very rewatchable, but streaming services don't have full episodes, and even downloading full episodes wouldn't make it easy to find individual sketches. So I built a Plex library of over 500 individual sketches using some automation.I used yt-dlp to download the metadata for over 6,000 videos on the SNL Youtube channel. I put it into a database, parsing out season/episode into fields where possible. Then I wrote a small Flask app to search or browse seasons/episodes, from which I could flag for download the sketches I wanted.",
        "summary": "I created a Plex library of over 500 individual SNL sketches by using automation to download the metadata for over 6,000 videos from the SNL Youtube channel and writing a small Flask app to search and browse seasons/episodes."
    },
    {
        "original": "I re-created a stock ticker machine. I saw an article about them on here and thought \"oh that would be cool to have one, lets try and buy one\" I realised that they cost $4k+.So I made my own. https://www.secretbatcave.co.uk/projects/stock-ticker-machin...Its not strictly electro mechanical like the original, that was too far out of my mechanical design skills.",
        "summary": "I created my own stock ticker machine since buying one was too expensive."
    },
    {
        "original": "I build a \"SaaS\" wine app, for tracking wines in my cellar and for tasting notes as well.\"SaaS\" in quotes since it runs in a small production setup with all the bells and whistles (ie. CI/CD pipelines, continuous releases, user signup etc.), but I'm the only user :-)I'm a wine enthusiast, i.e. not a professional but interested enough to do a WSET2 in my spare time (I'll do a WSET3 when I find time some day). I like to/need to keep track of two things as part of my wine hobby: Wines in my cellar, and tasting notes.Used to keep the wine registry in excel and notes in Evernote, however especially the excelsheet lacked features, like easy searches from a mobile device, and notes about the wines in my cellar (not tasting notes, as I have plenty bottles I need to taste but havn't yet, and I still need some notes on those to remember where the heck I got them from and why).Also, WSET2 tasting notes a much quicker to do with the proper template, but copy/pasting text in Evernote became too annoying (again, phone).So, I build my own app to have exactly the features and mobile friendly GUI I want. I'm the only user on purpose, because then I can keep building and changing features to be just like I want them.Yes I know there are some \"wine tracking apps\" out there, like CellarTracker and Vivino, but they dont fit my needs. CellarTracker is closest to my needs but way too clumpsy GUI and not mobile friendly -- I don't have my laptop with me when I'm in the cellar to find a wine for tonight, I have my phone.Will I every make up the time I spent building it in time saved compared to my excel/evernote setup? Nope, not even close. But it was a fun side project, and I like fiddling with the hosting/Ops part.",
        "summary": "A wine enthusiast built a custom app to track wines in their cellar and take tasting notes, as existing apps did not fit their needs."
    },
    {
        "original": "I have a tractor. Mice like to chew electrical wiring because the wire casings are made of soybeans, so the tractor dealer recommended setting several traps by my tractor. I couldn't stand killing a mouse so I used \"humane\" catch and release traps, the problem was a mouse died because I forgot to check the trap. So I put a reed switch and an esp-32 on a catch and release mouse trap that when tripped, sent an mqtt message to aws iot, that triggered a lambda function that sent me an email notifying me I had a mouse to let out of its trap.",
        "summary": "A reed switch and an esp-32 were used to create a \"humane\" catch and release mouse trap that sends an email notification when tripped."
    },
    {
        "original": "I\u2019ve built a mac app that has all the dev tools I use on daily basis. Its 100% local & 100% offline. I was worried pasting company specific data on public website tools like JSON formatter, SQL Formatter etc and also hate having too many single trick pony apps.So one app to rule them all.\nCurrent list of tools in the app are:\n- Todo list integrated with Pomodoro timer\n- Notes with ability to be converted to todo list\n- Pomodoro timer\n- JSON/SQL/XML/YAML/Protobuf formatter and error detector.\n- Converter from JSON to CSV and other formats.\n- Meditation/Gratitude general\n- Universal time clocks\n- Count down timer, focus timer, stopwatchIn development:\n- Unix time formatter\n- CloudWatch metrics reader (to monitor my other cloud apps)\n- S3 explorer (My own infinite cloud storage with no one reading meta-data or scanning my pictures/documents)\n- Cron explorer and schedulerIn process of putting it on app store. If anyone is interested in trying, DM me.",
        "summary": "This mac app provides a range of development tools, including a to-do list, notes, formatter, converter, timer, and more, all of which are 100% local and offline."
    },
    {
        "original": "I don't know if it's interesting, but here it is.The local branch of the company I work for has recently included a food allowance of 8 eur/day as a perk. I don't like / have opportunities to eat out most days, so I have built a little utility that fetches via a REST API the offers at the deli / grocery store on the way to my kid's nursery, and solves a knapsack problem to generate the most optimal shopping basket (i.e., closest to but not exceeding 8 euros). I extracted the API from the deli's website, as it seems to be something custom. Of course, I might not care about some of the items that the utility includes in the most optimal basket. To mitigate this, the utility iteratively refines the basket by asking me if there is something I want to remove, and then replaces it with the next most optimal items to fill up the remaining budget.",
        "summary": "A utility has been created to generate the most optimal shopping basket for a food allowance of 8 eur/day, with the ability to refine the basket by removing items."
    },
    {
        "original": "I built a native mac app called FileWatcher. It watches the filesystem for events like read, write, open, mount, stat, etc etc. I wanted to investigate how xcode's build system worked [1] (which relies on `stat` to determine whether or not a file needs to be recompiled) and couldn't find any tool that would do the job.I was astonished when I couldn't find what I needed - surely this had already been solved by someone else! There are things like inotify and watchman, but they don't provide process information about the events.I haven't figured out how to distribute it quite yet because the API it uses to collect file system events isn't allowed in apps distributed on the app store. I recently made a short video demo, though[2].[1] https://blog.codysehl.net/2023/Understanding-the-XCode-Build...\n[2] https://www.youtube.com/watch?v=EPhMWXzoBWY",
        "summary": "I created a native mac app called FileWatcher to investigate how Xcode's build system works and to provide process information about the events, but it cannot be distributed on the App Store."
    },
    {
        "original": "I don't know if it qualifies as the \"most interesting\" but as a travel bug I wrote a little airfare scraper that I got plenty of value out of.Basically it's a script that scrapes several places for flight deals and \"mistake fares\" and notifies my phone if it matches with my city. No searching like other flight apps, you basically just set it up and wait, and various places will pop up. Helps if you're in a hub city e.g. NYC.The phone notification was crucial because such deals sold really fast. In case the booking didn't work out I was usually covered by the 24 hour cancellation rule [0][1].I started off running it on my own server but later I learned IFTTT handles device notifications without paying the Apple Developer tax, so I migrated things there. Used it more when I was single but nevertheless it's helped me land some killer deals e.g. NYC-Dublin RT for $300, NYC-Paris RT for ~$400.Thought about making a paid app out of it but the limited seating and time-sensitive nature of these deals is tricky.[0] https://www.transportation.gov/airconsumer/notice-24hour-res...[1] I believe this rule, which is not so broadly known, was imposed on air carriers in response to certain fraudulent online marketing practices going on at the time.",
        "summary": "This comment describes a script that scrapes flight deals and sends notifications to the user's phone, which has helped them land some great deals."
    },
    {
        "original": "I used to listen to lots of mp3s on my computer in the nineties, so I built a USB IR receiver that could interpret signals from a remote control and use it to control winamp.I made a tool that tracks the current and historical prices of all sailboats in the world to look for possible good deals.I made a website that let me track my student loan payoff (since I had 30+ different loans) that showed the total payoff as a big red thermometer. I also would track the dates of payments and used that to estimate the total payoff dateI made and open sourced an attendance tracking site for a local school that allows students to come and go throughout the day, but needs to ensure they at least showed up and returned before school let out.I made a tool that would determine the most efficient way to build damage per second on each hero in a moba. It used linear optimization to calculate which items to build and in what order to get the highest DPS.",
        "summary": "I created various tools to solve different problems, ranging from tracking prices of sailboats to tracking student loan payoffs and building damage per second in a moba."
    },
    {
        "original": "Its probably too late to comment for anyone to see/respond, but I've been working for a long time on a personal workstation automation/configruation project:- https://github.com/joelmccracken/workstationAt this point, its basically ready to go. Its a weird feeling. I've been working on it for so long, and now it... works.Being able to use github actions with macos runners makes this project so, so, so much easier.Another project I've been working on is a custom authoring format - think markdown, but customized to my needs (specifically, the format is extensible). Think markdown/xmlish hybrid. There is a lot of churn though so I'm not quite ready to demo it, but once I get something interesting I'll share it more with folks.",
        "summary": "The author has been working on two projects: a personal workstation automation/configuration project and a custom authoring format."
    },
    {
        "original": "My flatmate used to watch TV in the living room quite loud when I was trying to sleep in my room.I set a Raspberry Pi with an IR led running an Apache server close to the TV. From my phone I would visit the Raspberry IP and send signals to the IR led to lower the volume.",
        "summary": "My flatmate's loud TV was solved by using a Raspberry Pi with an IR led to control the volume remotely from my phone."
    },
    {
        "original": "Made a desktop app for homebrew beer recipes.There are plenty of brewing tools out there, but ito data model and workflow they are all basically descendants of ProMash. I wanted something that approached home brewing with a focus on process instead of ingredients.My data model of a \"recipe\" is a DAG of typed process steps each of which can have ingredients attached. Liquid volumes move through the DAG and are modified at each step. Outputs of the recipe are at the leaf nodes. This model can represent any wacky brew day you can dream up - including and not limited to multiple mashes, splitting or combining volumes pre or post mash/sparge/boil/cool/ferment/whenever, packaging wort, etc. The regular tools usually can't even represent a partigyle batch properly.Honestly for my regular 20L single-infusion no-sparge brew day it is probably slightly less convenient than say Beersmith. But for unusual situations it shines. For eg this past festive season I found myself needing to stock up quickly. Designing a 40L \"one mash, one boil, two different beers [1]\" double batch brew day was easy, and hitting all the numbers along the way for such a mad-hatter exercise was incredibly cool.[1] Scottish Export and Sweet Stout",
        "summary": "This desktop app for homebrew beer recipes has a data model and workflow that focuses on process instead of ingredients, allowing for complex brew days such as double batches."
    },
    {
        "original": "I used to love discovering new music through Spotify's Song Radio feature. But somewhere along the way, they started personalizing it so much that every radio is now basically an echo chamber of the same songs I already know, most of which I have even already added to my Liked Songs.I built myself a small service to \"disable\" (work around) Spotify's hyperpersonalization by giving me the Song Radio as an anonymous user would see it. It's available at https://spoqify.com/ (with the name chosen that way so that I only need to replace a single letter in the URL of a Song Radio Playlist and it'll forward me to an unpersonalized version of it).",
        "summary": "Spotify's Song Radio feature has become overly personalized, so I created a service to give me an unpersonalized version of it."
    },
    {
        "original": "I built a personal data warehouse just for myself, with everything from my Tweets and LinkedIn data to my Swarm checkins and a copy of my genome.I gave a talk about that (with a lot of video and screenshots) here: https://simonwillison.net/2020/Nov/14/personal-data-warehous...",
        "summary": "I created a personal data warehouse containing my social media data, location data, and genome, and presented it in a talk."
    },
    {
        "original": "I lived in a family apartment growing up, and we'd lock the door to the entire building at night when everyone was home with a sliding lock so that it could only be opened from the inside. However, that'd mean you need to ensure at least one person from every apartment was home, otherwise you'd need to go downstairs and let the others in in the middle of the night.All the 3 apartments in the building were sharing the same wi-fi device, therefore I built a simple scanner to find all the devices in the network, connect them to the individuals I knew, and show the devices I found on the network in a simple website, which then I installed on my parents' devices as a PWA. The scanner would run in a Raspberry Pi I had lying around.In the end it wasn't very reliable, the router kept failing occasionally due to nmap, and after a few failures we stopped using it, but it was a fun experiment for me.",
        "summary": "This comment describes an experiment to create a scanner to identify devices connected to a shared Wi-Fi network and display them on a website installed on the family's devices."
    },
    {
        "original": "Sounds super simple, but was awesome at the time. In the 90s when all of my music was either on CD or ripped to MP3, I built an FM transmitter to broadcast my computer audio (sonique or winamp) to any radio or receiver in the house. It was a perfect solution that didn't take long to implement. I didn't know anyone else who did this.About 5 years ago, I had a car stolen and lamented what affordable tracking mechanisms I could use. I cobbled together an extra cell phone and a data only SIM. I kept the phone running in the back of my van plugged into an auxiliary cigarette lighter port. It uploaded data to google spreadsheets every 15 minutes. I had to root it to have it automatically boot when connected to power. In the end, it was flawlessly reporting its location every 15 minutes.  While I was testing this, my car was stolen.  The google spreadsheet pointed me to the GPS location where it was. A phone call to the police and a 40 minute wait for them to arrive got my car back only hours after stolen. Dude was sleeping with a big knife next to him, so I'm glad I let the professionals speak with him.",
        "summary": "This comment describes how the author used a combination of FM transmitter, cell phone and data-only SIM to track a stolen car and successfully recover it."
    },
    {
        "original": "A TDCS device. Trans-cranial Direct Current Stimulation, mostly experimental, somewhat proven for short-term depression and cognition improvement. Motivation was my solution would be simpler and easier to control as well as include triple safety.I had little trust for the Chinese IC steered devices nor the early US attempters at pop market that refuse to describe even their safety approach.Pleased with my personal results. Would not openly recommend doing it, because the DIY route as well as adopting TDCS do require that you can competently read medical studies. At least half of those I browsed fail good science test even at first glance.And then of course the manufacturers and sellers are even worse, such as they are quite good at parroting misquotes of study results for marketing and PR.Next plan is build an ECG and my own medical ultrasound, although with that one it is probably best to wait for about 5 to 7 years till the new-tech ultrasound generators get to market.",
        "summary": "The author has had positive results with Trans-cranial Direct Current Stimulation, but does not recommend it due to the lack of good science and the manufacturers' misquoting of study results for marketing and PR."
    },
    {
        "original": "I built a VR environment for making and thinking about music, intuitively playing with alternate tuning systems, building instruments in space and livestreaming.https://www.youtube.com/live/v4uHqdTr-bs?feature=share&t=426...There are a few simple but powerful building blocks. One main feature is an egg shaped \"note\" which can be placed, resized, retuned and cloned on the fly. It's played by physics interactions with a \"mallet\" or sports balls, anything with a collider.One of the instruments is a sine wave organ which has drawbars to control the amplitude of overtones. Unlike a classic organ, these overtones can be independently retuned and assigned envelopes to produce a range of timbres. Pitch is consistently mapped to a spiral - an isomorphism of pitch space.It has a theremin which provides visual and tactile feedback and a voice with vocal formants controllable with a thumbstick.It has a physics based sequencer of sorts which consists of \"mallets\" on a wheel which spins at a desired ratio of whatever BPM is set in a DAW. These wheels can be cloned and multiple mallets arranged around the circle using the Euclidean rhythm algorithm.Since low latency audio in Unity is tricky, the VR app is really just a controller for synthesizers running in Max/MSP and IEM spatial audio VSTs running in REAPER. One day I'd like to package some portion of it into a mobile VR app for things like remote jamming or music lessons where models of the theoretic ideas are right there in front of us to tinker with. For now, it's just for me.",
        "summary": "This comment describes a VR environment for making and thinking about music, with features such as an egg-shaped \"note\", a sine wave organ, a theremin, and a physics-based sequencer."
    },
    {
        "original": "I really like reading books, non-fiction, fiction, business, everything. But I always tended to have good reading momentum and then life/work happened that derailed the reading habit - and I forgot about it. Took months to pick up again...To keep reading top of mind I built a Chrome \"newtab\" extension to show my \"Currently Reading\" list, and excites me about books I've put as \"to-read\". It has worked wonders on my reading! And it is pretty small and polished - no tracking, no credentials, just bare-bones.https://chrome.google.com/webstore/detail/currently-reading/...",
        "summary": "The Chrome \"newtab\" extension has been effective in helping the author maintain their reading habit by keeping books top of mind."
    },
    {
        "original": "When I was house-hunting I ended up writing a console app for my wife and I to do a few things:- Pulled down applicable YNAB savings envelope balances and future income calculations from a Google Sheets spreadsheet (which included stock prices for determining RSU payouts) to know how much cash we'd have for down payments at any time in the next 12 months- Allowed us to either give a house price and have it output when we could afford it, or give a month and tell us how much we could afford if we bought on that month- Do budgetary analysis of what the monthly payment would be, given fluctuating mortgage rates and estimated insurance from scraping Zillow/Redfin- Calculated transit times to my office and my wife's office using Google Maps- Allowed for swappable \"scenarios\" for all the above to show what would happen if we wanted to sell our current place first and then buy, buy and then sell, or buy-renovate-sell, so we could evaluate all options. We ended up going the buy-renovate-sell path in reality, and it was a huge stress relief to have hard numbers showing us the money was going to be fine.- Output several months of cash reserves for each scenario after all transactions were done, so we could know if we would cut too much into savings- Output a yes/no decision based on all of the above to keep us grounded and help prevent over-reaching for a house we couldn't afford - basically enforcing rules on ourselves",
        "summary": "The console app allowed the user to analyse their budget and calculate transit times to help them make an informed decision on which house-buying path to take."
    },
    {
        "original": "About a year ago I got a Tesla K80 off eBay for about $200. It's basically 2 Tesla K20Xes in one card, so it's pretty powerful, but the downside is that it's a datacenter GPU - it doesn't have any cooling.I 3D printed a fan shroud for it and put an old (but surprisingly powerful) fan on there, and that worked ok. The issue, though, was that I wanted the fan to be quiet when the GPU was idle, and I couldn't figure out fan control on Linux, so I decided to control the fan speed via an Arduino.I took a spare Arduino, some wiring, and despite never before programming anything for Arduino, I managed to hack this together: https://github.com/askiiart/k80-linux-coolingIt takes the GPU temperature, turns that into desired fan speed, then sends the desired speed to the Arduino over USB. The Arduino just controls the fan speed via PWM.",
        "summary": "An Arduino was used to control the fan speed of a Tesla K80 GPU to make it quieter when idle."
    },
    {
        "original": "I built a website to track the generation of electricity in Spain since I couldn't find a single page from the official provider that contains all the information I wanted to look at at a glance.\nhttps://energy.antizone.site/\nIt scrapes different pieces of data at different intervals.",
        "summary": "A website was created to track the generation of electricity in Spain by scraping different pieces of data at different intervals."
    },
    {
        "original": "I built this fun little tool that takes a Tweet and gets 10 different 'AI personalities' to reply to it. I thought this was a great way to get some feedback on how a tweet might be received. I also threw in a tab to se optimized versions of the tweet.I want to take this further and play with the idea of an AI only Twitter. Where AIs interact with each other based on real news. Could be a fascinating game of life simulation haha.https://www.tweetenhance.com/",
        "summary": "This comment suggests creating an AI-only Twitter where AIs interact with each other based on real news, which could be a fascinating game of life simulation."
    },
    {
        "original": "I wanted to practice with leetcode. Resetting the solution wasn't available as short cut key. So created a tampermonkey script to help me reset and redo the problem. Helps me a bit.After I got fired from twitter in 2015, I was having some remorse, dissatisfaction and sense of failure, opportunity lost. I wrote a browser extension, https://github.com/orsenthil/fortune-browser-extension that will good quotes I had collected and help me focus.I still go by that maxim. \"There are far far better things ahead than any we leave behind. C.S. Lewis\" and want to share this with anyone was let go by bad leaders in the tech layoffs.",
        "summary": "The author created a browser extension to help them focus and stay positive after being fired from Twitter in 2015."
    },
    {
        "original": "When language learners learn vocab, there are two main processes:\n1. Use a premade list of the top x words. Pro: they are guaranteed to be common words. Con: Once you make it past 2000 or so, they might not show up depending on what sort of niche things you read/watch/talk about\n2. Look up random words as you come across them, and learn those. Pro: These are words you really saw. Con: You don't know how common that word is, maybe this is the only time in your life that you'll see itI made a web app that lets you note down words that you come across and might want to learn, and then generates a learning order of those words based on a variety of frequency lists, as well as linking offsite for sample sentences etc. It allowed me to pass the JLPT N1 with just 6k known words (people usually need 8-10k)vocab.c-ehrlich.dev",
        "summary": "The web app created by the comment author allows language learners to learn vocab by using a premade list of common words and looking up random words as they come across them, helping them to pass the JLPT N1 with fewer known words."
    },
    {
        "original": "I like to fish at night. So I built 3D printed bobbers with an LED diode and scavenged LiPo batteries from vapes inside. It has a dime sized wireless charger receiving coil that is glued inside to a slightly flattened bottom. Externally I built a mini solar panel that charges a scavenged 18650 that charges the battery with a wireless transmitter. The bobber is about the size of a golf ball. I used a slow blinking LED diode that changes color of the bobber. Haven't caught a fish with it yet but it is mesmerizing watching it change colors and bob on the water.",
        "summary": "This comment describes a 3D printed bobber with an LED diode and scavenged LiPo batteries, which is used for night fishing and changes color when bobbing on the water."
    },
    {
        "original": "I like thinking out loud, but don't like having to listen to voice memos. So I created a syncthing folder that is synced between my phones and my home server, and created an iphone shortcut that records voice memos and saves them into that folder (and then opens the iphone syncthing app so that it'll do the sync). I have a cronjob on the server that looks for new audio files in that syncthing folder and transcribes them with whisper, formats them into a nice looking pdf, and sends them to the printer.  So now I can be anywhere, record a voice memo, and come home to find it sitting in my printer.",
        "summary": "I have created a system that allows me to record voice memos on my phone and have them printed out at home."
    },
    {
        "original": "I built https://osintukraine.com no clear idea who's using it but 2TB of videos go out of it every month since last year.",
        "summary": "The website https://osintukraine.com has been sending out 2TB of videos every month since last year, although it is unclear who is using it."
    },
    {
        "original": "I've been slowly working on a web app that keeps track of cocktail recipes and all the liquor bottles in my home bar, then it tells me what drinks I can make right now. It's been a fun way to spend way too much money at the liquor store buying \"just one more bottle\", and I've found some new favorite drinks via these recipes.It doesn't do anything amazing yet, but it's been fun to tinker with it over time and get back to coding as I do more and more management at work.The website itself is here: https://barkeep.website, and I've been blogging about it here: https://edbrown23.github.io/blog/",
        "summary": "I have been creating a web app that helps me keep track of cocktail recipes and liquor bottles in my home bar, and I have been blogging about it."
    },
    {
        "original": "I have a bunch of these. They are my favorite things to make. I've been making things like this for a long time but I only recently started to appreciate them after discovering this article. https://www.robinsloan.com/notes/home-cooked-app/- I have a disability and require daily personal care so I made a system for recruiting and hiring caregivers. (https://blakewatson.com/journal/a-home-cooked-app-for-hiring...)- I need to track those caregivers' hours so I can make sure timesheets are accurate, and I wanted to do it with minimal effort. So I created a plain text syntax readable by a web app I created that takes that syntax and outputs exactly what should go on the timesheets.- Sometimes the government agency that runs the program doesn't send me enough timesheets, so I created a \"forgery\" of their timesheets in CSS where all of the values are interchangeable via JavaScript. Now I can print any timesheet for any one of my caregivers for any time period on demand.- I made my own web-based bookmarking tool to replace my Pinboard account. It automatically sends every bookmark to the Wayback Machine. (I wrote about that one and a couple of others https://blakewatson.com/journal/the-joys-of-home-cooked-apps...)- Sadly I'm no longer able to use this one because of decreasing strength, but I once created a custom mobile-based keyboard for typing on my Mac. https://www.youtube.com/watch?v=Pre6EQGIuKY- I wanted to be able to share my plain text notes so I made a CLI for selectively publishing notes to the web.Really most everything I make outside of my day job is for me/family initially, but a lot of it I end up publishing. For example my main side project is A Fine Start (https://afinestart.me/). It actually started as an assistive technology just for me\u2014typing is difficult so I wanted a new tab page with just clickable text links. I used it for a while myself before eventually turning it into a browser extension and service for other people.",
        "summary": "I have been creating custom tools to make my life easier for a long time, and often end up publishing them for others to use."
    },
    {
        "original": "A recipe manager for our family that strips all the SEO text out using the OpenAI API. I built this after someone in our family got diagnosed gluten intolerant and we had to make changes to our usual recipes.Normal recipe sites tend to be full of irrelevant (SEO optimized) text, ads and tracking, and I wanted something to just get the recipe in a clean form.It\u2019s a basic web application (mostly in Go) to manage recipes. New recipes are imported from an URL, after which it extracts the plain text from the site and uses GPT to get a markdown formatted recipe and list of ingredients.This would\u2019ve been much harder pre-GPT, but now was trivial to implement.",
        "summary": "A web application was built to manage recipes, using OpenAI API to strip out SEO text and GPT to get a markdown formatted recipe and list of ingredients."
    },
    {
        "original": "I was playing a MMO with a market. Sometimes people would make mistakes, e.g. selling 100 iron for $1,000,000 instead of selling 1,000,000 iron for $100. I made a little tool that polls the API and sends a notification when someone made a mistake.Eventually I got bored of grabbing these mistakes and left the tool with my clan. It had the side effect of getting people active on Discord, and making people more actively involved in countering raids. We ended up building one of the most elite clans in the game until some other whiz kid built a better bot.There was also this little augmented browser tool that calculates the best order and timing to attack in the game, and the statistically likely result.We'd joke that all the tools we built for that game were probably well worth hundreds of thousands of dollars and that's around the time I decided to quit and spend my time on something more useful.",
        "summary": "Building tools to automate processes in a MMO game resulted in the creation of one of the most elite clans, but eventually the creator decided to quit and focus on something more useful."
    },
    {
        "original": "Way back in the day before space was a non-issue I bought a used pioneer 720 disk DVD changer. Wrote a frontend to control it and mount the DVDs over iscsi for my media center.Also many years back when I was traveling all the time I created a thing based off the what 3 words data where I could geo drop messages at a location.  My friends and I used it for a while but then just forgot about it.",
        "summary": "The author created two projects in the past, a DVD changer and a geo-drop messaging system, but eventually stopped using them."
    },
    {
        "original": "I originally built OnlineOrNot (https://onlineornot.com) to have a convenient way to convince my contracting clients that their hosting sucks.They'd be like \"Oh but I pay $5/mo for this wordpress host, it's fine?\" and I'd send them a report saying their website was offline for say 10 hours that week, and to calculate how much being offline for 10 hours would cost them.Eventually a client asked to be setup with their own account, so I took the time to go full-SaaS.",
        "summary": "OnlineOrNot was created to provide evidence to clients that their hosting was inadequate, and eventually evolved into a full-SaaS service."
    },
    {
        "original": "I built a website that you can bring up in multiple browser windows, or on multiple adjacent monitors attached to independent computers. Each browser displays a unique QR code. A user can navigate to a second webpage, activate their camera, and point their camera at the QR codes. Each QR code will switch to a unique AR code, then the user can project a single continuous image across all the monitors. It mostly works but I\u2019m missing some 3d math to make the image line up perfect when the angles are weird.",
        "summary": "The website allows users to project a single continuous image across multiple monitors, but it is missing some 3d math to make the image line up perfectly when the angles are weird."
    },
    {
        "original": "As a color-blind person, most of the time when stuff on screen was only differentiated by color (like red/green status indicators), the go-to-tool would be the system\u2019s digital colorimeter for me.It was tiresome to have to launch an extra application and inspect RGB percentages to derive what color I was supposed to see.The colorimeter I made activates while holding down an inconsequential modifier key on the keyboard and shows the name of the color.Now I can also quickly double-press that modifier key and copy the color value to the clipboard.",
        "summary": "The colorimeter made by the color-blind person allows them to quickly identify colors on screen and copy the color value to the clipboard."
    },
    {
        "original": "Most useful thing?Honestly, a lamp that uses a 1W red LED behind a big diffuser. It uses PWM in the MHz range for dimming (so definitely no flicker), and big physical controls. My wife and I both get migraines and being able to set very dim red light seems to be better than sitting in complete darkness. I have insufficient data to tell if this is a real effect, unique to us, or placebo.Code is in AVR assembly, because that's easiest for me. Sometimes I feel silly that after all these years working with technology, this is the most useful thing I've managed to build for myself. Hey, it's not nothing though :)",
        "summary": "The most useful thing the speaker has built is a lamp that uses a 1W red LED behind a big diffuser, which uses PWM in the MHz range for dimming and has big physical controls, which helps the speaker and their wife with migraines."
    },
    {
        "original": "- I built DreamList.com originally because I was working on another startup and as a founder I didn\u2019t want my Baby Registry showing up on search engines or my address showing up to random people who looked up my name. All the other services were using customer names as free SEO and every list was indexed by default with your address available. I built it safe and private for my own family and over time it went from side hustle to main hustle, especially as demand for privacy-respecting social and family software keeps going up.- A family member in an elected position needed to write a schedule for 22 healthcare professionals that take shifts every month and I wrote a tool for them that allows them to make sure everyone gets sufficient time off and nobody takes too much of the weekend load. They were elected again and to a higher leadership role partly because of the scheduling tool.- Regularly writing new stock trading, modeling, and timing software to improve my earnings from trading.- Wrote my own tool to scrape bios, cluster and find investors in different niche areas and need to rewrite it for recruiting people with niche expertise.- Created a social network for collaboration between nerds like me in different disciplines at top universities while I was at grad school and shut it down after it got flooded with recruiter spammers. Always thinking of ways to relaunch that.",
        "summary": "The comment highlights the speaker's entrepreneurial spirit and their various projects, which focus on providing privacy-respecting software, creating tools for scheduling, stock trading, recruiting, and a social network."
    },
    {
        "original": "A door sensor, for when my kid was sleep walking.  There are various door sensors out there on the market, but they all set off a siren. I just wanted something that would alert my phone and wake me up, in case she did it in the middle of the night. Your not supposed to wake up a sleep walker, and I sure as hell didn't want a siren going off in the middle of the night.Kinda sorta worked ok...just in time for her to stop sleep walking.",
        "summary": "A door sensor that alerts a phone instead of setting off a siren can be used to prevent waking up a sleepwalker."
    },
    {
        "original": "I've built my own small embeddable functional language with structural record unions and effect types. \nBy focusing on making the language tiny I have been able to embed it in arduino, web and server projects. The aim is to eventually use it for every side project I make.\nhttps://petersaxton.uk/log/",
        "summary": "The author has created a small, embeddable functional language with structural record unions and effect types to use for various side projects."
    },
    {
        "original": "I don't know about the most interesting thing I built ever, but I am pleasantly surprised with the utility and usefulness I am getting out of https://jarvis.tel.I built it to scratch my own itch: I wanted a way to use AI on the go the way I talk to people (via text messages) and wanted a way to quickly show off AI to the uninitiated (friends and family who have never seen or used or understand AI).",
        "summary": "I built a tool called Jarvis.tel to use AI on the go and to show off AI to people who are unfamiliar with it."
    },
    {
        "original": "It's a Firefox extension for just me. [0] I've posted it here before, and one user said they'd start using it. I hope someone else finds it useful again. The problem: I wanted to be able to mute League of Legends streams in between games with a hotkey, and without changing visibility of any windows in the process of doing so. This is a much harder problem than you'd think, even with the existence of Autohotkey, and NirCmd, and ControlSend, because Firefox is really annoying. [1] It ended up requiring me to write an entire Firefox extension as well as use an AHK that uses ControlSend.Anyway, yeah, that FF extension. It represents the culmination of about 5 years of me trying to solve this problem with progressively more complex and incrementally better solutions until I finally arrived at a ridiculously over-engineered version that actually works as it should.[0] https://github.com/RheingoldRiver/MuteTabsMatchingPattern[1] https://river.me/blog/global-hotkey-mute-firefox-stream/",
        "summary": "This Firefox extension allows users to mute League of Legends streams with a hotkey without changing visibility of any windows."
    },
    {
        "original": "As part of my bid to learn Rust I recently built this Telegram bot to subscribe to hacker news posts based on keywords.\nhttps://github.com/uint4096/subscribe-hn\nRight now you have to host your own instance, but I'm working on ways to manage it for people who want to use it (just a couple friends for now).",
        "summary": "I am working on ways to manage a Telegram bot that allows users to subscribe to Hacker News posts based on keywords, so that people who want to use it do not have to host their own instance."
    },
    {
        "original": "I'm currently working on a service that would allow me to place orders using a satellite messenger.Some background: When I hiked the Pacific Crest Trail few years ago, I used to order items that needed to be replaced or that I lost to the next or town stop using my phone (most towns have a general store or a supermarket, often not an outfitter).However, it's not uncommon for sections of the trail to be outside cell service for days between town to the next one.Anyhow, since the next trail that I plan to hike, the Continental Divide Trail, is even more remote than the PCT, I started to play with a prototype of a satellite messenger backed service to let me order items from a predefined list (each can match multiple items of a different priority) and be shipped to a predefined shipping address (post offices of trail towns along the trail).So, for example, assuming that one of my contacts is a phone number that my service is monitoring, I can text a message like that:  items: shoes, tape, filter, usb cable, ice axe;\n  to: Chama;\n  eta: 2023-07-01;\n\nAnd it should place an order of a predefined pair of shoes, water filter, Leukotape and USB cable and ice axe to Chama, NM.\nMessages are limited to 160 characters before they get split, and so to keep it simple, I might use shorter abbreviations for some items.If any item on the list can't be delivered until 2023-07-01 using prime shipping (unfortunately it's the easiest option), it should be dropped from the order. Alternatively, if the guaranteed delivery date is off by 1 day, I might just place it on a separate order, hope for the best and if it doesn't show up on time, it'll get returned individually after not being claimed.",
        "summary": "A service is being developed to allow orders to be placed using a satellite messenger, with items being shipped to predefined shipping addresses and delivery dates being taken into account."
    },
    {
        "original": "I made a shell script that can be used to generate a diff of what data was modified in your pg database between two points in time. I use it to help me get a quick sense of what certain actions do without having to dive into the code too deeply. It's a pretty simple thing, but has been valuable to me quite a bit. https://github.com/denvaar/pgdiff",
        "summary": "This shell script helps to quickly identify changes in a PostgreSQL database without needing to look into the code."
    },
    {
        "original": "A toolset for learning Japanese with focus on listening comprehension. Most resources suggest a \"writing systems first\" approach, which seemed counterintuitive to me. So I started coding my own tools 10 years ago. First, a small spaced repetition system for vocabulary connected to forvo (pronunciation database) and lateron an addon for Anki (popular spaced repetition system). The addon is made for studying with movies and includes a dictionary and a parser for converting the original script to something simpler.In retrospect, it was totally worth it: I reached a decent amount of fluency in listening comprehension and used the tools to create a Japanese course for others, which became popular on ankiweb: https://ankiweb.net/shared/info/911122782",
        "summary": "Creating his own tools to focus on listening comprehension enabled the author to reach a decent level of fluency in Japanese."
    },
    {
        "original": "Our house has a commercial style HVAC system. The controllers for everything (relays) are very simple. The run on a protocol called BACNet that is unauthenticated and pretty straightforward.I was able to read in all the data points and then use the weather forecast and a few other data points to make changes to my HVAC system. The comfort different has been very drastic. Our house doesn't overheat on hot days and doesn't get cold fast when the temperature drops. (I am in the Northeast where there are big swings).",
        "summary": "Our house has been able to maintain a comfortable temperature with the use of a commercial style HVAC system, BACNet protocol, and other data points."
    },
    {
        "original": "My family has historically been very into genealogy research, so we've got lots of family tree info. I've been working with my aunt to put together a webapp to create/edit info, see relationships, show ancestors/descendants of individuals. We've also started adding photos recently, which is really cool.Favorite feature we've built: \"are you my cousin\", where you choose 2 people in our database and it calculates how they are related. First time I got to write a search function outside of a classroom!I'm sure Ancestry does all this and more, but it's nice to have something that we built that's just for our family. We also use it all the time to verify relationships/birthdays!",
        "summary": "The family has created a webapp to store and manage genealogy information, including photos, and a feature to calculate relationships between two people in the database."
    },
    {
        "original": "When I was 15 years old and my sister was 4 or 5 years old, I wrote a pascal program that showed a big letter on a screen when my sister pressed such letter on a keyboard.She had fun pressing letters on a keyboard and then seeing them on the screen - possibly learning alphabet and keyboard layout at the same time :)",
        "summary": "I wrote a program to help my sister learn the alphabet and keyboard layout by pressing letters on a keyboard and seeing them appear on the screen."
    },
    {
        "original": "My son is an English language learner in high school, and this is the first year he is in the standard English class instead of English for ELLs. His class is reading Into the Wild and it's a bit beyond his current reading comprehension level, so I used GPT-3.5 to build an annotated version for him to read. Less common English language words can be clicked on to hear the pronunciation and see the definition in Spanish, and every few paragraphs, there is a summary in Spanish. I had GPT-4 do the web design for me.https://isaiah.st/john/ez/into-the-wild/authors-note.html",
        "summary": "GPT-3.5 and GPT-4 were used to create an annotated version of Into the Wild with Spanish pronunciation and definitions for less common English words, as well as summaries in Spanish, to help the author's son, an English language learner, understand the text."
    },
    {
        "original": "Some years ago, I was annoyed by 1password not having any support for Linux and local vaults, and their vault spec was open, so I build a JavaFX app that allows me to read/view my passwords and OTP tokens.https://github.com/ingon/opvaultfx",
        "summary": "I built a JavaFX app to read and view my passwords and OTP tokens since 1password did not have any support for Linux and local vaults."
    },
    {
        "original": "Right now, I have to remember a large amount of information through rote memorisation. I built myself a little webapp which allows me to upload a folder and it process the text (an un-annoying use of gpt) and spits out gigantic flashcard sets.",
        "summary": "A webapp was created to help with memorising large amounts of information by creating flashcard sets from text."
    },
    {
        "original": "Built a Chrome extension to save myself money last Christmas: https://getscore.app/chrome?ref=hn.Ended up saving thousands of dollars for myself so far (I shop a lot online), and friends & family really love the product. We also applied to YC \u2013 so let's see how that goes!",
        "summary": "A Chrome extension was built to save money and has been successful, resulting in thousands of dollars saved, and has been applied to Y Combinator."
    },
    {
        "original": "I've built a CRM (https://www.bizzey.com) for myself to automate my accounting / business administration. I was freelancing on the side and noticed that many of the business solutions where either crazy expensive for a single person business or looked like they were made in the 80's.It has since exploded into fully fledged CRM with all kinds of features you can choose from. I originally built it for myself to keep track of everything expenses, recurring invoices, ... At some point a freelancer saw me working in it and asked what I was using.Told him what I was working on and he became my first customer, since then it has spread through word of mouth.",
        "summary": "The speaker created a CRM to automate their business administration, which has since grown into a fully-fledged CRM with many features and has been spread through word of mouth."
    },
    {
        "original": "My parents have a sauna in their home (northern Europe), but it takes an hour or so to heat up. I connected the controller to an arduino with Wi-Fi shield and let the sauna run its own tiny Webserver that served a single page with a single button to turn it off or on. They would turn it on before they left work so it\u2019s nice and warm after cycling home through the freezing cold.Unmaintained code: https://github.com/maebert/SaunaControl",
        "summary": "I created a system that allowed my parents to remotely turn on their sauna before they arrived home, so it would be warm when they arrived."
    },
    {
        "original": "I built a sprinkler system that has 14 zones. Using raspberry pi and relays. It has a web interface and can run on schedule or manually. \nWorked out to be better than a kickstarter I backed, lono, that turned out to be dud and the company went under.I plan to open source it. have to clean up the code. Built with python flask, GPIO and a small custom PCB that interfaces pi with the off the shelf relay boards.Todo\n- flutter app\n- 3D printable enclosure to package  the entire set. \n- basic logo etc.",
        "summary": "I built a custom sprinkler system with 14 zones, a web interface, and Raspberry Pi and relays, which is better than a Kickstarter project I backed, and I plan to open source it."
    },
    {
        "original": "I built DiffLens (https://www.difflens.com/) initially just for myself. It's a diff tool that uses abstract syntax trees to make the diff more review-able. It's free for anyone to use too. I use it every day to review my diffs. If anyone works on Typescript, Javascript, HTML and/or CSS, do check it out!",
        "summary": "DiffLens is a free diff tool that uses abstract syntax trees to make diffs more review-able, and is especially useful for those working with Typescript, Javascript, HTML and/or CSS."
    },
    {
        "original": "My AirPods Pro often fail to connect properly, appearing connected but music still plays on cellphone.As an introvert, I don't like to bother people. When I'm in a quiet coffee shop or library, I turn down my phone volume, select a white noise track in Apple Music, and put my ear near the bottom of the phone.So, I created the simplest app of my life: open the app, and it plays the sound of waves. If your phone is in silent mode, it won't play anything when the connection fails, even if the volume is high.I posted it on the web, and many people didn't understand its purpose, thinking it was just another white noise app. It received very few downloads. However, it's the only app I made that I use every day.",
        "summary": "The author created an app to play white noise when their AirPods Pro failed to connect properly."
    },
    {
        "original": "As it happens, I just built the minimal, hackable tool for drawing boxes and arrows that I've always wanted.https://git.sr.ht/~akkartik/snap.love",
        "summary": "The comment suggests that the speaker has created a tool for drawing boxes and arrows that meets their desired specifications."
    },
    {
        "original": "During the lockdown me and my girlfriend to watch movies remotely synced, I wrote a service to sync VNC instances together via websocket. It worked via the web control panel of VLC and a Chrome extension was handling the websocket messages and clicking on the buttons. It even added some indicators to show if we both connected.",
        "summary": "A service was created to synchronize VNC instances together via websocket, with a Chrome extension handling websocket messages and clicking buttons, as well as providing indicators to show if both users were connected."
    },
    {
        "original": "I have a pretty clear view of the road infront of my place and an old android laying around, So i wanted to know more about the stats of vehicles passing byended up setting up Yolo with deepsort to track each vehicle pass, and making a cool dashboard to show stats, like speed of pass and graphs to show how busy the road is over timehttps://dharisd.github.io/posts/vehicle-monitor/https://dharisd.github.io/posts/vehicle-monitor-part-two/",
        "summary": "Dharis set up Yolo with Deepsort to track vehicles passing by his place and created a dashboard to show stats and graphs to monitor the road traffic."
    },
    {
        "original": "I\u2019ve built this to prove to myself that viewing text in 3D fundamentally changes the interaction and information gleaned from the relationships of files and software. I\u2019ve had fun, and some people like it. It\u2019s a toy and I want more for it, but it gets harder and harder to make progress by myself. New topics, necessary optimizations, bad fundamentals, and honestly\u2026 lack of internal motivation.It\u2019s a Mac app, it works in iOS too, and it has an AR mode. You can point it a git repo to download and view all the files. Hopefully someone else may enjoy it.P.s.: to the idea of highlighting word definitions, I\u2019m working on personal dictionary building and visualizing as well.. imagine heptopod language but with words. Same tech, different code flow.https://github.com/tikimcfee/LookAtThat",
        "summary": "The author has built a 3D text viewing app for Mac and iOS with an AR mode, and is working on personal dictionary building and visualizing to further improve the app."
    },
    {
        "original": "I\u2019d say almost everything I\u2019ve written, has been for personal use, even though I publish as public open-source.I write a lot of modules and SDKs, and regularly consume them in my own work. Comes out great.Lots of folks ignore my work. I won\u2019t bother speculating as to why, but I\u2019m fine with that, as everyone that depends on my work means I need to take them into account, when maintaining. If I\u2019m my only customer, then I can do whatever I want. I write stuff that I need.Publishing as \u201cclassic\u201d public open source, forces me to do a good job, so that means that really significant parts of my projects are pretty much \u201cworry free.\u201dYou can see my stuff in my GH orgs (I don\u2019t really have much in my personal repos).https://github.com/ChrisMarshallNY#here-on-github",
        "summary": "I write modules and SDKs for personal use, but publish them as public open-source, which forces me to do a good job and ensures that significant parts of my projects are worry-free."
    },
    {
        "original": "Probably the backup and update system for my desktop.All of my Linux boxes use btrfs as the filesystem.I have some tools that makes snapshots of all the subvolumes I wish to keep backups of and does incremental transfers of them to my NAS. It will incrementally transfer any non-synced ones as well, so if you run make-snapshots multiple times without backing up, they'll all end up on my NAS eventually.You can also have it create a writable snapshot out of the latest full snapshot so you can muck around with updates without breaking your current environment. It also updates the rEFInd configuration dynamically so you can boot into old snapshots if the one you're working on is broken. You can also have it spin up a VM to test as well.I also wrote my own tiny dynamic DNS service I run on my blog's VPS so I can bind my home network's IP address to a domain name. It's just a tiny node.js app that acts an an authentication frontend to update a bind server's DNS config.",
        "summary": "The backup and update system for the desktop uses btrfs, snapshots, incremental transfers, writable snapshots, dynamic rEFInd configuration, and a dynamic DNS service to provide a secure and reliable environment."
    },
    {
        "original": "Shared Slides Clicker [1] - an extension to allow for multiple people to remotely drive a single Google Slides presentation. I created this because it drives me insane when I hear people saying \"Next slide please\"!  It leverages React and Firebase.Simple Weekly Meal Planner [2] - a very simple, free PWA for deciding what you want to make for dinner each week and tracking all the ingredients you need to get from the market. I built this because meal planning is one of the most annoying parts of adulting.  It was built with Svelte and Firebase.Audiobook Locker [3] - a Tauri-based desktop app for managing your audiobooks. Think calibre-for-audibooks.  I created this because I wanted a nice way to keep track of which audiobooks I'd completed and which to read next.  It uses Svelte for the UI and Rust on the backend.[1]: https://fonner.gitlab.io/shared-slides-clicker/\n[2]: https://simpleweeklymealplanner.com/\n[3]: https://fonner.gitlab.io/audiobook-locker/",
        "summary": "I created three different projects to make life easier, each using different technologies such as React, Firebase, Svelte and Rust."
    },
    {
        "original": "A custom, DIY smart monocle from off-the-shelf parts, 3d printing, and custom electronics: 1080p60hz, 8-11hrs of battery life on a belt-clip battery + computer combo, has wifi & lte/cellular, can run ML models on device. One third the weight of upcoming Apple AR/VR glasses and one-sixth the cost. Just having it working has increased my efficiency a ton without obstructing vision or requiring me to look at secondary monitors or phone.Working on replacing my wireless keyboard and trackpad with some \"gloves\" so I can use it while on hikes or just generally outside. Then, gonna integrate some custom AR and ML/GPT.",
        "summary": "This person has created a custom DIY smart monocle that has increased their efficiency and is lighter and cheaper than upcoming AR/VR glasses, and they are working on integrating custom AR and ML/GPT."
    },
    {
        "original": "I've written a bouncing color bar for Amiga, which was running without the processor.Amiga computers have- a main processor (MC68000 or higher),- a bit blitter, which can perform memory various operations in memory (using 3x source and 1x target, it can AND, OR etc. them),- and a Copper, which have own \"program\", it can interpret 2 type of instructions: WAIT for a scanline position (4-pixel precision), and COPY value to a specified regsiter.It was the name, which made me think: \"Copper\" is coming from \"coprocessor\". Well, it can run WAIT and COPY instructions, but the program's time-scope is somewhat restricted, the program is running every screen refresh cycle only once. Is it possible to write a program for Copper, which is doing some more, like animation?I've generated several color bar frames for Copper, which adds up as a bouncing bar, and as the last instructions, I've added a COPY instruction, which sets the address of the Copper List to the next frame (the last one pointed to first frame).So, it worked, the bar was bouncing without any support from the processor (besides initial generation and setting of the Copper List address first time).Blitter and audio DMA is fantastic, it's a big help that the processor just puts an order to a hardware and it executes, but Copper is a degree more bigger magic, it can make things autonomously, which I was demonstrated.",
        "summary": "I have created a bouncing color bar for Amiga computers that runs autonomously without the processor's support."
    },
    {
        "original": "I made a wagon with an electric motor to carry my things to the park and at music festivals. It has a 1000W brushless DC motor and a drive train for a go cart. It\u2019s controlled by an ESP32 that is attached to a hand throttle on the handle for the wagon. This ESP32 also has a temperature sensor attached to the batteries in the wagon to make sure they don\u2019t overheat. It controls a relay that powers another ESP32 that controls the Neopixels I\u2019ve attached to the wagon using LED channels with a milky white diffuser.It was a very fun project and I learned a lot about electricity, batteries and the pitfalls of aliexpress.",
        "summary": "I built a wagon with an electric motor, 1000W brushless DC motor, drive train, ESP32, temperature sensor, relay, Neopixels, LED channels and a milky white diffuser, which taught me a lot about electricity, batteries and the pitfalls of aliexpress."
    },
    {
        "original": "I currently live in a place in which at 4:30am ~ 5am a mosque speaker loudly blares through my closed window, through earplugs, and wakes me up.I built a white noise generator on a timer, which starts up a little while before the expected disturbance, plays through it, then stops a little while after.",
        "summary": "I have created a white noise generator to help me block out the loud noise from the mosque speaker that wakes me up early in the morning."
    },
    {
        "original": "I wrote my own firmware for ESP-8266 IoT devices to connect them to Home Assistant. There are many like it, but this one is mine: https://github.com/thedanbob/mqtt_light\nhttps://github.com/thedanbob/mqtt_garage_door\nhttps://github.com/thedanbob/mqtt_power_cycle",
        "summary": "Thedanbob has written custom firmware for ESP-8266 IoT devices to connect them to Home Assistant."
    },
    {
        "original": "I don't like Reddit's UI for browsing subreddits that are mostly/entirely images, and I don't really like their gallery viewer either. I've always wanted something ultra-simple; just a grid of images and nothing else. So I built it:https://griid.co/I don't think anyone else really uses it, and I haven't promoted it at all. But I really enjoy using it.",
        "summary": "I built a simple grid of images for browsing subreddits that are mostly/entirely images, which I enjoy using, but I haven't promoted it."
    },
    {
        "original": "I made a python script / notebook to scrape a reddit thread on music, send all the comments to ChatGPT with a prompt like 'extract all the songs to CSV' and then upload to a Spotify playlist. probably high school level these days but it was amusing. https://github.com/druce/reddit_prettiest_songs",
        "summary": "I created a Python script to scrape a Reddit thread, use ChatGPT to extract the songs, and upload them to a Spotify playlist, which was an amusing project for a high school student."
    },
    {
        "original": "Chicken coop auto-door opener so I don't have to get up at 4AM in the summer. It was just a basic Arduino system but I learned that large canning jars make excellent enclosures: waterproof, reusable, easily modified and replacable lid.",
        "summary": "Using large canning jars to enclose an Arduino system can be a convenient and effective way to create an auto-door opener for a chicken coop."
    },
    {
        "original": "I have a liquid bi-prop rocket engine on the table next to me that is almost ready for a static fire and then a launch later this year likely at FAR or Spaceport America.It has improved pretty much all my skills. Fabrication, embedded software/controls, system integration, operations processes, research and learning and so on. So far it\u2019s been my most challenging personal hobby project.",
        "summary": "This project has been a challenging and rewarding experience, as it has improved the speaker's skills in fabrication, embedded software/controls, system integration, operations processes, research and learning."
    },
    {
        "original": "I built this simple website https://unexploredhq.com to find interesting (less known) places to travel with my SO and family. Instead of searching for new places by name, one can search for new places in a region with simple attributes.I have built the database by scraping some data online, and have a database of 60,000+ locations. The attributes are built with some basic ML and text processing, nothing fancy. But this is sufficient for me to do this search: find places in Europe where I can do surfing and hiking with a temperature of less than 25 degrees.",
        "summary": "This website allows users to search for new places to travel to in a region with simple attributes, using a database of over 60,000 locations and basic ML and text processing."
    },
    {
        "original": "A webbapp that helps me remember names by showing them in a graph network. Super simple, use it constantlyA webapp for sharing files/text between two devices no matter the platform. Use this all the time. No more sending emails, Facebook message, dropbox link to yourself.",
        "summary": "This webapp allows users to easily share files and text between two devices regardless of platform."
    },
    {
        "original": "My Raspberry Pis all netboot. I have a bunch of them around the house. Some play music, some play games, some are smart TVs. Because they all boot from the LAN, there's no card to wear out, and I can change what OS they boot into just by renaming a file. It's simple, but intensely useful.",
        "summary": "Netbooting Raspberry Pis is a simple but useful way to manage multiple devices with different operating systems without having to worry about wearing out cards."
    },
    {
        "original": "12 years ago my wife had 4 strokes, barely lived, was in a coma, etc.After lots of rehab she came home, but was paralyzed on left side, couldn't speak, couldn't hold a pen to write.  Our communication technique was having her point to letters or phrases on a piece of paper.I wrote a typing program back then that would accept as input any USB joystick for selecting letters/phrases and then text to speech on button press. Not terribly complicated, but also better than anything I could find at the time.",
        "summary": "The author created a typing program to help with communication with their wife, which was better than anything they could find at the time."
    },
    {
        "original": "After getting an EV many years ago (not a Tesla) which had a truly terrible phone app for checking charge status, starting charging and turning on the heater remotely, I reverse engineered the API and wrote my own web-based tool to control the car. It worked great until 3G was disabled last year.",
        "summary": "The author reverse engineered the API of their EV and wrote their own web-based tool to control the car, which worked until 3G was disabled."
    },
    {
        "original": "I wrote a flow-graph in Gnu Radio to receive and decode VOR broadcasts[1] using an SDR dongle and my laptop. It was fun to drive around the local station and see it point towards the station.[1] https://en.wikipedia.org/wiki/VHF_omnidirectional_range",
        "summary": "I had fun using an SDR dongle and my laptop to receive and decode VOR broadcasts and use it to point towards the local station."
    },
    {
        "original": "Not something terribly impressive or useful, but I wrote an image-scrambling (anything-scrambling, really) program which is quite unique.I was fascinated by the story of David A. Scott, who was obsessed with \"bijective compression\". It means compression programs where all files are valid archives, and moreover no two archives decompress to the same file. So no magic number file signatures, no checksums, no redundancy whatsoever. Scott felt that compression algorithms that didn't have this property were wasteful, and of course, in a narrow technical sense he was right. There are of course a number of practical reasons why we tolerate a little redundancy.But he wouldn't let practicality stop him. He made bijective versions of many common compression algorithms. He made a bijective Huffman encoder (one where you'll never get \"unexpected end of file\"), a bijective arithmetic encoder, and even a bijective LZ variant. But most impressive of all, he made a bijective BWT version.The Burrows-Wheeler transform is fascinating on its own, and it's almost bijective. It sorts letters in a text by their context, so that letters with similar context appear close to each other. In a strange vaguely DFT-like way, it switches long-distance and short-distance patterns around. The result is, in a typical text, long runs of the same letter, which can be easily compressed.But the traditional BWT technically works only up to rotation. You get a rotation of the original string back when reversing it, but you don't know if it's the right rotation. You need to store a tiny piece of extra information, either the index of the rotation, or a single sentinel character known to be the last (or first) letter in the original string. Getting rid of that last piece of information seemed impossible, but Scott figured out a way to do it!The result is that we have a truly bijective version of the BWT transform. Now I'm no mathematician, but surely that is beautiful? It's a true permutation now, that still does the weird low-order higher-order swapping thing, that you could surely analyse with many algebraic approaches that wouldn't work for the original.Anyway, what I did was implement this transformation on the lines or pixels of an image. So you get an effect similar to the \"pixel sort\" effect that glitch artists were into for a while, but it's reversible. I guess it's not really useful for anything other than making glitch art, but it's at least a program that does something pretty unique, and which only a very specific kind of weirdo would have the skills and inclination to write (namely me).",
        "summary": "I wrote a unique image-scrambling program based on the bijective Burrows-Wheeler transform, which is a true permutation that swaps low-order and higher-order patterns."
    },
    {
        "original": "I built a starter template \"create-rpc\" [1] to help my freelancer friends to easily setup RPC API for Typescript projects.The core is powered by meta-programming, aka code that further generates code.It auto generate typed client SDK with named types for API input and output. And it comes with JWT integrated out of the box.Compared to traditional untyped restful API over http, it helps developer to prototype and evolve the application with inferred type hint.Upcoming improvement will be runtime type checking with cast.ts [2] or ts-type-check [3][1] https://www.npmjs.com/package/create-rpc[2] https://www.npmjs.com/package/cast.ts[3] https://www.npmjs.com/package/ts-type-check",
        "summary": "I created a template to help freelancers easily set up a Typescript RPC API with JWT integration, typed client SDKs, and upcoming runtime type checking."
    },
    {
        "original": "http://whenisgoldenhour.com .. tech isn't particularly interesting, but it gets a decent bit of usage. Does a geoip lookup to tell you the golden hour time range for today. Inspired by my photography habit.",
        "summary": "This website provides a geoip lookup to tell users the golden hour time range for the day, inspired by the creator's photography habit."
    },
    {
        "original": "MUDs are a great breeding ground for bespoke programs. I've made my own system of triggers and aliases in Rust, which interfaces with Mudlet (very popular MUD client) through JSON over stdio. Being written in Rust, it has enabled a publicly usable web tool (http://seurimas.github.io/topper/explainer/?/topper/explaine...), but the majority of the code is just for me.",
        "summary": "MUDs provide an opportunity to create custom programs, such as a Rust-based system of triggers and aliases which can be used to create a publicly usable web tool."
    },
    {
        "original": "I wrote a hearthstone simulator when the game came out.https://github.com/jleclanche/fireplaceIt was used and referenced by a few scientific papers and phds since. It\u2019s my little pride, even though it would really need a rewrite at this point to work properly with all the additions in the game.It contains its own little python driven dsl for actions. I could talk about it for hours. All that work led to me starting a company around hearthstone (I have since left it behind but it eventually grew into other games).",
        "summary": "A hearthstone simulator was created which was used and referenced by scientific papers and phds, and it led to the creation of a company around hearthstone."
    },
    {
        "original": "I made an AR-based app for myself that tracks my head in 3D space and then pipes the position and angle data to my PC which uses an open source app called OpenTrack to emulate the \"TrackIR\" protocol to then 3D-control the camera in sim games (like flight sims) with slight movements of my head.I then posted a little video of it to /r/flightsim (https://www.reddit.com/r/flightsim/comments/id7vmy/head_trac...) and it turned out to be something others wanted, too, so then I polished it and released it as a full app (SmoothTrack). It's been the most successful side project I've ever done.",
        "summary": "I created an app that uses AR to track head movements and control camera angles in sim games, which was successful enough to be released as a full app."
    },
    {
        "original": "Eh, at the moment a universal remote control app for my home theater.  I expanded it somewhat for many other devices than I need, for friends and people on the AVSForums who requested things.https://github.com/nicko88/HTWebRemoteIt's not all that impressive per say, but a number of people seem to really like it.Also an app to add a \"wind\" effect to a home theater as well.https://github.com/nicko88/HTFanControl",
        "summary": "Nicko88 has created two apps, a universal remote control and a fan control, which have been well-received by users."
    },
    {
        "original": "I combined mblaze (https://github.com/leahneukirchen/mblaze), fzf and standard UNIX tools to build my own CLI MUA in under 300 lines, most of which is shell scripts.When UNIX is your platform you don't need a complex UI framework with thousands or millions of lines of codes, and you get to reuse knowledge you've already built elsewhere.I need to write more about it",
        "summary": "Using UNIX tools and existing frameworks, it is possible to create a CLI MUA with minimal code."
    },
    {
        "original": "I built my own lay man's digital signage solution.I wanted to have a display in my living room, which shows the temperature of all rooms in my apartment. So I used an Android Picture Frame. This is connected via WIFI, and offers FTP access.A Docker service on my local in-house server grabs a random background image from a folder. Depending if we have  day or night time, the picture will show satellite images from earth\u2019s day or night view.It then connects to my home assistant instance, and pulls all the necessary values. A SVG template is then filled with these values, and they are merged with the background image. The service then uploads the image to the picture frame, and it will refresh the image after some minutes.The whole thing uses templates and config files, so it's easy to extend.Unfortunately, the picture frame broke down since, and I haven\u2019t had the chance to buy another one yet.",
        "summary": "I created a digital signage solution using an Android Picture Frame, a Docker service, and a home assistant instance to display the temperature of all rooms in my apartment, which was easy to extend but the picture frame broke down."
    },
    {
        "original": "Some 30 years ago, I reverse-engineered the format of Prince of Persia's save files and wrote a little C program that would create a save file for any place / level in the game. Just because I could...",
        "summary": "The author reverse-engineered the format of Prince of Persia's save files and wrote a program to create a save file for any place or level in the game out of curiosity."
    },
    {
        "original": "Nothing crazy but, an app that tracks products in grocery stores.Just open the app and scan a barcode and it'll give product info such as name, description, nutritional info, pricing across stores and price change past 30 days.Built with React Native, InfluxDB, and go for the backend and scraper, products get scraped from all the stores every day and gets stored in InfluxDB.-Also built a desktop app for toggling ANC on my bluetooth headphones, the only ways to toggle ANC were a mobile app (which requires pairing to phone, thereby dropping connection to PC), or holding a physical button (which was next to the button to enter pairing mode so I kept accidentally pressing it), so I learned how to snoop on bluetooth LE and reverse engineered it with Android and Wireshark, it was a fun project and incredibly useful to me.",
        "summary": "The comment discusses two projects: an app that tracks products in grocery stores and a desktop app for toggling ANC on bluetooth headphones."
    },
    {
        "original": "In the 2000s I was addicted to Elisp and contributed a ton of OSS code including JDE, EDEE, and tons of other tools.But... I had just a MASSIVE amount of code that was literally just for me.Emacs basically became my OS.Emacs allowed you to just eval code on the fly and the IDE would just adapt. No reload required.  So if you wanted to do stupid stuff like make control+enter open the current URL at the cursor, you just write a three line script.  Then you add it to your elisp on load.... but mine got WAY out of hand. It was just mountains of code.",
        "summary": "Emacs allowed the user to quickly and easily customise their environment with code, but the user's code became so extensive that it was like having their own operating system."
    },
    {
        "original": "My laptop picked up three extra cameras on folding sticks[1] for tracking? For MediaPipe hand pose. And chopstick wands (could be held while typing) with barber-pole marker for rotation, a small Xmas half-ornament to glide over keys for keyboard-as-graphics-tablet, and an unfinished arduino pressure sensor. Face pose, low-precision gaze and higher-precision head pointing with markers on glasses. Long-thin curved mirror bar at top of keyboard to get keyboard-as-touchpad touch events from the keyboard cam. Shallow-3D UI using eye-tracked perspective, anaglyph, or arduino LCD-shutters. I was interested in software dev inside aphysical XR, to extend rather than replace existing mature laptop dev tooling. Diverse input latencies interestingly required complex event processing and backtrackable ui state. Lenovo \"portable workstation\" fans would crank high just from the input handling, before 3D apps even started. Battery life under half-an-hour. But... it was oddly the flop-up cameras which most gave me joy.[1] https://pbs.twimg.com/media/ERqCfdkX0AEWTN_?format=jpg&name=...",
        "summary": "I was interested in software development inside a physical XR environment, using diverse input latencies to create complex event processing and backtrackable UI state."
    },
    {
        "original": "A website for playing sequenced music (video games, chiptunes, and MIDI files). macOS lost native MIDI playback a long time ago. And I like to listen \"interactively,\" adjusting tempo, soloing instruments, stuff like that.I have gone deep on a few problems, like converting Nintendo 64 to MIDI+soundfonts (there are tools for this, but nothing turn-key) or enabling support for Farbrausch V2 (a powerful but tiny synth engine). There's really no point other than to solve puzzles with a very salient musical reward at the end. https://github.com/mmontag/chip-player-js",
        "summary": "I enjoy solving puzzles to create music, such as converting Nintendo 64 to MIDI+soundfonts and enabling support for Farbrausch V2."
    },
    {
        "original": "Prior to the 2017 \"Great American Eclipse\", I made reservations at two hotels -- each within a day's drive of my location that were near the path of totality. I then built a screenscraper from one of the weather sites (WUnderground, IIRC) that took the cloud forecast for the eclipse and presented it as a time-series. (Yes, I knew there was significant uncertainty involved!)About 3 days before the eclipse, I decided which site to visit and ditched the other hotel reservation.It worked well. My wife and I each saw our first total solar eclipse!!!There's one coming up in 2024 too. Maybe some enterprising soul would like to expand on the idea and create cloud-coverage forecasts for the entire path of totality?",
        "summary": "The author successfully used a screenscraper to make a cloud forecast for the 2017 \"Great American Eclipse\" and saw their first total solar eclipse, suggesting that someone could expand on the idea and create cloud-coverage forecasts for the 2024 eclipse."
    },
    {
        "original": "I built a home security system using PoE CCTV cameras, a small linux box, and copious use of GStreamer. Yes I know there are hundreds of these on GitHub, but I looked at dozens that were awful (sorry, Motion).At first I tried all kinds of methods to turn it on only when there was something interesting to avoid drowning in terabytes of data, detecting things like: cars, people, animals. I tried classical image processing methods, and tools like Motion, then tried similar image compression algs to find significant macroblocks; then I tried all types of methods in OpenCV; next came several neural nets with off-the-shelf YOLO/SSD object detection (using Google TFUs, Nvidia Jetsons), I even tried retraining the networks with my own tiny dataset.In the end, everything sucked with too many false positives blowing up my cloud alert SMS traffic to myself. So now I just record 6 cameras nonstop to files. I don't get the benefit alerts, but nothing much happens, and if it does, I have history recorded.It was a fun project, I tried all kinds of codecs, cameras, languages, frameworks, hardware, etc. I even started out trying to do custom battery-powered wireless device using a raw Chinese MIPI CCDs and building my own WiFI station. I spent over 3 years on it, just to end up with your basic CCTV box. But it was fun!",
        "summary": "The author tried many methods to build a home security system, but eventually settled for a basic CCTV box, which took over 3 years to build."
    },
    {
        "original": "I've written a minimalist replacement for Ansible. It started as a weekend hack, and I'm still using it daily after 7 years. Perhaps it's not technically impressive, but so wasn't the original UNIX, which served as a direct inspiration: how much work can you do with the simplest design and the least amount of code?https://github.com/rollcat/judo",
        "summary": "This project is an example of how a simple design and minimal code can be used to create a powerful tool, inspired by UNIX."
    },
    {
        "original": "I haven't built it yet, but there's a homeless person that yells every night from 2am to 4am at the top of their lungs across the street. Profanities and everything.I've been looking into directional speakers so i can kindly ask the person to quiet down without waking the neighbors up. The person in question about 200ft away",
        "summary": "The speaker is looking into directional speakers to politely ask the homeless person to quiet down without disturbing the neighbours."
    },
    {
        "original": "I built a cross of React + Wiz (a fantastic frontend framework at Google): https://github.com/aschleck/trailcatalog/tree/main/js/corgi . Totally irresponsible and probably full of bugs, but I was so tired of writing business logic in the same place as my view logic with React and now I'm free of it!",
        "summary": "The author created a cross of React and Wiz to separate business logic from view logic, which allowed them to be more efficient."
    },
    {
        "original": "I'm building a MIDI controller that has knobs (rotary encoders) displayed on top of  a full hd display. I looked everywhere for something similar and I'm pretty sure that it does not exist. Did my first gig with the first prototype. It's basically a mix between the Electra One, the MP Midi Controller and the Stream Deck.I'm working on this for months now, and I had to learn how to use tools like Fusion 360 and Kicad for this, which is incredibly fun!I'm looking for a name for this product, current propositions are \"a screen with holes\" and \"\u00e9cran total\" but ideas are welcome :)",
        "summary": "The author has created a MIDI controller with knobs and a full HD display, and is looking for a name for the product."
    },
    {
        "original": "I built a Markdown like text format for writing technical reports. I was fed up with Word and I wanted a plain text language that supports tables, footnotes, auto validated references to any part of the document, syntax highlighting of code blocks, comments, math equations, table of contents, etc... Unfortunately, existing solutions are all slow or written with some bizarre toolchains that are a pain to set up.I wrote it from scratch in Go with very few dependencies, so I can compile it to a single binary that should work on all platforms. It outputs .html or .tex which is then compiled to a PDF via Xelatex. Since Latex is pain to deal with, I wanted to generate pdf directly, but life got in a way so... it's not exactly a finished project, but at least I enjoy using it.",
        "summary": "I created a Markdown-like text format for writing technical reports, written from scratch in Go with few dependencies, which outputs .html or .tex and is compiled to a PDF via Xelatex."
    },
    {
        "original": "A DNS server, many many years ago. Just to avoid using bind:https://github.com/antirez/yaku-ns",
        "summary": "Yaku-NS is an alternative to the traditional DNS server, Bind, which has been around for many years."
    },
    {
        "original": "I have been working on a note taking app with a fully open API since 2008 on and off. I intended to open it to the public around 2010 but SimpleNote popped up and drank my milkshake. I even switched over myself.Since then however they've closed their formerly open API. This inspired me to pick it back up.I've got a mobile friendly webapp, an official SDK, a basic cli for scripting. Basically everything I wanted.The UI of the webapp is pretty spartan as I prefer, so I'm scared it doesn't have mass appeal. It's super fast however.I have hundreds of notes in it, use it for all my note keeping. I am it's only user. My friends have access, but they don't use regularly.I want to open up to the public eventually, but these days I'd really want to get e2e encryption working before doing so and just have not found the time.",
        "summary": "The comment discusses the development of a note taking app with an open API, which was inspired by the closure of another app's API, and the speaker's desire to eventually open it to the public, but with the addition of end-to-end encryption."
    },
    {
        "original": "When Teslas were hot, it was really hard to buy one in my area, it involved using the search function on the Tesla website, inputting my zipcode and waiting every few hours until new cars are out. I basically made a script that texts me if there\u2019s new car with the configuration I want with a link to the buy page so I can buy it immediately.",
        "summary": "A script was created to alert the user when a Tesla with the desired configuration became available in their area, allowing them to purchase it quickly."
    },
    {
        "original": "I was annoyed by having to reach for a remote or my phone when watching stuff on my Apple TV, so I made a MacOS Apple TV remote[0] that lives in the menu bar. Saves me literally seconds every day.[0]: https://github.com/dickfickling/honeycrisp",
        "summary": "A MacOS Apple TV remote was created to save time by eliminating the need to reach for a remote or phone when watching content on Apple TV."
    },
    {
        "original": "Chrome extension that solved a couple of everyday problems from a single view:a. Controlling YouTube. I used to have a hard time finding the YouTube tab midst a bunch of open tabs, and if someone would approach me at my desk (good old days when we had offices with people) I didn't want to open the tab to pause the song (or to play it again, or to go next/previous) so this extension would find the tab and show me a simple UI to control it. I later on extended it to be controllable via a hosted URL which I could put in an Android app. This was helpful because if I had to ever leave the desk and song accidentally played out loud, I can pause it from the phone.\nb. Controlling Jenkins. I had a bunch of builds running and it was painful to visit and see the status, again, amidst all the tabs.",
        "summary": "This Chrome extension provided a single view to control YouTube and Jenkins, making it easier to find and manage them."
    },
    {
        "original": "In a long distance relationship for almost 4 years now. We started dating just few months before COVID hit and lockdowns announced. That's when we discovered Zoom. We used Zoom as a way to keep connected. Initially it was great. We could keep the connection up for hours on end. However, Zoom started restricting time limits on free accounts (which meant we had to reconnect every 40 minutes or so). We tried different apps to see which works best but there were none that matched Zoom's quality or features (I specifically wanted PiP mode as I could keep working while being connected). So decided to code up my own barebones WebRTC app, hosted on Codesandbox, which uses Peerjs to establish connections. Video/audio streamed to HTML Canvas. With Pip mode. Extremely simple and barebones app. Been going good for almost a year now.",
        "summary": "A couple in a long distance relationship used Zoom to stay connected, but when it started restricting time limits, they created their own WebRTC app to maintain the connection."
    },
    {
        "original": "Maybe lame by HN standards but I wrote a Chrome extension to tell me if Redfin, Zillow, and Loopnet listings are in a designated HUBZone.",
        "summary": "This Chrome extension informs users if listings from Redfin, Zillow, and Loopnet are located in a HUBZone."
    },
    {
        "original": "I make a lot of tech for myself for learning, none of which being novel, so maybe this doesn\u2019t exactly fit.I made a raycasting engine to learn more about it and I\u2019m in love. It\u2019s the most clever thing ever. I can\u2019t believe I have a 3D effect without using a single trig function.  The math is so simple you could run it on a 286. Raycasting feels like a magical hack. It has no business being so ridiculously simple for what you get!I\u2019m taking it a step further and integrating a real-time map editor so you can modify a map as you play.I\u2019m not sure where to go beyond that, but I\u2019m having a ton of fun.",
        "summary": "I have created a raycasting engine which is surprisingly simple and effective, and I am now taking it a step further by integrating a real-time map editor."
    },
    {
        "original": "A few years ago I traded cryptocurrency extensively. I eventually ended up with a tax nightmare, needing to account for thousands of trades across several exchanges. After months of talking with my accountant and tax office, I eventually built https://github.com/dleber/capitalgIt was still a lot of work aggregating trade histories from various exchanges into a standardized schema, but I took some comfort in understanding the process. I also avoided the need to share exchange API keys and trading data with 3rd party accounting tools.If you discover any bugs, please don't tell the tax authorities.",
        "summary": "Trading cryptocurrency can be a complicated process, but using a tool like CapitalG can help simplify the process and avoid the need to share sensitive data with third-party accounting tools."
    },
    {
        "original": "An automatic fish feeder. I was going on a long trip with my family and needed to feed my fish while we were gone. I remembered I had a servo from an old project. I drilled some holes in a round plastic container, glued it to the servo shaft, hung it off the tank with some wire, and wrote a small Arduino sketch to jiggle the container every 24 hours. It worked better than I thought it would; the fish survived, and in fact seemed so happy that I don't feed them by hand anymore.I've since built a couple more for my other tanks, and I rewrote the firmware for ESP8266/ESPHome. Now my family can ask Alexa to feed the fish, because of course the world needs that.",
        "summary": "An Arduino sketch and ESPHome firmware were used to create an automatic fish feeder that works better than expected and can be controlled by Alexa."
    },
    {
        "original": "Automatic warning system if I sit too longI added a pressure sensor to my desk chair (just like the ones built into car seats) and soldered that to a Zigbee door sensor. I now know sitting/not sitting. I then set up push notifications to my watch and desktop if I sit more than one hour to get up and take a walk.\nFurthermore I connected it to my hight adjustable desk that if it is in up-position and I sit down, it automatically lowers itself to the perfect sitting position. I had to disable the \u201eif I get up, move the desk up\u201c function because it was just too much movement on the desk end.I don\u2019t wanna miss the too-long-sitting warning anymore and it is really useful.",
        "summary": "This comment describes how the author set up an automatic warning system to remind them to get up and take a walk if they sit for more than an hour."
    },
    {
        "original": "Built a live coding library for python that allows me to reload code I edited while it was executing. It has repl and debugger support and it can be run even for embedded python. It's pretty granular so it can reload modules or even individual objects. Unlike the existing module reload python function it can change object references to the updated code and delete old objects and their references from memory. This way in the next call only the latest code is executed. I built something similar for C code too.",
        "summary": "The comment describes a live coding library for Python and C that can reload code while it is executing, and can also delete old objects and their references from memory."
    },
    {
        "original": "I created a text editor that was meant to be programmable like a spreadsheet but interactive like a IPython notebook.There's screenshots here:https://github.com/samsquire/liveinterfaceThe code is Angular 1 legacy codebase.https://github.com/samsquire/live-interfaceThere's a screencast here https://github.com/samsquire/live-interface/blob/master/scre...It's not buildable at this time due to dependencies...",
        "summary": "The author created a text editor that is programmable like a spreadsheet and interactive like an IPython notebook."
    },
    {
        "original": "Was a long time ago, but I used to play this game called DayZ, which back then was just a mod for ArmA2. I played on a private server hosted by a friend.Back then the game was very easy to cheat in because even though the map was huge, the client kept all of the objects in memory along with their positions all the time - and it was very important in the game to stay hidden from other players and to hide your stashes of objects for later use. All of these was available in memory for grabs and there was no anticheat.So there were people who wrote cheats that just grabbed the positions of those hidden stashes and bee-lined through all of them, robbing them.The server logged the position of static objects (like stashes) on startup and logged the position of every player every few minutes. So I wrote a very simple application that parses that log and puts all of that information (position of stashes and players) on a human-readable map. The admin could then select a player and track his journey. It was very easy to spot people running in straight lines from stash to stash, it was obvious they were cheating and should be banned.After that I added some heuristics that detected these behaviours automatically and gave hints to admin on who to check. There were more abuses possible in the game later on that I also detected.For example, there was a \"dupe bug\" which allowed a player to duplicate a backpack full of useful items and give it to their friend. It involved two players staying in the same spot, dropping the backpack on the ground, trying to open it up by two people at the same time, one of them disconnecting, etc. The backpack was duped due to lag on the database on server side.I modded the server files to log the information that a backpack was dropped or picked up (along with a list of items inside it in order they were arranged). Then I modified my log parser to look for two players being near each other, dropping and picking up the backpack, disconnecting and reconnecting constantly and detecting two backpacks with exactly the same list of items in the same order they were arranged it (which was very unprobable to happen out of itself) - detecting this gave a hint to the admin to check these people out as possible dupers.",
        "summary": "A friend hosted a private server for the game DayZ, which was easy to cheat in, so a log parser was created to detect cheaters and heuristics were added to detect further abuses."
    },
    {
        "original": "Built one of the first 3d ultrasonic scanner that works in the air to make an autonomous drone [1] [2][1]: https://www.alextoussaint.com/2021-04-28_How-I-built-an-ultr...[2]: https://hackaday.com/2021/05/15/a-phased-array-ultrasonic-3d...",
        "summary": "Alex Toussaint built an ultrasonic 3D scanner that can be used to make an autonomous drone."
    },
    {
        "original": "I wrote a silly Telegram bot for my group chats: https://github.com/database64128/CubicBotIt's mostly just some useless commands that say stupid things, and stats collection for earning \"achievements\" and displaying leaderboards.The bot was written in C# and seriously over-engineered to be completely modular. Every command and stats collector can be turned on or off in config. A running instance with all features turned on is available as https://t.me/Cubic0Bot.",
        "summary": "A Telegram bot was written in C# which is modular and can be configured to have different features, and a running instance is available."
    },
    {
        "original": "I built a \u2018prezi file fixer\u2019.\nIn the old days, prezi used pez files which could get \u2018corrupted\u2019. Not really corrupted, but when someone scaled some objects too much down, the prezi editor could no longer solve the issue, and the prezi file (really: a presentation) could be considered lost.Solved it locally at first: unzipped the pez file, searched for the smallest objects, and scaled them up. It might look a bit funny (that ball which had been made much smaller would have been scaled up), but people could again fix it using the prezi editor.Used this manually to \u2018fix\u2019 other peoples presentations, in which they send me their pez file, I would \u2018solve\u2019 it and send it back (usually: they would invite me to be a co-author, I would make a copy, fix that and make them editor to that copy). Used to do this quite a lot on the prezi forum.In the end automated it completely: made a service in which one could upload a pez file, my NAS would decompress it, fix is, compress it again, and mail a link to the corrected pez file.Software is defunct as problems have disappeared (and changes to prezi way made it no longer work).Incidentally not my first prezi product: I guess that was the Android app that made it possible to view a prezi on an Android phone or tablet, ways before Prezi themselves made the Android app (I think they already had the iOs app, not sure).\n[That app ran in more then 50 countries, but that is another tale;-0]",
        "summary": "The author built a 'prezi file fixer' to help people fix corrupted prezi files, and later automated the process to create a service for it."
    },
    {
        "original": "Mine is Scheme for Max, now on it's fourth open source release, but really written so I could make computer music how I want to. It's an extension to the popular Max/MSP visual music programming environment that embeds an s7 Scheme interpreter and provides a substantial API/FFI to Max. It allows you to script Max (and thus also Ableton Live) with Scheme, enabling interactive coding, algorithmic music, live coding, macros, and just much more pleasant scripting than in JavaScript. It locks in with the scheduler so you can even use Scheme powered sequencers within Ableton Live alongside regular Live tracks, and you can build sophisticated Live control surfaces using the Live API.Github page here: https://github.com/iainctduncan/scheme-for-maxYouTube demos here: https://www.youtube.com/c/musicwithlispA recent demo of it in the context of Live is this one.\nhttps://www.youtube.com/watch?v=j0sKBA-Pv2c&t=1s&ab_channel=...",
        "summary": "Scheme for Max is an extension to the Max/MSP visual music programming environment that allows users to script Max and Ableton Live with Scheme, enabling interactive coding, algorithmic music, live coding, macros, and more."
    },
    {
        "original": "I've made a tool to create 3D tours based on Threejs Editor and it has been really useful to make presentations more compelling.To create the presentation, you have to import 3D models (preferably fbx or glb) and place them in the 3D environment as desired. To create a \"slide\" you just have to click on the \"new\" button under the \"slide\" tab and it will capture the camera pose.After creating some slides you can press the \"start\" on the menu to preview the presentation. Once everything is loaded, you can scroll through the preview page, and the camera will be animated sequentially between the captured poses.That's the basic usage, but there are also other features available.The editor page:\nhttps://arthurmiy.gitlab.io/editor_slide_3d/editor/index.htm...Presentation made using the tool:\nhttps://arthurmiy.gitlab.io/se-webview/jaguariuna.html",
        "summary": "This tool allows users to create 3D tours with 3D models and capture camera poses to create slides for presentations."
    },
    {
        "original": "I made a safe-to-wake light for my son out of a Raspberry Pi. It serves up a responsive website on the local network so you can manually change the lights or update the schedule.Been running like a champ for over 3 years now, which has been the most pleasant surprise. I'm used to ecosystem entropy causing things to break.I documented my adventures in a 6-part series: https://ajpierce.com/2020-01-04_safe-to-wake-pt1/",
        "summary": "I successfully created a safe-to-wake light for my son using a Raspberry Pi that has been running for over 3 years, which was a pleasant surprise."
    },
    {
        "original": "Built a service and web app that listens to Frigate car events via MQTT. It analyzes the video and image to determine the make and model, as well as OCR the plate.Uses some fuzzy matching logic in an attempt to match it to a historical vehicle. Also attempts to look up Make, Model, Year and VIN based on the state and plate.Been running pretty well for a few months. Can easily see history of a vehicle or search vehicles by make or model. Has come in handy once when someone in the neighborhood experienced a road rage incident and I was able to provide info on the car to the police.Next step is to build \u201cdetections\u201d for anomalous vehicles. Or weird behavior like a vehicle passing by multiple times in a given window.Built with Python and HTMX cause why not.",
        "summary": "A service and web app has been built to listen to Frigate car events via MQTT, analyse video and image to determine the make and model, OCR the plate, and use fuzzy matching logic to match it to a historical vehicle, which has been running successfully for a few months and can be used to search vehicles by make or model."
    },
    {
        "original": "My wife has a goal to run 1000km this year, and uses an Apple Watch to track them. But getting to the YTD total is a pain in the fitness app.So I made the worlds most basic iPhone app with React Native, that grabs the data from HealthKit and shows it across a percentage of the year.Simple but effective.",
        "summary": "A simple iPhone app was created with React Native to make tracking progress towards a goal of running 1000km this year easier."
    },
    {
        "original": "About 10 years ago when Droplr deprecated their free packages (and went to paid only) I've made my own free alternative - https://pics.rs followed with its own screenshot app for Windows (C#) and later Mac (Electron) and still use it daily... I needed a screenshot tool which allows me to select a part of the screen, uploads it and immediately copies URL to clipboard. Now I'm finding myself using it without app by doing CMD + CTRL + SHIFT + 4 which copies image directly in clipboard and then opening pics.rs and pressing CMD + V (paste event triggers upload if it contains image in clipboard)I haven't touched the UI since then, its ugly but it works, I've tried allocating time to make more modern version and even started refactoring it a few times with a few friends in our spare time, but unfortunately finding time next to full-time jobs and family is much harder than it was 10+ years ago :)I've never advertised it anywhere except shared with friends and used it on some forums in the past, but it slowly grew to 10k registered members and almost 200k uploaded pictures. At this scale (~100GB of data) its very cheap to keep it online since its using very small amount of resources on dedicated servers where I host some other important apps with regular off-site backups, but if it ever spikes and becomes problematic financially it will at least give me more motivation to make something more serious out of it or just slam ads onto it and call it a day (worst case scenario, not a fan of it).",
        "summary": "The author created a free alternative to Droplr and it has grown to 10,000 registered members and almost 200,000 uploaded pictures, but finding time to make a more modern version is difficult."
    },
    {
        "original": "When I started learning code and to build websites, I felt it very cumbersome to login into cpanel and upload PHP files. Hence I built my own file manager called HostBrowser[1]. It was a single PHP script. It had a lot of functionality that a lot of advanced file mangers have, like copy paste, compress files to Zip, extract Zip, copy-paste, directly download file from remote server, a code editor. The UI was inspired by that of phpLiteAdmin[2].[1] https://github.com/anupamsaikia/HostBrowser[2] https://en.wikipedia.org/wiki/File:PhpLiteAdmin_Main_Screen....",
        "summary": "I built my own file manager called HostBrowser which had a lot of functionality and a UI inspired by phpLiteAdmin."
    },
    {
        "original": "https://hyperscript.orgI wanted to have a scripting language that was inspired by xTalk for some light front end work alongside htmx.  Didn't expect it to go anywhere.",
        "summary": "Hyperscript was created as a scripting language inspired by xTalk, but it did not gain much traction."
    },
    {
        "original": "Building a small quadcopter back in 2012 or so (before cheap toy/consumer drones were everywhere) was a fun project.Back then, it involved an Arduino, the internals of a Wii MotionPlus (cost effective way to get the gyro sensors), a plywood frame, and the open-source 'MultiWii' code.That first build never flew well, but soon afterwards it started to become much easier to build a very stable quadcopter, as all-in-one flight controller boards started to appear, along with more knowledge of which brushless motors, props, and ESCs worked well together.",
        "summary": "Building a quadcopter in 2012 was a challenging project, but it has since become much easier due to the availability of all-in-one flight controller boards and more knowledge of compatible components."
    },
    {
        "original": "https://umbrellatoday.appThe idea has emerged from a personal frustration with umbrellas\nIf you buy a too big and expensive umbrella (take for example a gulfbrella), you might recall that it's such a hassle to drag along - just by its weight and size. Also, its something that you will most likely lose during a company event, after one or two drinks.If you buy a small and cheap version instead, you won\u2019t get sufficient protection due to the small surface. In addition, such smaller variants tend to break quickly, and when this happens, you might as well not have dragged one with you in the first place.",
        "summary": "Umbrellas are difficult to carry and can be easily lost or broken, making it difficult to find the right balance between size, cost, and protection."
    },
    {
        "original": "I built a todo list extension that blocks addictive websites until you finish your tasks. Importantly it redirects you back to your todo list and shows you a pair of disappointed eyes.I believe it really helped me deal with procrastination, but of course the whole project was just a way to procrastinate.I planned to make it a business, but many of its features are now built into OS. And Google doesn\u2019t like it.You can still get it for brave and Google chrome, but I\u2019m no longer working on it. In case it you need it. The Firefox version is not good.prodtodolist.com",
        "summary": "I created a todo list extension to help with procrastination, but it is no longer being developed due to features being built into OS and Google not liking it."
    },
    {
        "original": "I, like probably most other people, tend to start a habit and then it quickly fades away, not necessarily due to lack of wanting. I find that I might want to start, for example, strecthing my hamstrings regularly, I do them for some days/weeks and then I forget some days, then forget some more, and then after a while I realise I haven't done any for months.So I wrote a webapp that I usually myself constantly now, it's very basic. I enter a habit I want to keep up and then visit the site everyday and click the \"done\" button when its done. It also has a calendar so I can see how often I've been doing it because not every habit is to be done every day.I started this for exercising but i'm not using it for very basic/stupid things. One example is cleaning my glasses. I would never remember to clean them and I'd occasionally realise I'm viewing the world through a layer of grime. I now click \"done\" every day and the world looks crystal clear.I guess it's just gamified habits a little bit and its working really well for me. There's a ton of habit trackers out that but I never found anything simple and quick to use.",
        "summary": "Creating a webapp to track habits can help to keep them consistent and make them easier to remember."
    },
    {
        "original": "A Random Movie Maker that looks at my 4 TB collection of personal history... digitized journals, email, photos, digitized cassettes, phone messages, and home videos, and creates a random 15 minute movie. Each video will include about 50 clip sources. It's a crazy trip down memory lane.",
        "summary": "This comment suggests that a Random Movie Maker could be used to create a 15 minute movie from a large collection of personal memories, providing a unique and nostalgic experience."
    },
    {
        "original": "It's probably not as cool as some of the other projects in here, but I've been working on a sound change applier, which is a hobbyist tool for applying sound change rules to a lexicon. You could use this to generate pronunciations for a language with particularly regular spelling, but these tools are mainly used for evolving constructed languages.The way it works is it generates an NFA for a rule. You can define sets of sounds, some of which can be multiple characters long, and also define distinctive features, which allows you to define how sounds change by adding or removing them, but also allows you to match groups of sounds based on combinations of distinctive features. It builds up these ad-hoc sets of sounds and produces a prefix tree, which it uses as a template to build the NFA. Finally, the NFA is converted to a DFA for performance. It takes a while (the console app is much faster than the browser demo), but the rules run many, many times, so they need to be fast. It's essentially a special purpose regex engine. I'm working on bug fixes and some enhancements for now, but it basically works.Demo: https://marriola.github.io/transmute-demo",
        "summary": "A sound change applier is a hobbyist tool which can be used to generate pronunciations for a language with regular spelling, and is essentially a special purpose regex engine."
    },
    {
        "original": "Years back I was living in the foothills just outside of the Yosemite NP gates and fell in love with the trails through the Sierra Nevada. It wasn't long before I realized that how much weight I carried dramatically affected _everything_ about my trips - so I got serious about finding a good compromise between \"ultralight\" and \"comfortable but still light\".The gear and testing it was very expensive, I wanted to make my own but didn't know how to sew - but quickly found the \"cottage\" industry of lightweight and ultralight backpacking gear and fell in love again. Now I loved the trail and the gear, but I was also broke.One of my first non-visual basic programming projects was building a scraper for a handful of backpacking forums' used gear sections - I found that I was able to acquire and test the gear I wanted at a fraction of the cost this way, as well as find buyers for the gear I was ready to cycle out.While I did build this for myself I eventually realized that there were so many good deals and people with good gear looking to offload it - but the forums and the communities were so fractured it made it hard for others (just like it did for me). I ended up building the whole thing (again) as my first foray into playing with Laravel.It's still up and working - thousands of people still using it, maybe some of you would also enjoy it... [0] (no ads, no affiliate offers, ever)0: https://lwhiker.com* Note, I'm aware some of the \"source\" forums are broken/no longer scraping properly, will be updating it soon.",
        "summary": "The author built a scraper to acquire and test lightweight and ultralight backpacking gear at a fraction of the cost, and created a platform to make it easier for others to find good deals and offload their gear."
    },
    {
        "original": "I wrote a program in C++ to download massive amounts of stock data from a data provider. The binary itself is 2 MB, memory use rises to over 16 GB and it frees everything at the end, so there are no memory leaks (I'm particularly proud of that). Over the years I've found better and better ways of making it run faster because a daily run will take over 6 hours of downloading and writing to my database.I also wrote a multi-threaded backtester in C++ because the program I was using was only single-threaded. I stopped using that several years ago but the act of writing it was a lot of fun.",
        "summary": "The author wrote a program in C++ to download stock data and a multi-threaded backtester, and has improved the program over the years to make it run faster."
    },
    {
        "original": "I hobbled together a software implementation of a half-QWERTY keyboard after a serious bike accident which left me unable to type with my left hand for over a month. The hardware solutions were (probably still are?) patented and we\u2019re expensive to my then-very-broke self, so I learned enough ObjC and enough about the underlying keyboard mapping design to ~replicate the functionality in software on my Mac (right hand only until I could start actually using it), and then enough more ObjC to relaunch the thing whenever it crashed (fairly frequently, presumably from memory management issues I wasn\u2019t trying to to deep dive at the time). I really wanted to open source it but it was just a life hack to keep working and I definitely didn\u2019t want to also do a deep dive into the patent litigation risks.",
        "summary": "After a bike accident, the speaker created a software implementation of a half-QWERTY keyboard as a life hack to keep working."
    },
    {
        "original": "I live in Paris, the city with the most art house cinemas in the world. There are so much of them I have a hard time following what is showed every week. I made a simple crawler that looks at these cinemas and sends a digest of the week schedule by email, listing only the movies that went out one more than year ago (because these theaters also show recent films). Nothing fancy here but I use it every week.",
        "summary": "This person created a crawler to send a weekly digest of movies that have been out for more than a year at art house cinemas in Paris."
    },
    {
        "original": "I have a custom automated DVCAM riprig, I just read the label, type it from memory into the prompt, and the deck rewinds, plays back over DV, then is split, sent over the wire to an encoder box via ethernet, deinterlaced, normalized and encoded to x265, logged and sent via syncthing to an editor friend across the state. If you can imagine, before this I manually did all those steps but with an old tv camera rather than an auto-rewinding/splitting pc",
        "summary": "This automated DVCAM riprig simplifies the process of manually encoding, deinterlacing, normalizing and encoding to x265, logging and sending to an editor friend."
    },
    {
        "original": "I'm writing my own app for practicing the piano.\nThe goal is to make practicing fun, while also making steady progress.I'm not a good player at all, and I've struggled with practice for years. But I have no problems playing (practicing) difficult video games, that require a lot of repetition (think Celeste).I think I've identified two major reasons why I never enjoyed it:1. Classical music notation (sheet music) is just awful. It goes against most modern principles of easy-to-grasp information design. So I've come up with my own notation that is much easier to read and can be generated from musicxml files.2. Practicing takes too much decision making and discipline. If you want to make progress, you have to constantly remind yourself to practice the parts that you're not good at yet - this is a surprising amount of mental overhead and requires lots of discipline. So the app I wrote listens to you play via MIDI and keeps track of which segments of a piece you're already good at, and automatically gives you those you still need to practice more - zero decision making required. You just play whatever the app gives you and after a few weeks/months you're suddenly able to play the whole piece.The app is no where near ready to be shown, but I'm confident at this point that the concept will work.I've been planning a longer write up on this for a while, if you're interested in reading more about it, please let me know, that would be very motivating :)",
        "summary": "The app uses a custom notation system and automated practice suggestions to make practicing the piano easier and more enjoyable."
    },
    {
        "original": "A \u201cnote taking\u201d app after spending years looking for \u201cthe right one\u201d. Nothing ground breaking, similar to most other \u201cconnected notes\u201d apps but with one small difference: everything is built for my brain workflow rather than the other way around.https://nvartolomei.com/omniverse/Maybe, one day, after I\u2019m satisfied with its functionality I\u2019ll make it open(-source). For now, in the interest of keeping friction low, moving fast and breaking things, it\u2019s pretty private.",
        "summary": "The author has created a \"note taking\" app tailored to their own brain workflow, and is keeping it private for now."
    },
    {
        "original": "Not as exciting as some here, but helped me at times where i couldn't be at my desk however still be 'available'.I developed a 'transport' for Mulesoft, that would allow XMPP based communication, and relay that to my phone either by sms or email, and vice versa.  At the time the communication were Jabber based and almost everything was through that, so this worked out quite nicely.",
        "summary": "This transport allowed for XMPP-based communication to be relayed to a phone via SMS or email, allowing for remote availability."
    },
    {
        "original": "80% of a basketball simulation engine80% of a Teamfight Tactics simulation engine80% of a data analytics platform for sports data40% of a PaaS to manage common open source software deployments to the cloudI don't finish much. It's my absolute greatest flaw.",
        "summary": "I have difficulty completing tasks."
    },
    {
        "original": "Probably boring to most people but I created a tool to nail exactly 40 hours a week contracting using the laziest possible inputs getting me out as early as possible on Friday:https://github.com/cynoclast/timeUsage example:tm 8.5 9.27 8.83 8.87 9:45-1:23 1:33-14:1154 minutesNotice you don't have to give it AM/PM? Also don't have to give it any flags. It figures out what to calculate based on number of arguments alone. And it knows 9:45 to 1:23 is around 4 hours, not -8.And during the week, decimal hours for timesheets:tm 8:30-12:30 12:40-6:4010.0I used it 5x a week during my contracting days.",
        "summary": "This tool allows users to easily calculate their hours worked with minimal input, taking into account AM/PM and decimal hours."
    },
    {
        "original": "I made a \"bot\" server for myself, which is really just a server and app framework to host a bunch of scripts. The framework handles:- Running bots periodically\n- Receives webhooks\n- Handles OAuth\n- Provides a shared DB\n- Posts updates to and receives commands from SlackIt's not very innovative, but super helpful. I love that I can deploy a new script so easily and already have all the tools I need so I can just focus in the logic. A few bots I have running:- I run a site with thousands of articles, so one bot checks 10-15 articles per day for spelling mistakes, broken links, broken images, poor formatting, etc. Tasks to fix these are then posted to Notion.\n- Monitor Hacker News and Reddit for mentions of the sites/apps that I run so I can respond.\n- Sync calendars between apps without having to make them public\n- Gather financials and reports from various sources for bookkeeping\n- Monitor all of the servers we run and sync their status to NotionProbably at least half of the automations could work on something like Zapier, but this is more fun and I get a lot more control over them.",
        "summary": "This comment describes a server and app framework that can be used to host scripts to automate various tasks, such as checking for spelling mistakes, monitoring Hacker News and Reddit, syncing calendars, gathering financials and reports, and monitoring servers."
    },
    {
        "original": "Built my own music player for mac which I use every day. I have a large collection of ripped mp3s and I wanted to control exactly where they are stored, order in which they are played (album order) etc.\nIt just snowballed from there with other features.https://snowlinesoftware.com/apps/mac/mamusique/index.php",
        "summary": "The user wanted to have control over their music collection, which led to the development of their own music player for Mac."
    },
    {
        "original": "I built an EAP proxy that runs on my EdgeRouter 4 so that I don't have to use the router that AT&T would otherwise require me to:https://github.com/jaysoffian/eap_proxyIt's been running for years now out-of-sight and out-of-mind.Which reminds me... I should probably take a look at those pull requests.",
        "summary": "I built an EAP proxy to bypass AT&T's router requirements, which has been running successfully for years."
    },
    {
        "original": "As a developer I hoard many links and also would like to get notifications on different tasks being finished (script/RSS/IoT) so I've built a chat web app for myself where you can create a channel for each specific notification or links to read later.The web app is a PWA so I can install it on my Android Mac and PC via Chrome browser without app/play store and access from anywhere.I took it further by adding Webhoom API for the notification and a Chrome extension to share links from my browser to the channels.People liked it (didn't try to market so much) but they wanted encryption so I have added end to end encryption as well.I'm currently working on (on my spare time) big files support up to 4GB from any browser including live preview and video streaming for well known file types.You can check it out here https://www.pushstaq.comCan read some of the blog posts for more info.",
        "summary": "A developer has created a chat web app with features such as notifications, link sharing, end-to-end encryption, and support for large files, which can be accessed from any device."
    },
    {
        "original": "Type Draw TypeA fun little drawing and writing game, I loved playing with friends and kids with pen and paper.\nDuring the pandemic I implemented a web version for us to play remotely.\nBy now, thousands of games have been played (not only by me and my friends of course).\nYou need at least 4 players (better 5 or more) to join one game for it to be fun.https://draw.gerty.roga.czedik.at(oh, and it is free and open source, of course)",
        "summary": "Draw Type is a free and open source game that can be played remotely with at least 4 players for an enjoyable experience."
    },
    {
        "original": "Simplest File Renamer - https://www.yboris.dev/renamer & https://github.com/whyboris/Simplest-File-RenamerI wanted to be able to quickly rename files with my text editor (using keyboard commands), so this lets me do it. Plus I share the app online for free.Video Hub App - https://videohubapp.com/ & https://github.com/whyboris/Video-Hub-AppI started it just for myself, but it ended up so good I spent several more years improving it as people kept buying it (up to almost 5,000 purchases since I started).Also wrote a couple of dev tools for myself (sharing via NPM too) - https://www.yboris.dev/",
        "summary": "Simplest File Renamer and Video Hub App are two apps created by the author for personal use, but were later shared online for free and Video Hub App was purchased by almost 5,000 people."
    },
    {
        "original": "I attempted to build flight control software for a quadcopter[1]. I had a few major life changes around this time and it got packed up and I stopped working on it before I got the PID controllers worked out. But I essentially wrote a small game engine and had to learn a little calculus along the way.[1] https://github.com/castis/currant",
        "summary": "I attempted to build flight control software for a quadcopter, but had to stop due to life changes and had not finished the PID controllers, but I learnt some calculus in the process."
    },
    {
        "original": "I built an ice cream pail drum machine interface as a kid using cheap piezoelectric speakers (in reverse to generate a signal). This was amplified and brought into a micro-controller to generate a MIDI signal for the drum machine. It actually worked pretty well.",
        "summary": "A kid built a drum machine interface using piezoelectric speakers, which was amplified and converted into a MIDI signal, and it worked well."
    },
    {
        "original": "* A script that periodically screenscraped booked-up campsite reservation sites for cancellations during dates I wanted and sent me text messages (thanks, Twilio!). We got to stay at a bunch of amazing places at the last minute this way. We\u2019re currently grounded, but I recently ran it again for my parents and was shocked to find it still worked!* An Alexa app that provides a search interface to Old Time Radio shows on archive.org and saves your place (this was technically for my mother-in-law, the proof-of-concept with arcade sounds for my spouse). We all ended up using it a ton, though, it was kind of magical (the random function was really fun). I also set up an Alexa app to read me recent CVEs, but it\u2019s more of a goofy parlor trick than useful. ;)* A Rube Goldbergian bunch of terrible scripts that I can feed PDFs to, OCR, poorly-translate (using the expected engines or my own diymodel) and generate epubs from. And a bunch of scripts that convert Markdown to LaTeX and epub for personal book publishing projects.Thanks for asking this question, it\u2019s so neat to see everyone\u2019s responses! I might ping my spouse on this post, too, who\u2019s developed a crazy amount of personal projects that combine software and hardware to fixup our/our families\u2019 lives.",
        "summary": "I have developed a range of scripts and apps to improve my and my family's lives, such as a script to screen scrape campsite reservation sites for cancellations, an Alexa app to search for Old Time Radio shows and an app to read recent CVEs."
    },
    {
        "original": "This hearkens back to the analog days, but I can't drive without music. My last car had a crappy stereo. I happened to have a project box lying around so I built a 12-watt, 4-channel amplifier. The best part is that I also had these beautiful old backlit analog VU meters lying around. I only had two, but it made the thing look totally awesome.",
        "summary": "The speaker system was improved by building a 12-watt, 4-channel amplifier and adding two backlit analog VU meters for a more aesthetically pleasing look."
    },
    {
        "original": "a soil moisture sensor using capacitors as the sensor. it's how i learned to code. i found a few different versions of the project online. couldn't get them to work very well but i was able to piece together enough knowledge of basic circuits to get the sensor to work well with my own circuit design.once i got it to work, i left it on my desk for a few months and then cleaned it up/removed the circuit. only documented the circuit by a couple of bad photographs, so i'm not sure how to recreate it. i might could figure it out again if i spent the time, but i've been focused on other projects.https://github.com/smcalilly/sensor",
        "summary": "The author was able to design a successful soil moisture sensor using capacitors, but has since lost the documentation of the circuit."
    },
    {
        "original": "I've built two projects that I'm very happy with.I'm still using livejournal.com social network nobody cares about today and when I was really into common lisp I decided to build a cli client to it. What makes it cool is that it's just markdown files locally and the client works almost like git, you can even pull and push posts. After I wrote it I was able to pull all my posts since 2007 or so from the service and have them locally as markdown files, any updates would be synced.The other thing I've built mostly for my self is a notes taking service https://dabdab.org which allows to take notes the way I want it. What was cool about it was that I was able to almost reinvent django or rails but in go, so everything is fast, but still compile checks. From the product side I've managed to get to the same level of comfort one would get with github issues (markdown, image upload etc).Both things have 1 user at the moment (me) do I think that counts :D",
        "summary": "The author has built two projects that demonstrate their technical skills and provide them with a useful service."
    },
    {
        "original": "I made a chrome extension[0] to search MDN from address bar more than a decade back. It served me well and has since picked up a loyal set of users. I'm glad it is helping new developers as they venture onto the journey I really enjoyed my time with.[0]: https://chrome.google.com/webstore/detail/ffpifaemeofjmncjdb...",
        "summary": "The chrome extension I created has been helping new developers on their journey, which I am glad for as I enjoyed my time with it."
    },
    {
        "original": "It's sad to have to look so far back but:I installed linux for the first time in 1992 on my parents DOS machine.  I had another partition for it. It was Slackware with kernel 1.2.13  I think. All off 5.25 inch floppy disks.Setup wasn't so simple then and I was a UNIX Noob so I managed to set the swap partition to the DOS hard drive and overwrote the first 4MB or so.The FAT filesystem's root directory and many others were blanked but not all files were lost.   Norton tools and CHKDSK managed to get a lot of files back but many of the wordperfect documents were in the form \"FILE0001.CHK\" and no way to know what was in each one other than very laboriously opening all of them and trying to work it out from the contents.Very fortunately I had an old backup but the problem was to know, out of all the recovered files, which were covered by the backup and which were new since the backup.  If I could ignore the files that I could restore from the backup then I only had to load and rename the ones that were new.CHKDSK couldn't recover the file size since that was in the destroyed directories. So you couldn't guess if some backed up file matched a restored one just by looking at size.In the end I wrote some perl+shell to get the md5 of the first kilobyte or two of all the backup files and all the recovered files.  I used this to match files and get a list of all the recovered files with no corresponding match in the backup.  These had to be new files and since there were far less of these I could manually load up each one into Wordperfect, see what it was and give it a sensible name.This program (don't have it anymore) saved my bacon and served no-one else but me.  It took me from despair to triumph and that's why I like it so much.",
        "summary": "This comment describes a difficult experience of recovering lost files from a DOS machine using Norton tools, CHKDSK, and a custom-made Perl+Shell program, which ultimately saved the day."
    },
    {
        "original": "Depends what you mean by \"for myself\".For practicality: I wrote a flashcard app to use on the tube to help me learn French. I wanted a couple of things specifically: \n- it should be super simple to use on a mobile device\n- it should be trivial to add a new flashcard on the fly\n- it should prioritise flashcards I've got wrong more than I've got right\n- it should work offline, pushing back to the server once there's a connection again\nCode: https://github.com/alex-moon/clinFor fun: I wrote an app that tied a bunch of machine vision ML repos together to generate \"explorable dream worlds\" in the form of short HD videos. I wanted a simple, fun interface that would let me specify a schema/config for the next video, then hit \"go\" and watch it generate over the course of however many hours, including previewing what we had so far.\nCode: https://github.com/alex-moon/vc",
        "summary": "The first app was designed to be practical and help the user learn French, while the second app was designed to be fun and generate \"explorable dream worlds\" in the form of videos."
    },
    {
        "original": "It didn\u2019t really stay personal, but I built a very basic Raspberry Pi Pinout website hosted on a Raspberry Pi [1] back in 2013. The intent was to collect the pinouts for some boards I was tinkering with at the time. It got wildly out of hand since [2] [3], but I think the original site meets the spirit of this question.1. https://web.archive.org/web/20130505194305/Pi.Gadgetoid.com/...\n2. https://pinout.xyz\n3. https://pico.pinout.xyz",
        "summary": "In 2013, a Raspberry Pi Pinout website was created to collect pinouts for boards being tinkered with, which has since grown into a larger project."
    },
    {
        "original": "A few projects:- a in car audio system that has physical buttons and text to speech output instead of a distracting display panel. Worked really well for a few months but my soldering wasn\u2019t (then) up to par so it eventually fell apart.- a Bash replacement shell, which I later open sourced and now have a few users beyond myself. But it started out as a personal project not intended to be used by anyone but myself. like is in my profile (if anyone is interested)- home automation software which manages everything from internet management through to some physical stuff like lights. At one stage I did also have Alexa skills and an Android app written to interact with it but I rarely ever use them so didn\u2019t bother keeping those Alexa skills nor Android app up to date and just use the web portal (or SSH) the very few times I need to override any default automation.- back in the Windows 95 / 98 era I wrote a desktop shell to replace the standard one. It was inspired by Linux desktop environments though I probably didn\u2019t realise it at the time.- currently I\u2019m building a robot with my son. It has object detection, wheels, speakers and will have some rudimentary Alexa-like voice control.",
        "summary": "The comment describes various projects the speaker has worked on, ranging from car audio systems to home automation software and a robot."
    },
    {
        "original": "Maybe not interesting, but a slideshow application that is much faster and more memory efficient than anything I could find.Image viewers I tried all beachballed constantly, were slow to respond if they even did, had many bugs, and required many interactions and pixel hunting to interact with.It emphasizes instant response even when working with 10s if thousands of very large photos, and a UI that eliminates or reduces required interactions, and integrates with finder smartly.It defaults to opening folders or images fullscreen and round robins windows across displays. The UI is a 3x3 button grid overlay that auto hides, the window name is the the last three parts of the file path. There is gesture support, but I don\u2019t use it because focus is a pain to deal with.JPEG decoding is memory intensive so there is a shared rendering process so the parallelism can be managed and memory uses isn\u2019t duplicated.A shared cache process contains bitmaps of images scaled to screen size that are stored on disk. This kind of assumes you are on a fast flash drive like an MBP where flash is basically as fast as memory.The cache is a 100 element LRU in front of Caffeine (W-Tiny LFU) and all the cache state is persistent including Caffeine so it can remember the LRU and adaptive cache state across restarts.Prefetching scales the previous and next five images in parallel so you can click forward/next and it is instant every time.When you turn shuffle off it plays forward from the image you were on. You can click a button and it will loop all files on a directory.You can open multiple files or directories from finder and it will play all nested files in order.The order is a natural order that parses numbers so if the numbers aren\u2019t padded you still get the correct order.Ended up using JavaFX which works surprisingly well. Fast JPEG decoding, working HiDPI, window resizing and movement renders very nicely.",
        "summary": "This comment describes a slideshow application that is fast, memory efficient, and has a user-friendly interface with gesture support, prefetching, and persistent cache state."
    },
    {
        "original": "I had subscribed to an IPTV service with SO many channels that loading it was a massive pain, so instead I dipped my feet into python for fun and created a filter service that breaks it into a more manageable list:https://github.com/cmcconomy/iptv-filterI since stopped subscribing to IPTV so the project is abandoned, but I have a couple of friends who still use it; I'd probably write it completely differently today - but it's still trucking!",
        "summary": "I created a filter service using Python to make an IPTV service with many channels more manageable, but I have since stopped subscribing to IPTV and the project is abandoned."
    },
    {
        "original": "During the COVID19 pandemics I wrote an app to help my mom cook with anything she had at home, so she could go fewer times to the supermarket, considering her heavy smoking and old age, the best is to avoid exposure.The app is just a search where you input the ingredients you have and you get a list of possible food you can cook with it. I crawled over 6000 recipes over the network. In fact I have over 120k recipes in Portuguese but can't display them due to legal restrictions. After some time I decided to create a site and open-source it:https://feitaemcasa.comI added some recipes in english as well.",
        "summary": "The app created during the COVID-19 pandemic helps people cook with ingredients they have at home to reduce the need to go to the supermarket, especially for those who are at higher risk."
    },
    {
        "original": "I just started this:A collection of tools to pull in personal data from various sources, in the spirit of a \"quantified self\".I just got it to a state yesterday where I can do do this: https://raw.githubusercontent.com/VitamintK/data-fetishism/m...Source code: https://github.com/VitamintK/data-fetishismEventually I'd like to get it to the point of something like this: https://beepb00p.xyz/myinfra.html",
        "summary": "The goal of this project is to create a collection of tools to pull in personal data from various sources to create a \"quantified self\"."
    },
    {
        "original": "Definitely my HN moderation browser extension, which lets me flip through HN super fast and do routine mod tasks without gruntwork.If I live long enough, I will factor out a general-reader version of this that will bring joy to HN power users everywhere.It requires a keyboard, though. Do the kids still use those?",
        "summary": "A browser extension has been created to allow HN moderators to quickly perform tasks, and a version for general readers may be created in the future."
    },
    {
        "original": "Moving box management system!I used AirTable as a backend and UI, added boxes with a room, box number, barcode and contents details.Before beginning I printed barcodes for the first 10 or so boxes. I used thermal shipping labels, sliced them into 3 stickers with 2 barcodes each and slapped them on corners so every face had one.Then I just packed like normal and when a box was full I took a photo of the contents from the AirTable mobile app, scanned the barcode and jotted a note about the contents down.My local machine was pinging AirTable every few seconds to look for new boxes with photos and would then print out 2 full size labels with the photo, box number large, contents and room name which I then put on 2 sides of the box.Arriving was amazing, every box had a destination (room) so no double moving. Every box had contents on them so no opening boxes until you are ready. Plus the AirTable made searching for an item and it\u2019s containing box trivial.",
        "summary": "A moving box management system was created using AirTable as a backend and UI, with barcodes printed on thermal shipping labels and photos taken of the contents to make moving easier and more efficient."
    },
    {
        "original": "We got solar powered string lights for our balcony. The solar panel only came with a spike to stick in the dirt. Since we are several stories up that didn't really work and we didn't want to just tape it to the railing. The part that connected to the spike was a little circular bit with a couple holes for screws so I designed a little mount for it in CAD and 3D printed it and so far it works great. It fits the railing and the solar panel perfectly.",
        "summary": "A 3D printed mount was designed and printed to fit the railing and solar panel for the solar powered string lights on the balcony."
    },
    {
        "original": "I built an app for a family member, who is a nutritionist, that makes it easier for her to stay connected with her patients via WhatsApp. It keeps track of appointments and sends automatic reminders.Lately I decided to jump on the ChatGPT bandwagon and added a feature that integrates with the OpenAI API to suggest replies to messages from her patients.It was overall a fun project. It gave me the chance to explore the integration with WhatsApp Business API (used to communicate with patients), OpenAI API (used to suggest message replies), Discord (used to notify events).Apart from the APIs, it has zero dependencies. It\u2019s deployed as a static website hosted on GitHub. The backend is written as a set of AWS Lambda functions. Data is stored in DynamoDB. Frontend is vanilla JS.",
        "summary": "This project involved integrating with multiple APIs and deploying a static website with AWS Lambda functions and DynamoDB for storage."
    },
    {
        "original": "Analog circuit code golfing:Long ago, a current mirror to charge a 12v battery bank from a \"12v\" iPod charger, evading the usual regulator voltage drop.More recently, a circuit to trip a solenoid when a bit of hot dog goes missing from two leads.I needed two op amps for sensitivity, because over a day or so the hot dog dries up to nearly an open circuit. Still, only a handful of parts, on the smallest breadboard made.Yes, I'm a walking cliche, a better rat trap. My only excuse is this was during the pandemic. I excelled at an electronics segment of shop class back in 1968 junior high school, and I never asked my parents for a kit to go on from there.",
        "summary": "Analog circuit code golfing can be used to create complex circuits with few components, even with limited electronics knowledge."
    },
    {
        "original": "I've got a couple things, they're pretty simple, but they've improved my life significantly for as simple as they are.One is an interface for a MIDI controller I use to be able to control the Soundcraft UI16 mixer I use for my desk setup. I'm a bit of an audio nerd, having done pro-am music production, and having a love for broadcasting, and what started as a simple setup to get good quality sound at low latency has now become an audio chain with a teleconferencing audio processor, a headless digital mixer, and several microphones to do acoustic echo cancellation and noise cancellation so I can use an open microphone without headphones.My mixer, being headless, has no physical controls. From my DJ days, I had a MIDIFighter 3D controller not being used, and a Raspberry Pi without a dedicated task. I was able to write a small bash script to read note information from the controller and send web requests to a Bitfocus Companion server to act as API intermediary between my mixer and the controller. Now, I have physical controls for hardware muting my microphone, and the various computers at my desk. It's effectively a big Elgato Streamdeck for what I use it for, but to be able to upcycle the hardware has been quite nice.I also was working from home with some long hours, and I wanted to try and improve my sleep schedule. I already use redshifting software (usually what's built into the OS these days, although I used to be a longtime F.lux user), and that's been great, but I also wanted to control monitor brightness by time of day. Giving my eyeballs less light blasted into them has helped me regulate my sleep better. I wrote a small python daemon that can run on Mac or Linux, integrate with native DCC tooling to send control commands to my displays, and gradually adjust the brightness of my monitors based on the time of day. This has also been eternally useful when, being an ops guy, I'm called in during the middle of the night, sit down at my desk to address an outage, and my eyeballs are bombarded with significantly less light, making the pain of adjusting much less difficult to address, and also making falling back asleep after the incident is resolved much easier.",
        "summary": "Using simple tools, the author has improved their life significantly by creating a MIDI controller interface for their mixer, and a python daemon to adjust monitor brightness based on time of day."
    },
    {
        "original": "I founded 2 photo startups (2004 and 2012). My second startup was focused on data portability and was open source. https://en.wikipedia.org/wiki/TroveboxAfter failing to integrate the software into Western Digital's MyCloud NAS line of productions, I left and decided to try something different. I created a photo management tool that could feed into other photo programs. It's open source and available on github.https://getelodie.comhttps://github.com/jmathai/elodieI started off using it with Google Photos. Explained here, https://medium.com/swlh/my-automated-photo-workflow-using-go...I've since switched to using it with Synology Photos.8 years and counting.",
        "summary": "My second startup focused on data portability and was open source, and I have since used it with Google Photos and Synology Photos for 8 years."
    },
    {
        "original": "I rewrote the UI for an off the shelf WiFi digital photo frame so that it shows the latest raw images sent back from the Perseverance Mars rover.\nhttps://prbs23.com/blog/posts/picture-frame-from-mars/The picture frame secretly ran Android under the hood. Which meant I could replace the app which showed pictures pulled from the manufacturers server, with one which pulls photos from the NASA website. Fortunately they left ADB enabled with root permissions, so it was trivial to replace their startup app with my own.\nAll the source code is public here: https://gitlab.com/prbs23/mars-photo-stream",
        "summary": "The UI of an off the shelf WiFi digital photo frame was rewritten to show the latest raw images sent back from the Perseverance Mars rover."
    },
    {
        "original": "I built a 3D visualiser that overlays semantic topics and sentences of documents with different \"embedding types and orders\"[1] using Natural Language Processing.It colours each document with the same colour. You can see how two documents overlap, semantically - it's pretty awesome for Job Role/CV overlays for example, or educational resources and exams - a mix merging of colour shows both equally discuss something... missing colour means one document doesn't.Since it's semantic, depending on the embedding, the gaps in-between spots make a lot of sense intuitively, and you can sometimes even see how the conclusion of a document ends up in a different semantic space to the start as such (even though there is no time data, you just notice the later topics are semantically in a different space to the earlier ones for the same document)[1] Similarity based, NLI based, GPT-raw etc.",
        "summary": "This 3D visualiser uses Natural Language Processing to overlay semantic topics and sentences of documents with different embedding types and orders, and colours each document with the same colour to show how two documents overlap semantically."
    },
    {
        "original": "Daily email I reply\nTo to keep a diary: two php scripts and mailgun.\nMy own recipe site: WordPress.\nTag-based time tracking (in-progress) at timer.express: react, php api.\nProductively timer at timerdoro.com: react, WordPress.\nConfigurable image cropper for client use at crop.express: vanilla JavaScript, html.",
        "summary": "The comment outlines the technologies used for various projects, such as WordPress for a recipe site, React and PHP for tag-based time tracking, and vanilla JavaScript and HTML for a configurable image cropper."
    },
    {
        "original": "- Desktop app for creating a static blogs. Electron and React: https://www.project-daily.com- Instagram-like, private photo feed, where my partner and me can share pictures of our kids with relatives and friends. Posting works via e-mail, cron job generates the feed html. Imagemagick output multiple image formats, supports iOS live photos too. The feed isn't paginated, but with lazy loading the images it's still very performant.- Most recently and still ongoing: A recipe clean-up tool. Removes all the gunk and fluff from online recipes. Shows just the ingredients and instructions. Also understands units and quantities, so unit conversion is up next. Here it is: https://pretty-recip.es/recipe?recipe-url=https%3A%2F%2Fwww....",
        "summary": "A desktop app for creating a static blog, an Instagram-like private photo feed, and a recipe clean-up tool are all being developed."
    },
    {
        "original": "I've built a few audio effects that only I've used. The only one that really stuck around is a guitar pedal delay effect with pitch shifting where the pitch shifting only happens on the first repeat, it doesn't accumulate as the sound repeats. It also has an envelope follower so notes can repeat infinitely when there's no playing, and once you start strumming/picking again the feedback of the repeats drops to zero until you stop playing and it goes back to the knob setting (Which can go from 0-150% feedback). Unfortunately I've got no good sound demos except some Facebook videos I'm not willing to share ;p",
        "summary": "The author has created a guitar pedal delay effect with pitch shifting and an envelope follower which allows for infinite repeats when there is no playing."
    },
    {
        "original": "Idk if this counts but I built myself a Rubik's cube timer and eventually made it public:https://cubedesk.ioIt was a weekend project which I used for several weeks before sharing it on Reddit. The feedback was so good I decided to make it public.",
        "summary": "The feedback from a weekend project of building a Rubik's cube timer was so good that the creator decided to make it public."
    },
    {
        "original": "I struggled with procrastination a lot so on top of Pi-Hole I built myself an automatic procrastination tracker and blocker, this setup helped reduce my procrastination from several hours a day to almost nothing (over the period of several years of slowly unlearning the bad habits)",
        "summary": "Using Pi-Hole and an automatic procrastination tracker and blocker helped reduce procrastination over a period of several years."
    },
    {
        "original": "I've been playing around with Node-RED[0] and built a completely pointless svg manipulation flow[1] which then makes this page https://demo.openmindmap.org/ui/#!/7The idea is create a tool for creating a global mind map but instead it's a svg![0]=https://nodered.org[1]=https://demo.openmindmap.org/omm/#flow/3ebb65fdbecb182e (not really mobile conform)",
        "summary": "Node-RED was used to create a tool for creating a global mind map, which is a svg, but is not mobile conform."
    },
    {
        "original": "Something I've recently worked on is building an SQLite database of all the dependencies my organisation uses, which makes it possible to write our own queries and reports. The tool is all Open Source (https://dmd.tanna.dev) and has a CLI as well as the SQLite data.Ive used it to look for software that's out of date (via https://endoflife.date), to find vulnerablilities (via https://osv.dev) and get license information (via https://deps.dev)It's been hugely useful for us understanding use of internal and external dependencies, and I wish I'd built it earlier in my career so I could've had it for other companies I've worked at!",
        "summary": "Building an SQLite database of all the dependencies has enabled the organisation to write their own queries and reports, as well as look for out-of-date software, vulnerabilities and license information."
    },
    {
        "original": "I built a \u201cdipping bird\u201d boiler reset (metaphorically). Our old boiler had a fault where it would lock out every few months until manually reset. So, I wired a normally closed relay to it and a 10 line Arduino sketch to open the relay 1 minute out of every 120.That ran for about 7 years; when I was researching replacing the boiler with air-to-water heat pump, I had to prove the house could be heated with lower temp water, so I changed to an ESP8266, added a platinum temperature sensor, a webserver, data logging, and ran a bunch of experiments with lower supply temps to see how the house would react.https://imgur.io/a/VM7nD74 (that chart is entirely SVG, the whole content screenshotted was generated on the ESP)",
        "summary": "I created a system to reset an old boiler using an Arduino and an ESP8266, and used it to run experiments to prove that a house could be heated with lower temperature water."
    },
    {
        "original": "I created a cycling statistics dashboard on a Raspberry Pi with a Pimoroni Inky Impressions e-ink display.It's on my desk. And every hour it refreshes my cycling stats, reminding me that a) Wow! I build a cool thing that actually works and b) I did ride a lot on my racing bike, didn't I? / It's about time to go outside and ride some more.\nhttps://github.com/Marcel-Jan/StravaInkyI've written a couple of blogposts on how I build it:\nhttps://marcel-jan.eu/datablog/2022/12/12/strava-dashboard-o...",
        "summary": "The comment highlights the satisfaction of creating a cycling statistics dashboard and encourages the reader to go outside and ride more."
    },
    {
        "original": "When I was in college, registering for classes was always a pain since a lot of classes would fill up almost instantly once online registration opened, then it was just a game of constantly refreshing to see if any seats had become available.After struggling through that for a few semesters, I decided to automate it. Started out with a script that would take course IDs as input and check for openings every few minutes (used selenium/beautiful soup I think) then text me via twilio whenever a seat was available. The next semester I updated it so it would even sign me up for the course automatically.Also came in handy to get myself and a few friends into the coveted wine tasting class our senior year.",
        "summary": "I automated the process of registering for classes to make it easier and more successful."
    },
    {
        "original": "This started out as a password mangager. It evolved into a graph database coff after reading Linked - How Everything is Connected to Everything Elsehttps://www.wittenburg.co.uk/Work/Interact/History.aspxStill under development...",
        "summary": "The project began as a password manager and has since developed into a graph database based on the concepts explored in the book \"Linked - How Everything is Connected to Everything Else\"."
    },
    {
        "original": "Maybe not the most interesting but a CLI utility that would do 2 things (gaming related):* guess the gameserver tick rate based on network traffic patterns between game client/server (cs:go for example) and display it in grafana* collect keyboard inputs while playing and display them as a heatmap on grafanaAll of this for no real reason.",
        "summary": "This comment suggests creating a CLI utility for gaming-related purposes, such as guessing the gameserver tick rate and collecting keyboard inputs, to be displayed in Grafana, for no real reason."
    },
    {
        "original": "https://ppg.reportShows a nicely formatted weather report for flying my paramotor, pulling data in from many different sources :-)",
        "summary": "The comment highlights a weather report that is formatted nicely and pulls data from multiple sources for paramotor flying."
    },
    {
        "original": "I built a system in 2008 that would let me design a database and the automatically generate an entire admin backend, granular ACL rules for different users and roles, related records and interactive table fields like toggle switches. It wasn\u2019t statically generated so it easily adapted to changes in the database over time too. Could also swap out the UI theme per customer. Among other things.Called it The Intersect because I was and still am a huge fan of \u201cChuck\u201d.It sped up my client projects so much that it killed my hourly income.Now there are lots of systems that do this type of thing, but at the time I was very proud of that system. It was nice to be able to focus on web project from a purely data design back approach.",
        "summary": "The Intersect was a system built in 2008 that allowed for the design of a database and the automatic generation of an admin backend, ACL rules, related records and interactive table fields, which could be adapted to changes in the database and had a UI theme that could be swapped out per customer."
    },
    {
        "original": "Not so interesting but continuously useful for me as a learning aid: A compass rose showing the opposite bearing of a given bearing; the back azimuth.Useful to head back the way you came, or tell someone you see in the distance roughly where to head to meet you, in both real and virtual worlds.https://hypertexthero.com/compass-rose-back-azimuth/",
        "summary": "The compass rose and back azimuth are useful for navigating in both real and virtual worlds."
    },
    {
        "original": "I wrote a live video/audio marker creator with OpenAI's Whisper.A Stream Deck XL button runs a Python script that creates a timestamp for ongoing video and audio recordings which I use for live stream and podcast chapters while I'm streaming or recording.Different buttons on the Stream Deck create markers with different labels, e.g., Introduction, Break, Marker, etc.But as it's hard to name markers for every section and you have to go back to the recordings to infer what each section was about, I added a dynamic marker script that trims audio around a marker with ffmpeg, locally transcribes it with Whisper, and appends the transcript to the marker, so I can easily guess what the marker title should be without having to scroll and watch the video.",
        "summary": "I created a marker creator with OpenAI's Whisper that automatically transcribes audio around markers and appends the transcript to the marker for easy identification."
    },
    {
        "original": "Built a compilation of local happy hours, lunch specials, and other cheap eats at https://fullprice.no (as in, \"do you want to pay full price? No.\"). The idea isn't all that original but I thought my layout and presentation was rather unique, for example the 24-hour slider as opposed to a clock interface.I thought it would be easier post-launch to get restaurants to participate and add their own information (nearly-free marketing), but that was a faulty assumption. The admin interface is also pretty cool, very simple to specify blocks of time when the specials are active.Unfortunately it hasn't been updated in 4 or 5 years. When Covid first started, I launched a sister site just to list restaurants that were open, I took that down about 6 months ago.",
        "summary": "The idea behind https://fullprice.no was to create a compilation of local happy hours, lunch specials, and other cheap eats with a unique layout and presentation, but it has not been updated in 4 or 5 years."
    },
    {
        "original": "I didn\u2019t exactly build this from scratch but it is pretty heavily modified: I use an ESP8266 with a relay module to control my garage door via Home Assistant. I use a second one mounted on my bike as a WiFi presence detector. This way when I turn the bike on, the bike module connects to my home WiFi and Home Assistant opens my garage door. Once I leave the property and WiFi disconnects, the garage door closes a minute later. When I come home the same happens: as I approach the garage door opens and after I park and shut the bike off the door closes. There are a lot of solutions for how to open the garage door from a bike but this has been the most elegant that I\u2019ve tried.",
        "summary": "I have modified an ESP8266 with a relay module to control my garage door with Home Assistant, and I have used a second one mounted on my bike as a WiFi presence detector to open and close the garage door when I come and go."
    },
    {
        "original": "I was running the lightshow for a medium sized nightclub and ended up building a custom React renderer that would declaratively control all of the lighting fixtures on the dance floor, strobes and smoke machines included. The entire show was controlled with various MIDI controllers (similar to Launchpads) which also had their button grid programmed using React.It was suddenly very intuitive to build user interfaces on a button grid MIDI controller using standard React design patterns, not to mention the actual light shows being implemented as React components.",
        "summary": "A custom React renderer was built to declaratively control lighting fixtures, strobes, smoke machines, and MIDI controllers, making it intuitive to build user interfaces on a button grid MIDI controller using React design patterns."
    },
    {
        "original": "I made a small 4 digit LED display that syncs to my work calendar and counts down the hours/minutes or minutes/seconds to my next meeting, depending on how close it is to starting.Currently working on moving the ICS calendar parsing part from a python script down to the microcontroller itself, then I can release.",
        "summary": "The LED display syncs to the user's work calendar and counts down the time until their next meeting, and the user is working on making the calendar parsing part of the project run on the microcontroller."
    },
    {
        "original": "I built a pretty simple command line application (glorified python script) years ago that sends messages into a specified matrix room, and intended for use as a basic server notification system. Only recently posted to github (because a friend asked me to share); see: https://github.com/mxuribe/howlerLike other sys admins and devs, I had used email notifications for years to notify me whenever *stuff happens* on a server (like a job ran/completed, some storage device is low, etc.). But when matrix came out several years ago, i really liked the concept, became a bit of a matrix fanboy, and built a little script to leverage - nowadays, all of - my server notifications. Again, pretty basic/not sophisticated, but it scratches my itches.",
        "summary": "I built a command line application to send messages into a Matrix room to be used as a server notification system, which I recently posted to Github."
    },
    {
        "original": "I partially encrypt/decrypt a file based on the presence of special HEREDOCs (ie <<PRIVATE) so I can keep a public daily journal and keep some notes private.The tool is still a WIP as it isn't portable between machines -- https://github.com/higgins/privatizemore on it here: https://encapsulate.me/writing/Privatize.html",
        "summary": "This tool allows users to partially encrypt and decrypt files based on the presence of special HEREDOCs, allowing them to keep a public daily journal while keeping some notes private."
    },
    {
        "original": "I have built VS Utils [1] mostly for myself since I work with WordPress and they use serialize(), unserialize() functions a lot, and sometimes I need to convert base64, timestamps value without leaving the editor. I find it's easier to write an extension for daily use functions and publish to VS Code so I can download it easier, sync across devices. Hope it helpful for others too.[1] https://marketplace.visualstudio.com/items?itemName=tanftw.v...",
        "summary": "The VS Utils extension was created to make it easier to convert base64, timestamps values without leaving the editor, and to make it easier to download and sync across devices."
    },
    {
        "original": "SSO proxy I use for all my self-hosted needs. I have 1 user in an LDAP database and I can use it even for services with no authentication at all. I even implemented real-time QR code login, magic link and web login over SSH.",
        "summary": "I use an SSO proxy to manage authentication for all my self-hosted needs, including services with no authentication, as well as real-time QR code login, magic link and web login over SSH."
    },
    {
        "original": "A few years ago, before the rate limits on Google maps, I wrote a script that analyzed my commutes. Per week it produced a standard deviation of the travel time for every departure time. The result was a nice graph showing peaks of traffic. \nI dodged quite a few traffic jams using those graphs.",
        "summary": "Using a script to analyse my commutes and produce a graph of traffic peaks enabled me to avoid traffic jams."
    },
    {
        "original": "I wanted to listen to the audio version of \"Founding Sales: The Early Stage Go-To-Market Handbook by Peter R Kazanjy.\" But I couldn't find an audible version so a friend and I downloaded an ePub version of it and converted it to audio using Microsoft's txt to speech model and built a simple UI.I plan to make it general purpose so you can download and ePub and convert it to audio seamlessly.https://listenandread.netlify.app/",
        "summary": "I created a tool to convert ePubs to audio using Microsoft's txt to speech model and plan to make it general purpose."
    },
    {
        "original": "I just shipped my hobby project - https://github.com/rounakdatta/my-best-of-reddit/. It is a Telegram bot which would send me all my upvoted posts and comments at EOD everyday.It's a solution to a personal pain point - discovering and getting reminded of all the hilarious & extraordinary knowledge that I keep discovering on Reddit.",
        "summary": "The Telegram bot is a solution to a personal pain point of discovering and being reminded of the content found on Reddit."
    },
    {
        "original": "I used Arduino to build an automated RDT adapter for grinding espresso beans in such a manner that they don\u2019t spread all over your counter. It was a fun project and learned a lot about the chemistry of beans.",
        "summary": "I built an automated RDT adapter using Arduino to grind espresso beans in a controlled manner, and I gained knowledge about the chemistry of beans in the process."
    },
    {
        "original": "I built a working version of the Christmas lights from Stranger Things (that Joyce used to talk to Will in the upside down) for a friend's Halloween party. It used an arduino board, a string of addressable LEDs, and a little web interface that guests could use to send messages to the lights.It was so much fun to build and a hit at the party. I wish I had the opportunity to build more things like it :)https://github.com/zbtaylor/stranger-things-lights",
        "summary": "I had a great time building a working version of the Christmas lights from Stranger Things for a friend's Halloween party, which was a hit at the party."
    },
    {
        "original": "I have created a vuejs components library that is based on a proprietary js framework.Its super easy to create a new component since all the JS and design is handed from the proprietary framework, and i have full control on the complete library.The downside is that i have to create every component i want to use and i cannot share the library with anyone.",
        "summary": "The library is easy to create components with, but cannot be shared with others."
    },
    {
        "original": "I wrote an AppleScript and cron-ish schedule to automatically archive anything on my desktop or downloads folder. It checks once an hour, and if there is anything there that is over a day old, and not tagged, it creates a folder in an archives folder, named for the date and time, and moves the items there. So I always have a clean desktop and downloads folder (and later I modified it to organize my documents folder).I wrote it up a long time ago. I need to clean it up, but you can probably figure it out from here: https://gcanyon.wordpress.com/2013/05/12/keeping-a-clean-des...",
        "summary": "I created an automated system to keep my desktop, downloads and documents folders organised by archiving old items into a folder named for the date and time."
    },
    {
        "original": "I built an emulator for HUB75 LED matrix panels.\nhttps://github.com/ty-porter/RGBMatrixEmulatorOne of the side projects I work on is a scoreboard that displays MLB scores. It's highly configurable -- you buy the size panel you want and a Raspberry Pi, install the software, and you can configure it to display games, standings, and news headlines for your favorite team or division.The problem is that the hardware is purchased by the end user, so it can come in many different sizes. I think we officially support 6 or 7 sizes right now, and each panel can be a chunk of change if you get a nice one. If we wanted to test on every device that means I need to shell out 50 bucks x 7 sizes, plus Raspberry Pi and wiring adapter, so not insignificant for a hobby project. Instead, I wrote a drop-in replacement emulator that makes it super simple to emulate any size panel across a variety of display types.The most advanced display adapter spins up a minimal webserver and serves emulated images over a websocket, meaning you can display your panel over the network on pretty much any device with a web browser.I write about it quite a bit, if further interested: https://blog.ty-porter.dev/categories.html#emulation-ref",
        "summary": "I built an emulator for HUB75 LED matrix panels to enable testing of different sizes without having to purchase the hardware."
    },
    {
        "original": "Back in the day, access to the Internet was very expensive in my locality. We only had mobile data with max 20GB per month, and after that - 7KB/s unlimited for ~20% of average local salary. Having no job, it was very hard to pay that amount for the Internet, so I came up with a solution. I have set up a cloud server for 10$/month, got couple of SIM cards with that internet plan, and started developing a Linux tunnel program, which would join bandwidth of multiple interfaces into one by directing packets to my server. The server then forwards the packets further. I hadn't used it for long but it was very fun and satisfying to do it.",
        "summary": "The author created a Linux tunnel program to join multiple internet connections into one, in order to access the internet more affordably."
    },
    {
        "original": "I built this about 4 years ago... I have about half a dozen of them around the house right now showing stock quotes, weather, etc. and updating every 5 minutes.https://foundrytechnologies.com/relay.phpOne of them has been outside the front door showing messages to visitors and exposed to the Texas elements for all that time now - still going strong. About 2 years ago I replaced the plastic case, which was looking a bit warped.Sold a few too - though not enough to scale things up. Hardware is hard.",
        "summary": "The author has built and sold several devices that display stock quotes, weather, and messages to visitors, and have been able to withstand the elements for several years."
    },
    {
        "original": "I built a cloud for my family to use.It leverages containers and Docker Compose, mainly for it's tooling that makes it easy to deploy. I made a tool that correctly selects the right node based on the directory I'm in using Docker Profiles. The networking is both internal and external; I share some APIs externally, like to share photos or to run video game servers, while other services are entirely privileged. It, for the most part, implements mTLS, and has both public and private DNS. I have a single ingress node in my cloud provider that is connected to my home servers via Tailscale. It's been instrumental in building out things at my house and making my life easier and cheaper.",
        "summary": "I built a cloud for my family to use which leverages containers, Docker Compose, Docker Profiles, mTLS, public and private DNS, and Tailscale to make it easy to deploy and share APIs externally."
    },
    {
        "original": "Turn a YouTube channel into a personal podcast feed.\nhttps://gist.github.com/thebenlamm/9d862a3e6c9f481ab9d8a8afe...More detailed instructions in the script but the general idea is:\n1. When a channel publishes a new video IFTT puts a text file with youtube link in Dropbox\n2. Script downloads audio from youtube\n3. Justcast.com free tier to turn a Dropbox folder into a podcast feed",
        "summary": "The general idea is to use IFTT, a script, and Justcast.com to turn a YouTube channel into a personal podcast feed."
    },
    {
        "original": "My company has a budget for health and wellness that I use for my GoodLife gym membership. GoodLife doesn\u2019t send receipts and instead makes you go to their website, fill in a bunch of information, and request the receipt be emailed to you. So I made a little app that simply fills in the form automatically every two weeks. I set it up on GitHub actions and now I don\u2019t have this annoyance to deal with. It\u2019s pretty small but made my life better.Not much for instructions but it\u2019s here is anyone is interested. https://github.com/jpatters/goodlife-receipts",
        "summary": "A small app was created to automate the process of requesting a receipt from GoodLife, making life easier for the user."
    },
    {
        "original": "My MTG playgroup kept taking too long to play rounds because of indecision on which cards to play, and we consistently ran out of time part-way through games.A proven solution to this problem already existed - chess clocks. However, those only work for two-player games, and we play games with the number of players ranging from 2 to 6.So I made a little web app that's like a chess clock but supports several players rather than just 2. It's designed to be used on a phone and put between the players on the table. Your turn ends when you tap your clock. There's also a pause button for during combat so that you can't unfairly run down another player's time while deciding which creatures to block with. The KO button distributes a defeated player's remaining time amongst the players who are still in the game.Made with 100% organic, home grown typescript. No React in sight.https://mtg.viggers.net/",
        "summary": "A web app was created to solve the problem of taking too long to play rounds in a MTG playgroup, which supports several players and has features such as a pause button and KO button."
    },
    {
        "original": "A shortcut on my iPhone, that I can dictate a note to, and it transcribes it and puts it into my GTD inbox in Notion. It helps me not forget things. Lowers the friction and allows me to make note of fleeting ideas, thoughts, and things to get done.",
        "summary": "Using a shortcut on my iPhone to dictate notes and have them transcribed into my GTD inbox in Notion helps me to quickly capture fleeting ideas and tasks."
    },
    {
        "original": "Well, I've made something for a very niche group of people.I made a really small simple tumblr clone social network, and a few months ago I was able to kind of bugily conect it with mastodon.https://app.wafrn.netIt has 400 registred users, of wich in the last month 20 have posted.https://app.wafrn.net/.well-known/nodeinfo/2.0This endpoint I added it not too long ago to be more \"friendly\" towards other nodes",
        "summary": "I created a small social network that is connected to Mastodon and has 400 registered users, with 20 of them posting in the last month."
    },
    {
        "original": "Built a chrome extension to help me save time by adding  custom tags to the URL with just one click rather than typing them out every time.https://tinytags.xyz",
        "summary": "The chrome extension 'TinyTags' allows users to quickly add custom tags to URLs with one click."
    },
    {
        "original": "I make my own digital synthesis algorithms using (relatively, w.r.t. the field) esoteric mathematics. [1]At some point (e.g. once I obtain patents) I hope to commercialize the processes involved as software/hardware instruments, but for now it's solely for my own practice. [2][1] https://soundcloud.com/thetanull/1to1-220409-03\n[2] https://soundcloud.com/goomtrex/condenser-12-54",
        "summary": "The author creates their own digital synthesis algorithms using esoteric mathematics for their own practice, with the hope of commercializing them in the future."
    },
    {
        "original": "I have built a Discord bot that greets me every morning and sends me a list of tasks to do on that day because I'm more comfortable with a single friendly message than a pile of calendar notifications.I still use calendar and reminder apps for one-off and time-sensitive tasks, but for recurring tasks, especially those with complex timing, the crontab syntax integrated into the bot is more powerful and easier to maintain.",
        "summary": "The Discord bot is more powerful and easier to maintain than calendar and reminder apps for recurring tasks with complex timing."
    },
    {
        "original": "Lots of things. But one I am coming back to is called Malten (https://malten.com). It was essentially a place for me to blackhole my thoughts anonymously rather than putting them on twitter. Recently as I've seen ChatGPT take off it's made me revisit the project and create an integration for it (not yet publicly hosted). Ideally I'd just be able to voice my thoughts to an AI now in a private manner. Let's see.https://github.com/asim/malten for anyone who wants to run it themselves.",
        "summary": "Malten is a platform for anonymously blackholing thoughts, and recently an integration with ChatGPT has been created to allow users to privately voice their thoughts to an AI."
    },
    {
        "original": "Most \"useful\" thing I've lego'd together from parts was RSS feed of TV show torrents and multi-threaded torrent library that would then push the shows into Plex server and send a notification to my phone, but none of this was actually created by me. I was just integrating ready made software. Although this has been dismantled for years now ever since I started earning money and was able to pay for the streaming services.Most \"created\" thing was a fishing bot for a MMORPG that used computer vision to navigate the interface and detect when you had caught a fish and reel it in.",
        "summary": "The most \"useful\" thing the speaker created was a fishing bot for a MMORPG, while the most \"useful\" thing they integrated was a RSS feed of TV show torrents and multi-threaded torrent library."
    },
    {
        "original": "Not necessarily only for myself, but I've been using my own terminal CLI to browse and comment on HN (yes, including this comment):https://github.com/Aperocky/hnterminalYou can also get it via `pip install hnterminal`",
        "summary": "Using the terminal CLI 'hnterminal', you can browse and comment on HN."
    },
    {
        "original": "It\u2019s a tool that helps me generate code examples for multiple JavaScript frameworks.Input is a JSON string describing the code, out comes code examples in plain JavaScript, React, Angular, Vue, Svelte, and jQuery.Helps me generate extensive docs on my own.",
        "summary": "This tool helps generate code examples in multiple JavaScript frameworks from a JSON string, as well as generate extensive documentation."
    },
    {
        "original": "I used to run a hackspace, so quite a lot! But in no particular order these are some of my favourites:- A tracking airsoft turret that would point at and fire at movement. Was coded in Processing.- A world clock of digital clocks that synced with NTP and could be set to many regions when working with different timezones.- A QFH antenna for receiving live satellite images via SSTV from weather satellites- A core xy assembly with a peristaltic pump that can be placed over a frying pan to make fun designs of pancakes- A screenshot tool that uploaded to a private site with a short code URL for sharing screenshots without relying on ott SaaS products",
        "summary": "My favourite projects from running a hackspace include a tracking airsoft turret, a world clock, a QFH antenna, a core xy assembly with a peristaltic pump, and a screenshot tool."
    },
    {
        "original": "I'm working on an app to browse a codebase as a list of constructs \u2014 classes, methods, etc. It matches how I think about code: as a database of named entities, in which the implementation is often an afterthought \u2014 unlike text editors, in which constructs of various types, along with their implementation, all kind of look the same. It's still a very early project, but here's a short recording of some of what I've built so far[^0]. It's been a great way to learn SwiftUI, the Language Server Protocol, and FSEvents as well![^0]: https://twitter.com/tanagram_/status/1652164856563507200",
        "summary": "The app I am working on allows users to browse a codebase as a list of constructs, such as classes and methods, and emphasises the named entities rather than the implementation, which is different to text editors."
    },
    {
        "original": "It's not personally useful but I wanted to see if I could design and build a navigation controller designed for a satellite with different configurations. I started with a sandbox simulator that emulated all the hardware sensors down to the noise (according to their data sheets) and a microcontroller emulator that ran real code compiled for a microcontroller I chose for the task (STM32G431).I tested different control schemes and thrust firing plans, added support for different types of thrusters, errors in sensor readings, atmospheric drag depending on altitude, weird anomalies in the earth's magnetic field, simulated bit flip events and hardware lockups (I left the internal watchdog out of the hardware lockups which is probably not realistic).In an effort to stress test my simulator I ended up writing a genetic algorithm solver for thruster, magneto-torquer, and reaction wheel placement on arbitrary craft bodies with different mission plans and let it solve it.I ended up designing a physical circuit board matching the simulator, flashing the board with the same code that was running in the simulator and it worked! I roughly made an approximate cube sat (10cm^3) (had a mechanical engineer friend design me a frame and manufacture it for me) with some small cold gas thrusters out of pressurized CO2 cartridges, controlled by solenoids, and placed by my genetic algorithm.I dropped it off a cliff that was ~600ft high (best I could do for a \"zero gravity\" environment that was away from people). It was able to completely arrest its angular rotation before slamming into the ground which is better than I was expecting.",
        "summary": "I designed and built a navigation controller for a satellite with different configurations and tested it in a simulator and with a physical circuit board, which was successful."
    },
    {
        "original": "I create a bunch [1] of [2] stuff [3] pretty much non stop [4] and I like rolling my own, in NIH syndrome therapy.[1] https://noben.org/boomwrist/\n[2] https://noben.org/boomdeck/\n[3] https://noben.org/tvmaster/\n[4] ... https://noben.org",
        "summary": "I enjoy creating my own projects and products."
    },
    {
        "original": "A bootable mini-CDROM that I would pop into two dozen computers in a computer lab after hours that would turn the lab into an OpenMOSIX SSI cluster and auto-eject the CDs. All I had to do to reset the lab is ctrl+alt+delete on all the machines.I also built a CarPC back before we had smartphones that could do everything. I wrote some custom Perl software for it:- An audible user interface that allowed a remote control, a keypad, or voice commands to speak-navigate a series of menus, to allow running programs, selecting music to play, etc. It was extremely low-latency, fast and clear, to allow very rapid navigation. No need to look away from the road, unlike every annoying car navigation menu I've ever used.- A music interface to allow selecting playlists, shuffling music, pausing/skipping, etc- A program to play the next of a pre-written instruction when approaching a GPS coordinate; basically, ghetto turn-by-turn GPS nav- A wardriving interface to tell you when a new access point was captured and if it was unencrypted and high signal- A video player hooked up to a mini monitor installed in the dash",
        "summary": "This comment describes a custom Perl software that was created to provide an audible user interface, music interface, GPS navigation, wardriving interface and video player for a CarPC."
    },
    {
        "original": "I created a service you can text to get fun conversation starters based off a topic, or an observation. I used Twilio + ChatGPT to build this so I could come up with interesting questions anytime, anywhere.Simply text 1 (434) 404 6822 with an observation.",
        "summary": "This service provides conversation starters based on a topic or observation, which can be accessed by texting 1 (434) 404 6822."
    },
    {
        "original": "The old Yahoo News Digest app from years back was incredible and I never could find a replacement. I decided to build my own.It uses Embeddings to gather thousands of articles and compare against each other. Then uses a relational graph to combine those into collections and uses an LLM to create a succinct summary, quote, map, and other info about the topic.It lets me the news for the day within minutes instead of endlessly scrolling.",
        "summary": "The speaker created their own news digest app which uses embeddings, a relational graph and an LLM to quickly summarise news stories."
    },
    {
        "original": "I had a servo motor attached to a raspberry pi which turned a small gear that connected to a plastic gear m on the analogue temperature control of my gas heater.Then I had it switch to various temperatures while heating and also had a geofence for my phone implemented that turned on the heating when I entered a 500m radius. Even had a calibration script for the servo motor.",
        "summary": "This comment describes a project that used a servo motor, Raspberry Pi, and geofencing to control a gas heater."
    },
    {
        "original": "Maybe not the interesting, but the most recent\u2014 I was annoyed that Bloomberg\u2019s email newsletters didn\u2019t have an associated RSS feed, so I wrote a script that uses JMAP to take the most recent emails from them from my inbox and publish to an rss file. A docker container hosts that running on a cron job, and nginx to serve.I run it on my NAS so my RSS reader can find it as long as I\u2019m on VPN. Now I only need to visit NetNewsWire for all my news!",
        "summary": "I wrote a script to take the most recent emails from Bloomberg and publish them to an RSS feed, which I host on my NAS and access through a VPN."
    },
    {
        "original": "An app that helps me with shopping at my main supermarket.I usually go always to the same supermarket twice a week. I was frustrated that every time I changed something in my shopping list I had to mentally recompute the optimal path to pick up everything.Now with my app I am able to build the graph of the entire supermarket (each node represents a rack with shopping items) and then given my shopping list it computes the optimal path from the entrance to the exit. It's a version of the classical travelling salesman problem",
        "summary": "The app helps to optimise the shopping experience by computing the optimal path through the supermarket based on a given shopping list."
    },
    {
        "original": "Had an older Bezzerra coffee grinder without the grind timer, which is, as you go further in to the espresso rabbit-hole a major PIA.Got an ESP32 board with Wifi and a relay, wrote a quick webserver, some ui to access through the phone and voila, no more need for a grinder upgrade. Took about three days (moved from arduino to ESP32 due to memory issues of a large css/js UI for iphone)",
        "summary": "A webserver with a UI and an ESP32 board with Wifi and a relay was created to replace the need for an upgrade to an older Bezzerra coffee grinder with a grind timer."
    },
    {
        "original": "Back in the late 80s, amused by the multitasking capabilities of the Commodore Amiga, with a friend we removed the keyboard for a Commodore 64, added the second keyboard to the Amiga so both could use the same computer in one display showing two different windows. The reverse of the purpose of terminals: sharing one display while having a single computer and two keyboards.Clearly that involves electronics and 68k assembly programming.",
        "summary": "A friend and I modified a Commodore 64 and Amiga to share one display and two keyboards, demonstrating the multitasking capabilities of the Amiga and requiring knowledge of electronics and 68k assembly programming."
    },
    {
        "original": "Happy Friday! I have built a document-reading app to help me curate, visualize, and recall my knowledge as I read and annotate research papers - https://www.KnowledgeGarden.ioThe app also extracts data from documents, such as urls, keywords,  and references, and generates a downloadable pdf report with annotations and extracted data.",
        "summary": "The app helps to curate, visualize, extract data, and generate a report with annotations from documents."
    },
    {
        "original": "I spend a lot of time listening to music, so I built my own music player for my large collection of MP3s. I'm not a big fan of streaming and could never find a player that did all the things I wanted, so I figured it'd be best to build my own using Web technologies. It's been fun adding each feature -- automatic playlists with intricate rules, some smart shuffle features, stats, tag management, displaying waveforms, syncing with my phone, etc. -- and I've learned a lot on the way. I've also fine-tuned the UX to my personal preference. It helps when you only have to worry about the exact set of features that you want!",
        "summary": "I built my own music player using Web technologies to cater to my preferences and needs, and have learned a lot in the process."
    },
    {
        "original": "I started building a typing web app to get better at touch typing. (Doesn\u2019t work on mobile so open on PC if curious)https://www.typefaster.app/Still very early stage and many more features (racing, user management, etc) coming but it\u2019s probably one of the first projects I\u2019ve built that I\u2019ve actually used",
        "summary": "I built a typing web app to improve my touch typing skills and it is one of the first projects I have used."
    },
    {
        "original": "My family is super into games, and as the resident programmer, they often ask me to build things related to them. Favorite two to build were- an Unolingo solver that we used to figure out if there could ever by more than one solution to the puzzle (there can be!)- a \"killer\" solitaire simulator that determined the optimal number of players for a max win rate. IDK if this is even a real game, but my family plays multi-player competitive solitaire with up to 8 people at a time. IIRC the optimal number for win rates is like 5-6(?) according to my simulation",
        "summary": "The programmer built an Unolingo solver and a \"killer\" solitaire simulator to determine the optimal number of players for a maximum win rate."
    },
    {
        "original": "I created an IOT 3d printed, Raspberry Pi Pico powered WIFI fish feeder with a rotating dispensing carousel with an 8 food pellet capacity. I could have made it higher capacity but NJ is a restricted state (gun joke). I plan on improving it by adding battery backup and an RTC, so I can travel and be sure that my fish still get fed in case of a power outage.",
        "summary": "This project has the potential to be improved by adding battery backup and an RTC to ensure that the fish are fed in the event of a power outage."
    },
    {
        "original": "I have a music playlist program which deals with the problem of getting used to music. It's effective because I seldom want to choose a track to play, and I don't find myself skipping a lot consecutively.I have a dedicated key for skipping (and I keep adding meta keys to make it skip more (each meta key is x2)). The next track to play is automatically selected based on the combination of two factors: being skipped less and being played less.I get to hear my whole collection in a way that's far more enjoyable than an unweighted shuffle.",
        "summary": "This music playlist program effectively allows the user to enjoy their whole collection in a more enjoyable way than an unweighted shuffle by automatically selecting the next track to play based on two factors."
    },
    {
        "original": "For fun I stitched together a map of my hometown from older fire insurance maps ( taken in 1914 ) Ironically much of the downtown area was destroyed by a fire two years later.https://www.joeycato.com/stuff/paris-texas-1914/",
        "summary": "The irony of the comment is that the downtown area of the hometown was destroyed by a fire two years after the fire insurance maps were taken."
    },
    {
        "original": "My father was an amateur historian. He used to work with a lot of pictures often of poor quality. I guess his worst was a photo of a road sign printed in a book sometime in the 70s, and then recently not even scanned but taken from a book page with a phone. So I made a tool for him that allows to undo unwanted bending and also helps with the dirt: https://github.com/akalenuk/unpager",
        "summary": "A tool was created to help with the poor quality photos that the father was working with."
    },
    {
        "original": "A bash-only issue tracker, written on a dare[1] then used for some projects.\nA laptop theft honeypot to pwn the thief[2].[1]: https://github.com/manpages/issues-legacy\n[2]: https://github.com/manpages/tar-spoon/",
        "summary": "Someone wrote a bash-only issue tracker on a dare and it was used for some projects, and then they created a laptop theft honeypot to pwn the thief."
    },
    {
        "original": "About 30 years ago I reverse-engineered my Sega Mega Drive game console and built my own hardware dev kit from scratch. I did blog about that project here:\nhttps://nestenius.se/2022/01/18/how-i-built-my-own-sega-mega...",
        "summary": "The author reverse-engineered a Sega Mega Drive game console and built their own hardware dev kit from scratch."
    },
    {
        "original": "Right now I\u2019m working on a heads up display using a pair of AR glasses and a pinephone. At the moment you just get the time and a battery level in the corner of your vision, but the interesting thing is the platform. Every hud app is just a Wayland client, and the apps get positioned absolutely on the screen by the compositor",
        "summary": "The interesting thing about this heads up display is that it uses a platform where every app is a Wayland client and the compositor positions them absolutely on the screen."
    },
    {
        "original": "I've been working on https://instellar.app. It's a SaaS product that will enable anyone to turn their own infrastructure into a PaaS without needing to hire a DevOps.I did this because I've had problems hiring DevOps (lack of resource / lack of people to hire / and kubernetes was just too complex). I decided that I need a tool let's me have my own heroku on my own infra and here we are.",
        "summary": "The idea is to create a SaaS product that will allow anyone to use their own infrastructure as a PaaS without needing to hire a DevOps, due to the difficulty of finding resources and the complexity of Kubernetes."
    },
    {
        "original": "I wrote a JS bookmark that lets me jump to the next top-level comment on HN. I use it for finding interesting conversions without having to scroll and look for the next top-level comment.It works by finding all of the comments with indent==\"0\". Then, each time the bookmark is clicked, it creates and follows a link. Each comment has a unique id so I just have to concatenate current_url + \"#\" + unique_id and follow that link.Once the script reaches the bottom, it follows the \"more comments\" link and repeats the same process.I plan to write something similar for Reddit",
        "summary": "This bookmark allows the user to quickly navigate to the next top-level comment on HN by finding all comments with indent==\"0\" and following a link with a unique id."
    },
    {
        "original": "Not really high tech, built a countdown timer with a calculator UI for quick and precise entry say 1m25s.  For the Apple Watch.  Used mostly for coookign but it\u2019s great if I need it quick.  Also built my own music app to listen to music the way I like it",
        "summary": "A countdown timer with a calculator UI was built for the Apple Watch, primarily for cooking, but it can also be used for other purposes."
    },
    {
        "original": "I'm always building random quick solutions to problems we happen upon.  In one instance, I'm gathering data for a large stream from their chat and writing ways to search and process it.  Another I'm writing renaming automation.Most recently, my partner and I were using Anki to learn country flags but found the user experience to be annoyingly over-engineered and kind of stressful.  We just wanted to be able to sit down and go through 5 flashcards while microwaving something or go through 100 in a day.  With Anki it always felt like I was messing with some algorithm if I stopped early or didn't do my required number of cards for the day.  Plus we were finding it annoying that the flash cards with Anki always seemed sorted.  If I was looking at Albania's flag and had no idea about the next one I could guess it was maybe Algeria, etc.So I built a python app that will tear open .APKG files and extract relevant information (currently, due to the file spec, it's specific to this because the notes are not consistently formatted but could be reused for whatever).  It'll unpack and rename the images based on the media file and, in the case of the country flags deck, spit out a JSON file that matches the \"challenge\" (the image) to the answer.Then I had ChatGPT build me a simple front end with HTML and Javascript for going through them at random and hosted it on one of my websites for the 2 of us to go through whenever we want.  I'm working on doing the same with top-level domains and country codes!  Turns out APKG files are a great dataset that happen to just be shoved into a somewhat over-engineered (in my opinion) file format and shoved into a software that, while great, doesn't feel conducive to casual learning where I don't have specific needs or dates the information will be come relevant. I just want to know these things not be a prisoner to them while I learn them.",
        "summary": "I built a python app to extract relevant information from .APKG files and created a simple front end with HTML and Javascript to allow casual learning of information without feeling like a prisoner to it."
    },
    {
        "original": "Back in university, a friend and I built an old-school arcade. It as a wooden chest with an old PC inside running Linux. We then got the arcade buttons and joystick for 2 players, connected to the serial port, and wrote a Linux driver to understand the presses as a keyboard. We even added a coin door that accepted quarters. At the time, I was the president of the CompSci student body. We had a room in the university, where we placed the arcade. There were some great games between classes, and it gave us some funds for random small stuff (printer toners, etc.).---Another one is https://shellshare.net. I use Linux for a while, and from time to time someone would ask my help with something. If you ever tried debugging a problem in someone's else terminal over the phone, you know how frustrating it can be. So I built it as a way to share a read-only stream of your terminal with a one-liner command.It's been a while since I used it myself, but there are some people that use it for teaching in universities.",
        "summary": "A friend and I built an old-school arcade in university which provided a great source of entertainment and funds for small items. Shellshare.net was created to make it easier to debug problems in someone else's terminal over the phone."
    },
    {
        "original": "A Bluetooth dongle for my standing desk that lets me control it from my Mac. I kept bumping the wired remote with my chair when it was mounted under the table and since it had a fat Cat5 cable, it was too ugly to have on the table.So I hooked the remote up to an oscilloscope, figured out the signals it uses and used a nRF52 dev kit plus a small custom PCB shield to be able to control it over BLE. A small toolbar utility for the Mac and it\u2019s more convenient than it\u2019s ever been.",
        "summary": "A Bluetooth dongle was created to control a standing desk from a Mac, making it more convenient than before."
    },
    {
        "original": "At work we have a perk where we can expense $x,000 a year for assorted benefits such as gym memberships, public transit tickets etc. The pain point is that you need to submit receipts for them to reimburse you, which doesn't take too long, but is a pain if you forget.I made a small service which aggregates receipts from assorted sources (usually webpages, pdfs), takes a screenshot of them, parses the information out, and uploads them automatically for reimbursement.",
        "summary": "A service has been created to make it easier to submit receipts for reimbursement of expenses up to $x,000 a year."
    },
    {
        "original": "Not for me but for my dad. He has a giant vinyl collection from his teenage years at his country cabin in Vermont.I hooked a raspberry pi zero up to it about 7-8 years ago, and streamed the audio to a custom app on an iPhone, so he could play a record and listen to it anywhere in the house or even outside while cutting wood.The hard part was making a nice vector animation of a record player that animated based on the state of the playback.",
        "summary": "A Raspberry Pi Zero was used to stream audio from a vinyl collection to an iPhone app, which featured a vector animation of a record player that changed based on the playback state."
    },
    {
        "original": "I made a custom client for the ChatGPT API, so that I can template and chain together prompts to automate content generation. I only just finished off the workflow feature to prompt chain (where one output goes into one of more prompts), but personally think its cool and has lots of applications.A little rough on the edges so probably not ready for a ShowHN yet.https://promptpro.tznc.net",
        "summary": "I created a custom client for the ChatGPT API which allows me to template and chain together prompts to automate content generation, although it is still a work in progress and not ready to be shared publicly."
    },
    {
        "original": "I built a site that visualizes continuous glucose monitor data.\nEverything is stored in your browser's database so there is no server and I (you) don't have to worry about securing or sharing your data.https://www.opencgm.com",
        "summary": "This site allows users to securely visualize their continuous glucose monitor data without the need for a server."
    },
    {
        "original": "I just made a simple sprint calendar so I could keep track of my team's big dates more effectively at work, at a glance from my phone etc.https://sprintcalendar.comMy team runs with:https://sprintcalendar.com/3-week-sprints/start-2023-03-23/r...",
        "summary": "I created a sprint calendar to easily keep track of important dates and tasks for my team on my phone."
    },
    {
        "original": "A search engine. It indexes all of my personal notes as well as my entire browsing history. Previously visited pages and notes get blended w/ google results. Makes a big difference when trying to find blogs, docs, notes on things Ive worked on previously or make random connections between notes and current questions. Of course it now needs a bottoms up rewrite in the age of vector dbs and GPT.",
        "summary": "A search engine that indexes personal notes and browsing history can help make connections between notes and current questions, but needs to be updated for the age of vector databases and GPT."
    },
    {
        "original": "I built myself a phototrap using a Raspberry Pi and a spare webcam. It was a proof of concept to demonstrate a function of a python package I developed for aesthetic analysis of images, that was presented at an international conference. The camera detects movements, and send an image to my via Telegram. \nI am now using it to take pictures of stray cats moving outside my house.",
        "summary": "I built a phototrap using a Raspberry Pi and a webcam to demonstrate a python package for aesthetic analysis of images, and now I am using it to take pictures of stray cats."
    },
    {
        "original": "In 2011 and 2012 in between jobs I wrote a few bits of software, of which- one was a SQLite3-based, all-SQL reimplementation of a subset of UName*It (an object-oriented database from the 90s meant for storing NIS/DNS/etc. data)- another was an RCU-like lock-less, very fast user-space data structure written in C, born of frustration with read-write locks in SolarisOf those the latter ended up being useful to me about 5 years later, and I still use it in production, though I originally wrote it for myself.",
        "summary": "The author wrote two pieces of software in 2011 and 2012, one of which ended up being useful to them five years later and is still in use in production."
    },
    {
        "original": "Recently, I used Zig to write a utility that runs on my NAS (ARM-based) and trawls through all directories looking for SRT subtitle files; it then cleans up these files, getting rid of any subtitles that match any of a set of patterns (such as \"Please suscribe to XXX\"). The utility does almost zero work for already-scrubbed subtitles, and only does work for new subtitles.",
        "summary": "The utility written with Zig cleans up SRT subtitle files by removing any subtitles that match certain patterns, while doing minimal work for already-scrubbed subtitles."
    },
    {
        "original": "My wife and I built our own Laser Maze for our front yard so kids could try it out on Halloween.  https://www.tiktok.com/@bobbylox/video/7163380326008425770",
        "summary": "The couple built a Laser Maze in their front yard for children to enjoy on Halloween."
    },
    {
        "original": "Not sure how interesting they are for others, but i built a few things to keep myself accountable and track progress on parts of my life I wanted to improve - small parts, but things I just kept procrastinating on.1. I built a small web app to provide a cycling routine to help me go from zero miles and overweight to riding a century (100 miles) this summer. I used to ride move frequently when I was younger and my longest ride was 87 miles with camping gear on my back. But 2 decades, a web dev job, and 2 kids later I am lucky to be able to get 10 miles per week for any consistent stretch of time. The app takes my recent riding skill and athleticism, and creates a 6 week riding 'program' for me basing itself on # of miles per day for the 6 weeks and increasing each week until the culmination of the 100 mile ride, allowing for 2 rest days each week. It isn't the most robust but it's gotten me motivated to ride this summer.2. I built a reading list tracker that I can add the books I want to read for myself and my kids. It suggests which book to read next if I can't decide. It tracks # of books to read, # completed, # of pages & hours to read (so I can see how unlikely it is that I will ever finish my list or can plan time accordingly to know through the list systematically), allows me to categorize the books, and lists them as MY reading list or a list to read with my KIDS.3. A European travel planner that I track country and city costs with, can create custom travel itineraries, which then will show actual costs for the itinerary based on the costs I am tracking/inputting for cities/countries/attractions.4. More fun for myself and friends: A soccer scores predictor game. We each follow teams and clubs from various world leagues, and pick the scores for upcoming matches. Then the app scores us based on our predictions and we have annual competitions with each other. I built this before these were as popular as they are now, and well before the likes of FanDuel/gambling sites.",
        "summary": "I built a few web apps to help me improve parts of my life and keep myself accountable."
    },
    {
        "original": "I mostly do interesting stuff on FreeBSD and its all documented in as detailed form as possible here:- https://vermaden.wordpress.com/Regards,\nvermaden",
        "summary": "Vermaden documents their interesting work on FreeBSD in detail on their blog."
    },
    {
        "original": "I have a \"icon switcher for chatGPT\".I know it has no value, but I can't stop using it.https://chrome.google.com/webstore/detail/personalized-chatg...",
        "summary": "The comment suggests that although the \"icon switcher for chatGPT\" has no value, the user is unable to stop using it."
    },
    {
        "original": "I made a vertical mouse for my wrist pain with tons of macro buttons... https://youtu.be/NjJaXvkDHfI",
        "summary": "Making a vertical mouse with macro buttons can help reduce wrist pain."
    },
    {
        "original": "I work in front-end development, and am very frustrated each time I encounter a front-end framework with auto-refresh without an easy way to disable it (looking at you, Next.js).As a result, I wrote a (Chrome only) Web extension[1], which monkey-patch the WebSocket object, so I could 'plug' or 'unplug' them by simply clicking the extension's icon.\nSo far I'm very happy with it [2], and can finally have multiple tabs of the same page without my 'reference' tab refreshing itself while I'm working on CSS.[1] https://github.com/MarcMonchablon/toggle-hmr[2] It gets the job done, even if in some case (such as the Zola static site generator), where I had to put the link to the plugin's code in the index.html, otherwise the code would be injected too late.",
        "summary": "I wrote a Web extension to disable auto-refresh in front-end frameworks, which has been successful in allowing me to have multiple tabs of the same page without my 'reference' tab refreshing itself."
    },
    {
        "original": "I\u2019ve built https://www.plaasma.co/ to track the following activities of a group of people on Twitter (AI people, smart VCs, popular thinkers, etc.). That let me discovered new people, companies and tech projects to know about. \nOnly few friends are using it! I\u2019m definitively the most active user!",
        "summary": "The author has created a platform to track the activities of a group of people on Twitter, but only a few people are using it and the author is the most active user."
    },
    {
        "original": "I wrote some js to take a textfile list of events with start/end dates and lay them out on a timeline. Nothing fancy, just a way to visualise time using a simple, human-readable and -writeable text file as the source.",
        "summary": "This comment describes a JavaScript program that creates a timeline visualization from a text file containing start and end dates."
    },
    {
        "original": "Nothing special from me. Just a small app (https://how-you-spell.in/) that translates a word to the phonetic alphabet. My full name is quite long and I\u2019m always struggling to spell my details over the phone.",
        "summary": "The app helps people to spell out their long names over the phone using the phonetic alphabet."
    },
    {
        "original": "Built my own app for tracking my exercises using a phone arm band, the gyro, accelerometer, and the camera to create a model for rep counting and tempo. I got tired of the mental effort of counting reps. This graphs the strongest signal using an fft and some custom algo to determine the best signal to use. Works pretty well and backs up my own internal count. I promised myself I would only build it for me so I would actually build it as opposed to getting a mental block by building it for others.My long term vision was to open it up to others and mine the data to determine what the ideal weight, tempo, resting period, and exercises were for a particular body type. I'm just a little too ADHD to commit to it and keep a day job.https://swolereport.com/",
        "summary": "I built an app to track my exercises using sensors and the camera, and I had a long-term vision to open it up to others, but I am too distracted to commit to it."
    },
    {
        "original": "Built some systems, simulations, universes, automata or whatever you'd like to call them.https://github.com/churchofthought/HexagonalComplexAutomatahttps://github.com/churchofthought/ScatterLifeWas working on a new one based off of Gerard Hooft's beable theory, a superdeterminism of sorts.But then WebGL 2.0 Beta got replaced by WebGPU. So it doesn't run anymore:\nhttps://github.com/churchofthought/GrautamatonBut here is a video of it used for a non-abelian sandpile system, when Google Chrome Beta could run it:https://photos.app.goo.gl/NE1XU1tcdKS4ySLa9and the resultant \"cooled\" equilibrium universe: https://photos.app.goo.gl/dn5jpUW9y3JMrxJi6",
        "summary": "The author was working on a new system based on Gerard Hooft's beable theory, but it was rendered obsolete by the introduction of WebGPU."
    },
    {
        "original": "I realised I have quite a few random scripts I use for myself or to improve my usual workflow. Recently decided to start blogging again and figured some of them might make interesting reading for others. Lately:Made my monitor an \"ambient tv\" by reverse engineering the bluelooth lights and sending them pixel colours: https://www.reaminated.com/reverse-engineer-led-to-convert-m...I also wanted to use ChatGPT over my own files and documents. Whilst my personal system is a bit more complex, created an end-to-end tutorial of my learnings to get started with using your own docs: https://www.reaminated.com/run-chatgpt-style-questions-over-...",
        "summary": "I have created tutorials to share my learnings on how to use scripts to improve workflow and use ChatGPT over personal files and documents."
    },
    {
        "original": "not sure how interesting but definitely useful :D I like to listen to Albums and I missed the \"Give me a random album from my collection\" functionality in Spotify so built a tiny webapp to do exactly that - https://shuffle.ninja.It uses the Spotify web APIs to fetch your album collection and gives back a random album from it. I use it daily.",
        "summary": "The author built a webapp called \"Shuffle.Ninja\" to randomly select an album from their Spotify collection, which they use daily."
    },
    {
        "original": "I'm a credit card point junkie so I always volunteer to pay the bill at dinner or drinks. But, if everyone doesn't get roughly the same thing, it becomes a massive headache. I got fed up with having to manually tally up what everyone ordered and then hunting them down individually to get paid back.Surprisingly, I haven't found a good tool that addresses this, so I spun up my own. I didn't want to force my friends to download another app just so I can get paid back so I tried to make it mostly SMS based.You text a picture of the receipt to my Twilio phone number. It triggers a serverless function that runs AWS Textract to itemize the receipt, then stores it in a database. Twilio responds with the unique URL for the receipt and I can text that out to my friends so they can claim their own damn items.Win win, I get the points AND I finally get paid back.",
        "summary": "The comment summarises the process of creating a tool to simplify the process of manually tallying up and getting paid back for items purchased at dinner or drinks."
    },
    {
        "original": "6groups.com:A fully featured group calendar that I use for myselfA collaborative organigram maker that I use for my kids classA collaborative family tree maker that my distant and close family alike use to document every detail until (as of today) 1776",
        "summary": "6groups.com provides a range of collaborative tools for personal and family use, including a group calendar, organigram maker and family tree maker."
    },
    {
        "original": "I made a personal website [1] that aggregates my notifications from GitHub and Gerrit in one stream. It updates in real-time without me needing to refresh the page.It also hosts a small set of personal Go packages. For this, it implements a git server, module proxy protocol, issue tracker and change tracker. At some point, I want to differentiate the code review UI with nice-to-haves specific to Go, but haven\u2019t gotten there yet.I\u2019m playing around with compiling the whole thing (written in Go, of course) to WebAssembly that runs client-side, along with server-side rendering for the initial page load. This is mostly to make iteration easier and faster for me.It also lets people leave comments or reactions to blog posts and such by signing in via a URL rather than username+password.[1] https://dmitri.shuralyov.com",
        "summary": "I created a personal website that aggregates notifications from GitHub and Gerrit, hosts personal Go packages, and is experimenting with compiling to WebAssembly for faster iteration."
    },
    {
        "original": "I live in a Hurricane/Typhoon zone and wanted a way to watch storm live status without all the panicked commentary. I had an old Chromecast laying around and discovered that it is just a web browser so I built a simple html image bouncer that auto refreshes the latest satellite image of the storm, lets you crop in, etc. It works amazingly well for days of peaceful live coverage. An unexpected side perk is my kids can now tell the category (strength) of the storm based purely on the satellite image.\n Turns out the code works for pretty much anything with a browser and any situation where there is an updating image at a static URL. So I\u2019ve used it for a number of other things too. I put it all at https://github.com/antgiant/GOES-East-Big-Screen",
        "summary": "A Chromecast can be used to create a simple html image bouncer that auto refreshes the latest satellite image of a storm, allowing viewers to observe the storm live status and determine its strength."
    },
    {
        "original": "I built a pipeline to go from a novel file in Apple Pages to finished Kindle Book and PDFs in various sizes, both with proper scene breaks, etc.",
        "summary": "A pipeline was created to convert a novel file into a Kindle Book and PDFs with scene breaks."
    },
    {
        "original": "I wrote a few things I use all the time.1. A youtube bookmark manager for Emacs using Sqlite as a back end.\n   - You can keep track of individual videos.\n   - Manage series that span multiple videos.\n   - remember interesting moments.2. A system to help manage my finances by tracking what percent of my assets are in a given category.  This helps with maintaining, say, a 60%-40% stock vs bond split across multiple financial institutions.",
        "summary": "The comment describes two projects that help with organization and managing finances."
    },
    {
        "original": "I made a thingy that receives pictures of the earth from a geostationary satellite: https://gist.github.com/lxe/c1756ca659c3b78414149a3ea723eae2",
        "summary": "I created a program that can receive images from a geostationary satellite."
    },
    {
        "original": "An automated scrapper for all my bank accounts, 401k accounts, and share accounts, and bitcoin values. Then displays it daily",
        "summary": "An automated scrapper can be used to track financial information from multiple accounts and display it daily."
    },
    {
        "original": "I'm using ChatGPT to build a note taking app just for myself. Haven't completed it yet but plan to open source it once it is done.",
        "summary": "The speaker is using ChatGPT to create a personal note taking app which they plan to open source once it is completed."
    },
    {
        "original": "About yen years ago, I built a site that scraped Steam and spat out the ~100 most recently-released games in a skimmable format: http://www.whatsonsteam.comThere's a lot of weirdness that launches each day, but also lots of interesting-looking stuff.",
        "summary": "The website \"What's On Steam\" provides a skimmable format of the most recently released games on Steam, which can help users find interesting games."
    },
    {
        "original": "I made my first browser extension to allow you to download substack video and view them using mp4 format instead of hsl streams.https://chrome.google.com/webstore/detail/substack-video-dl/...https://addons.mozilla.org/en-US/firefox/addon/substack-vide...",
        "summary": "The browser extension allows users to download Substack videos and view them in MP4 format instead of HSL streams."
    },
    {
        "original": "I made a text-only social network for the Gemini network and it recently surpassed 1k users: https://martinrue.com/station",
        "summary": "The text-only social network for the Gemini network created by Martin Rue has recently surpassed 1,000 users."
    },
    {
        "original": "My robotic graduation caps for my undergrad (2015) and PhD (2022) ceremonies:https://psychomugs.github.io/gradcapMy wrist-mounted Spider-Man-inspired coilgun:https://psychomugs.github.io/webshooter",
        "summary": "Psychomugs has created robotic graduation caps and a wrist-mounted Spider-Man-inspired coilgun."
    },
    {
        "original": "To be fair, I'm trying to turn it into a public product since I think the use-case isn't very niche.I've recently started building https://responsebrain.com where I can add all my blog articles and automatically let ChatGPT generate responses to questions about my other product https://webtoapp.designIt's a pretty basic setup with a knowledge base you can feed anything you want (your blog articles, help center etc.). That gets put into a vector database and then I pass the related knowledge pieces to GPT along with the question.I know there's lots of similar products out there, but none of them seem to allow manual editing of your knowledge base and they all seem to be focused on creating chatbots. I've adjusted the prompts to work best for e-mails.",
        "summary": "I am creating a product that allows manual editing of a knowledge base and is focused on creating e-mail responses, rather than chatbots."
    },
    {
        "original": "I built a web extension that lets me use customised bangs when searching (similar to duckduckgo but fully editable to search whatever you want), makes my regular searches much quicker\nhttps://github.com/psidex/CustomBangSearch",
        "summary": "A web extension has been created to allow users to customise their searches for faster results."
    },
    {
        "original": "Ported X11 to iOShttps://maxleiter.com/blog/X11",
        "summary": "The comment describes the successful porting of X11 to iOS."
    },
    {
        "original": "I created an app for my phone so I can track my kit rocket as it descends under parachute. As far as I know this is the first app for android that predicts landing locations. I couldn't find one previously.https://github.com/parchedpacha/LandingPredictApp",
        "summary": "This app is the first Android app that predicts landing locations for kit rockets."
    },
    {
        "original": "I always loved listening to music. However, the past few years I started more actively exploring new (old) music around the world and actually listening to whole albums. (I'm always amazed by the vast amount of good music that exists out there, waiting to be discovered and experienced)I've a few friends that have the same itch and so we were constantly exchanging recommendations via different communication channels (Signal, email, Slack etc.)So I started building a website that's \"like Goodreads, but for music releases\". You can mark albums as \"want to listen\", \"listened\" and \"dig\" (loved), organizing your lists with tags and notes and share them with others. You then have a public activity profile and you can add other users as friends and see their own activity.Original Show HN post: https://news.ycombinator.com/item?id=32551862",
        "summary": "I created a website to help people discover and share music recommendations with friends."
    },
    {
        "original": "I fixed the go*amn toilet. Not so cool but super effective.",
        "summary": "Fixing the toilet was effective, but not enjoyable."
    },
    {
        "original": "I built a Chrome Extension called Bookee (https://onassar.github.io/extensions/bookee/) (https://chrome.google.com/webstore/detail/bookee-instant-boo...)Not used by many people, but accomplished what I set out to: an extension that is accessible easily via keyboard shortcut at all times, that allows me to visually (open graph images, screenshots, thumbnails) search any bookmarks saved to Chrome.The search is super-quick, and it has a bunch of other keyboard-shortcuts to quickly navigate my bookmarks.",
        "summary": "I created a Chrome Extension called Bookee which is accessible via keyboard shortcut and allows users to quickly search and navigate their bookmarks with a variety of keyboard shortcuts."
    },
    {
        "original": "As a College student I used to read lot of programming medium articles in my android phone but the app won't let me access to their premium articles without paying, so I have built an android app that let's me to read the premium articles for free. This was the times when I was very new to kotlin and to Android development and had fun building this simple app \"mediumizer\". I shared this with my friends and they loved it as well.Mediumizer: https://play.google.com/store/apps/details?id=com.asanam.med...\ngithub: https://github.com/Cool-fire/Mediumizer",
        "summary": "The speaker built an Android app called \"Mediumizer\" to allow them and their friends to access premium articles for free."
    },
    {
        "original": "I made a pomodoro timer display using a WiFi-connected ESP32 board with a small OLED display. I put it outside the guest bedroom/home office door during lockdown so my family members could see how long until I could be disturbed.It talked to my laptop using MQTT and of course it was triggered from emacs using org-pomodoro.",
        "summary": "A WiFi-connected ESP32 board with a small OLED display was used to create a pomodoro timer display outside a guest bedroom/home office door to indicate when family members could disturb the user, which was triggered from emacs using org-pomodoro."
    },
    {
        "original": "I use a command line browser (lynx) to log into my bank account and scrape my data because APIs are not coming to town any time soon. I actually use Lynx to scrape a bunch of different things. Much easier than trying to log into a site using CURL etc.",
        "summary": "Using Lynx is an easier way to scrape data than using CURL when APIs are not available."
    },
    {
        "original": "I built https://pinggy.io for myself initially. But after some years I thought others might also find it useful.It gives me \"instant\" public URLs to localhost without any downloads/configs. I use to to quickly send files, share and check frontend on my mobile device.",
        "summary": "Pinggy.io is a tool that provides users with instant public URLs to localhost without any downloads or configurations, allowing them to quickly send files, share, and check frontend on their mobile device."
    },
    {
        "original": "Because I work with a lot of currencies and I used to do a lot of multi-currency calculations, I\u2019ve built a convertor (https://4ex.ro) that accepts formulas and displays the results in all selected currencies. The rate is the one offered by the National Bank in Romania (a legal requirement for transactions that happen between companies in Romania - maybe I\u2019ll add different data sources in the future). Oh, and you can add a formula in one field and then continue in another field using the previous result. Something really easy to accomplish, but there was no solution doing this a few years ago. Almost nobody is using it, but I do and this is a sufficient reason to keep it (a)live.",
        "summary": "The author has created a currency convertor which allows users to input formulas and view the results in multiple currencies, and has kept it running despite low usage."
    },
    {
        "original": "Re-implemnted a version of the old unix `who`, `last`, and `finger` command line tools that works across most of the whole infra of the company I work for. Planning to add more APIs for it for different systems to aggregate up into it. (AD, EDRs, Splunk, etc.)I was a sysadmin for a dialup ISPs with a shell server in the mid 90's and people today have no idea how good we had it back then. An entire userbase accessible from a single shell prompt and a few commands instead of todays gamified web UXs with 3D graphics. Security was terrible back then, but the UX was calm, so I re-built that experience over everything.",
        "summary": "The author has re-implemented a version of the old Unix command line tools to work across their company's infrastructure, with plans to add more APIs for different systems."
    },
    {
        "original": "md2blog: creates a tiny (a few kilobytes per page, with no JavaScript) blog from Markdown files, with two features that I couldn\u2019t find elsewhere:* Links between Markdown files \u201cjust work\u201d (both when viewing the Markdown source on GitHub and in the final HTML version of the site), including anchors* Posts are automatically tagged based on directory structure (e.g. all files in \u201cposts/linux\u201d are tagged with \u201clinux\u201d)Bonus: my entire site hot-rebuilds on my 12 year-old netbook in under a second (with a few tweaks that I should probably publish a new build for).https://jaredkrinke.github.io/md2blog/",
        "summary": "md2blog creates a blog from Markdown files with features such as links between Markdown files and automatic tagging based on directory structure, and can be quickly rebuilt on an old netbook."
    },
    {
        "original": "Hey! I am building a sailing simulator built on my own openGL engine. See this:\nhttps://archipelagosim.com/",
        "summary": "The comment is about building a sailing simulator using an OpenGL engine."
    },
    {
        "original": "I have a very basic \"content repository\" that started out as an RSS reader and now has pocket/instapaper like link saving, notetaking and basic GPT integrations (summary for rss entries/saved links + chatgpt like interface since it's now blocked in italy and it sounded fun to reimplement it).It's been fun having a project where i can just throw in stuff i want to learn (started out as a go + go templates app, then turned into go backend + vue frontend from scratch, now go + vue with vuetify) and where i can just implement features i want (pocket import for saved links, gpt stuff, linking between notes and saved links/rss entries, ...) that are extremely specific to my use case and thus hard to find in anything else.",
        "summary": "This comment describes a project that has been customised to the user's needs, with features such as RSS reader, link saving, notetaking and GPT integrations, and has been used as a learning experience."
    },
    {
        "original": "I made a visual programming / node editor environment similar to TouchDesigner, vvvv, Unreal Blueprints, etc, on top of Unity: https://www.youtube.com/watch?v=KyDpnzfSg_oIt was originally created to drive a particular large LED installation I work on, but I've generalized it to the point of being able to drive other installations as well. It passes texture data between nodes running compute shaders to chain together patterns/effects, which is a fun and powerful paradigm for creating visuals. Not as powerful or featureful as \"real\" solutions like TouchDesigner, (which, if I'd known about when starting out, I probably would have just used), but I do know all its ins and outs and can change it exactly how I want, which is nice.",
        "summary": "A node editor environment was created on top of Unity to drive a large LED installation, and it has been generalised to be able to drive other installations as well."
    },
    {
        "original": "I did not join social media until very recently but wanted an easy way to send pictures to close friends and family so built this small python script that sends N pics out of a text file list (so if even if I sort 100 in one day I only send 5 per batch) sends one pic per email, reduce the size of the pics, sets a custom from field, hide the recipients' addresses in the BCC field.https://github.com/dorfsmay/emailFilesThere's nothing extraordinary about it, it's not far from a standard spam bot! What's interesting about it is that I've been using it for more than a decade with fairly little maintenance.",
        "summary": "This python script sends a batch of pictures to close friends and family via email, reducing the size of the pictures and hiding the recipients' addresses in the BCC field, and has been used for over a decade with minimal maintenance."
    },
    {
        "original": "I build my personnal search engine which record things I like on twitter, blog posts etc.. It automatically calls those APIs using Github Action and store them in an open source database (json file)I actualy use it at least twice a week to retrieve content I bookmarked, so I'm happy to have created such a tool.The app:\nhttps://raphaelsty.github.io/knowledge/?query=bayesianThe Github:\nhttps://github.com/raphaelsty/knowledge",
        "summary": "The author has created a personal search engine which uses Github Action to call APIs and store content in an open source database, which they use at least twice a week."
    },
    {
        "original": "Some developer tools that spun out of my current product (but not launched thus counts as \"built for myself\" and nowadays \"ourselves\"):- A build system that is simpler and easier to use than Gradle. It also has a much better rendering of progress and output for tests when they fail. I mostly use it to run tests, actually. Supports parallel incremental and cached work.- A Kotlin Scripting runtime that exposes a high-level UNIX shell-like API along with many other useful utilities like printing markdown, tracking progress of long operations (including hierarchically), working with files and remote programs over ssh and many other things. We have almost entirely replaced bash with it.",
        "summary": "The developer tools built for the current product are simpler and easier to use than Gradle, and provide a high-level UNIX shell-like API along with many other useful utilities."
    },
    {
        "original": "I had phone that could run J2ME but did not have Internet.I reverse engineered a flash application that showed a map and provided address search. I scraped the map tiles and address to location database. Reimplemented the viewer application as a Java applet and preloaded the tiles and address database to a microSD card connected to the phone. So essentially I built my own offline maps for my not internet connected phone.Address search required prefix tree because IO was too slow to use binary search on the phone.Anyway this was done just before I went to a new city to attend university and it was really helpful to find out where I am and where to go. There was no navigation, but it showed the map, gps location and the location where I needed to get to.So that was my personal project that really had great utility for me.",
        "summary": "I reverse engineered a flash application to create an offline map with address search for my not internet connected phone, which was very useful for me when I moved to a new city."
    },
    {
        "original": "My friends and I used to watch movies almost every night online during COVID and to decide on the movie I created a polling website that pulls information from TMDB. It was really useful because we could see the movie description, genre and length right there while voting instead of having to google for every movie title. I planned on adding new voting methods as well instead of majority vote like ranked voting, a movie randomizer that the chance a movie wins is based on how many votes it has and others. Unfortunately, we no longer watch that many movies together so the incentive to add those features decreased.",
        "summary": "Creating a polling website to decide on movies to watch together was useful during COVID, but the incentive to add new features decreased when the group stopped watching movies together."
    },
    {
        "original": "Lots of things over the last decade or two. I can count almost one hundred repos on GitHub, but most of them are not very popular with other people, my projects seem to only scratch my own itches..I have my own lunisolar calendar and decimal time (with centidays and dimidays) so I produced a lot of code for that on various devices. I also wrote two chess engines and a hobby operating system.And countless web apps, like one to read the daily/monthly top of HN and Reddit, another to host my pictures (on a cool domain hack), one to manage the batch jobs on my chess engine cluster in a rack at home that helps keeping the house warm in winter, and lately my own frontend to Bing API because I was growing dissatisfied with DuckDuckGo.",
        "summary": "The author has created a variety of projects over the last decade or two, ranging from a lunisolar calendar and decimal time to chess engines and web apps."
    },
    {
        "original": "I needed to build a Wordpress site for user docs for a company last year. Couldn\u2019t find a good solution :(I created a React based version of Wordpress for developers.I turned it into an open source framework so that other people can use my work and build on top of it. It comes baked with Next.js, Tailwind, and a bunch more.It\u2019s currently a work in progress, but I\u2019ve been receiving great feedback from the dev community.https://www.elegantframework.com/https://github.com/elegantframework/elegant-cli",
        "summary": "I created an open source React-based framework called Elegant Framework to help other developers build Wordpress sites for user docs, which comes with Next.js, Tailwind, and more."
    },
    {
        "original": "I believe tech has passed down inefficient solutions that represented the best solution given the hardware constraints of the time. For this reason, I began rebuilding my web stack.Deployed applications:Analytics, Object Database, and WAF.Deploying shortly:WSGI app and templating system.",
        "summary": "The author believes that technology has become outdated and is rebuilding their web stack with Analytics, Object Database, WAF, WSGI app, and a templating system."
    },
    {
        "original": "Midi controller that snaps on to my trumpet. Made from a tiny drone remote control with a replaced \"brain\" and new housing.\nhttps://i.imgur.com/oYFOBNv.jpegAnd an app that records audio retroactively. Wanted to have recorded the last 2 minutes? just tell it \"-2m\". It has a ring buffer that buffers the last 2h, but also forgets all the time. (at least that was the plan, but audio streams were so much more difficult so I just dumped a full day of audio and timestamps and cut it later. That makes it much more \"eavesdropping\" again though which I wanted to avoid with the auto delete though....)",
        "summary": "A midi controller has been created from a drone remote control with a replaced \"brain\" and new housing, and an app that records audio retroactively with a ring buffer that buffers the last 2h."
    },
    {
        "original": "A simple script that tallies up my cycling mileage based on Garmin activites, and makes me a reminder on my Google calendar when it's time to re-wax my chain.Scheduling the script to reliably run via Task Scheduler (Windows) was was its own project!",
        "summary": "Creating a script to track cycling mileage and remind the user to re-wax their chain was a complex project."
    },
    {
        "original": "After pushing to a branch, gitlab sends you back a URL where you can create the merge request (MR). This broke my flow because I do all my development using command line tools.So I created this tool that opens an MR off the branch I'm on. It opens up my favorite editor and asks me for a title and a description in the same way that git does for commits. It splits it in first line for title and the rest for the body.It's very simple but I'm very happy with it. Now I extended it to list the open MRs, show the tickets in the current sprint, etc...Nobody else in my company uses it tbh, but I don't care because it solves _my_ problem and I love it.",
        "summary": "This comment highlights the development of a tool to solve the problem of creating merge requests from the command line, which has been extended to list open MRs and show tickets in the current sprint."
    },
    {
        "original": "I used a Raspberry Pi with a Hifi-berry card to make a web-controlled MP3 player hooked up to my stereo. It's a fairly bare-bones app but I wrote it myself (Flask, VLC) and it works great!",
        "summary": "A Raspberry Pi with a Hifi-berry card was used to create a web-controlled MP3 player connected to a stereo, written in Flask and VLC, which works well."
    },
    {
        "original": "Currently working on building a virtual art gallery populated with fictitious works from dead artists generated by Stable Diffusion. Users in the same room can talk to each other using WebRTC.",
        "summary": "This comment describes a virtual art gallery that uses Stable Diffusion to generate fictitious works from dead artists, and allows users to communicate with each other using WebRTC."
    },
    {
        "original": "This wasn\u2019t terribly hard, but I built https://seattle-movies.innocence.com/ because I really wanted an aggregate indie movie theater calendar. Then I added an RSS feed cause someone asked for it. It has vastly improved my quality of life around movies!(I\u2019m a hack but the code is as general purpose and adaptable as I could make it, just in case someone wants to use it for another city.)",
        "summary": "Creating an aggregate indie movie theater calendar and RSS feed has vastly improved the author's quality of life."
    },
    {
        "original": "An admin panel (time & project management) for my startup.Time & project management software are expensive, and prices per user, and mine is $0 for all.",
        "summary": "The admin panel for the startup is free for all users."
    },
    {
        "original": "I built a Chess training app called SpicyChess(https://spicychess.com) that leverages spaced repetition and strict time constraint to increase your pattern recognition ability for tactical motifs. SpicyChess also allows you to \"bookmark\" a puzzle for review later on.It's not the most interesting tech I built but it's the most recent one and checks the features wish-list I've had when using other tactics training apps.",
        "summary": "The app SpicyChess uses spaced repetition and strict time constraints to improve pattern recognition for tactical motifs, and allows users to bookmark puzzles for review."
    },
    {
        "original": "I built https://crushentropy.com/ one weekend and I've been using it to plan my day ever since",
        "summary": "I created a website to help me plan my day and have been using it regularly since."
    },
    {
        "original": "I built my blog around fedora's extra nice pandoc markdown to htmlhttps://gigatexal.blog/pages/building-a-blog-from-scratch/bu...https://gigatexal.blog/pages/blog-update-1/blog-update-1.htm...It's not very fancy but it is for me. I know next to nothing about web/html and I wanted to do something myself than going with the really good ghost or other static blogging tools.",
        "summary": "The author built their blog from scratch using Fedora's Pandoc Markdown to HTML, despite having limited knowledge of web/HTML, instead of using a pre-existing static blogging tool."
    },
    {
        "original": "Pretty simple but saved me a lot of time: using Twilio, Google maps API, and PythonAnywhere I would send myself a text if my normal route to work would take >n minutes.",
        "summary": "Using Twilio, Google Maps API, and PythonAnywhere, I was able to create a system that sends me a text if my normal route to work would take more than a certain amount of time."
    },
    {
        "original": "I made a robot location tracking system specifically for use on the carpet at my office.The carpet was an arrangement of 4 particular colors tiled in squares, so I manually made a carpet map (a few hours in excel!), wrote a carpet color classifier to run from under-robot camera data, then integrated with a particle filter for location tracking. Write up is here:https://github.com/tim-fan/carpet_localisation/wiki/Carpet-L...I wrote it only ever expecting usage in this particular office, but if anyone has a similar carpet and a robot that needs localizing, please reach out!",
        "summary": "A robot location tracking system was created specifically for use on a carpet with a particular color arrangement, and is available for use by others with similar carpets."
    },
    {
        "original": "Realtime, full-resolution satellite imagery, globally.https://satview.skysight.io",
        "summary": "Realtime, full-resolution satellite imagery is available globally through satview.skysight.io."
    },
    {
        "original": "I built https://maphoto.app/ . Is a simple tool that allows you to add a mini-map on your picture. I used python and expressjs.",
        "summary": "I created a tool called MapPhoto which uses Python and ExpressJS to add a mini-map to pictures."
    },
    {
        "original": "Does it count if you've built something for yourself that is now becoming an actual business?If yes, then I started building a hand tracking based VR workout app back in 2019 using GodotEngine to get myself a bit of extra motivation to exercise at home.In the meantime it's become an official app but I am still using it for myself very intensively ( unfortunately no longer using Godot )https://app.xrworkout.io",
        "summary": "The comment suggests that the speaker has built a hand tracking based VR workout app using GodotEngine which has since become an official app, but they still use it for themselves."
    },
    {
        "original": "I recently constructed a compact compost freezer. In San Francisco, we have a municipal compost collection service that picks up large bins from the curb. However, using a smaller container on the countertop often results in unpleasant odors, flies, and torn, soggy bags. My (now) wife introduced me to the idea of storing a small compost bag in our freezer, which solved these issues but consumed valuable freezer space. To address this, I designed a mini freezer with the form factor of a small floor trash can, featuring a foot-operated lid.",
        "summary": "The author designed a mini freezer to address the issue of unpleasant odors, flies, and torn, soggy bags when using a smaller container on the countertop for compost collection."
    },
    {
        "original": "Not really that high-tech or that interesting, but I've made a firefox add-on that sorts YouTube video tabs by duration. Recently I realized that someone else actually uses it too (he left a review), so I got motivated to patch it",
        "summary": "Someone else using the Firefox add-on motivated the creator to patch it."
    },
    {
        "original": "In highschool a friend and I build a multiplication circuit based on an AMV serving as clock frequency driver, pushing binary numbers A and B through an addition circuit and a latch producing the result A*B.We freaked out when we were able to increase the frequency from 1Hz where we visually could see the calculation proceed via LEDs, to thousands of Hz and \"instant\" calculation.We had to physically hit the manual begin-switch with great force, in order to prevent the switch from not going cleanly from 0 to control voltage, when we operated in the KHz clock frequencies.",
        "summary": "Two friends built a multiplication circuit using an AMV as a clock frequency driver and were able to increase the frequency to thousands of Hz, but had to hit the manual begin-switch with great force to prevent it from not going cleanly from 0 to control voltage."
    },
    {
        "original": "Awhile ago I made an remote infrared sending tool so a raspberry pi can control my A/C unithttps://blog.bschwind.com/2016/05/29/sending-infrared-comman...Since then I made a much slimmer, cheaper, more efficient version based on the ESP32 but I haven't written up much about that.I also created my own keyboard with firmware in Rusthttps://github.com/bschwind/key-ripperI've done a bunch of other small one-off projects too.",
        "summary": "The author has created multiple projects, including a remote infrared sending tool and a keyboard with firmware in Rust."
    },
    {
        "original": "In 2010 I was at my first job out of college and frustrated that iTunes took over such a huge amount of resources on my PC. But I loved the UI look and function and the way it had playlists, and didn't like the other options on the market. So I hired a cheap overseas freelancer to build \"Litetunes\", which I requested look and function exactly like iTunes but be <2MB file with no installation required that would open quickly just like notepad or calculator. I thought of distributing it but ended up using it just for myself, it worked great.",
        "summary": "The author created their own version of iTunes, called \"Litetunes\", which was lightweight and did not require installation, in order to address their frustrations with the resource-heavy nature of the original."
    },
    {
        "original": "I built some groundbreaking technology to make it easier to browse torrents on the RARBG website.https://greasyfork.org/en/scripts/36751-rarbg",
        "summary": "The technology created makes it easier to browse torrents on the RARBG website."
    },
    {
        "original": "I made a password manager in Rust. It just encrypts and decrypts a file from/to ~/passwords.txt <-> ~/passwords.ryp (the encrypted form). Because the the file names are fixed it's easy to use. Just type:rypIf ~/passwords.txt is there, it will be encrypted. If ~/passwords.ryp is there, it will be decrypted.The cool feature is that it checks to make sure that the password you typed in the nth time you encrypt it is the same as the 1st time. This protects you from inadvertently encrypting it with a typo if you check/update your passwords many times.",
        "summary": "The password manager created in Rust encrypts and decrypts a file, and also checks to make sure that the password used is the same each time it is encrypted."
    },
    {
        "original": "not excessively impressive but I built a few fun webextensions that I had an itch for.The ones I use daily or almost daily:a simple, scanable tab manager that lists all the tabs over all your windows in one list. you can close tabs via middle clicking them and bring the tab you want into the forefront by clicking on it.an extension that captures capslock and a/d to cycle focus from one tab to the left or rightan extension that opens up a folder of bookmarks a few bookmarks at a time via a right click menu optionan extension to change the speed of a youtube video by having - + buttons at the bottom of the page overlaid and also tells you the current speed of the video.an extension that made a few quality of life tweaks to the apple development docs.a theme extension that fits what i want the browser to look like.I have some others but these are the most useful to meIn meatspace, I built a fan box that hangs at the top of my window facing out so it can take the hot air from the ceiling and push it out while a fan at the bottom of the window pushes cool outside air in.",
        "summary": "I built a few web extensions to make my browsing experience more efficient and enjoyable, as well as a fan box to improve air circulation in my room."
    },
    {
        "original": "Over the past 3 years, I've been building \"FreeCRT\", a 24/7 Twitch streaming setup dedicated to casual Smash matches. Since I don't have a coding background, I used Node-RED to create custom flows that help manage the stream by connecting a MSI Gaming Laptop, Intel NUC, and Raspberry Pi 4. OCR and Node-RED extract text from the switch, while performing arena error logic, which connects to the Raspberry Pi to run macros to reset the open arena if it's closed. I just recently whipped up a Twitch Chatbot called FreeGPT that hosts the arena anytime. I've built it up slowly but it's been such a fun long term project.",
        "summary": "The author has created a 24/7 Twitch streaming setup called \"FreeCRT\" using Node-RED, OCR, and a Raspberry Pi 4 to manage the stream and host the arena."
    },
    {
        "original": "My dad wanted a analysis tool for Flight Sim, ended up having to build one himself that tracks flights then generates loads of reports and maps for you. The map shows you landmarks you flew over  with short descriptions, a 3D model of the flight, various charts describing things like glidescope, GForces, speed, pitch/yaw and a bunch of other stuff like runway alignment. He spent so much time that he decided to make a product out of it that's doing quite well: https://myfs.flights",
        "summary": "My dad created a successful analysis tool for Flight Sim which tracks flights, generates reports and maps, and provides 3D models, charts, and other information."
    },
    {
        "original": "I wrote http://idaweather.com to get a better understanding of the local weather where I have a hobby farm.It's mostly a toy but it has given me great insight into local weather patterns.",
        "summary": "The website \"idaweather.com\" has provided the author with valuable insight into local weather patterns."
    },
    {
        "original": "I created an AI foot generator. Whenever I had someone take a photo of me, they would often cut off my foot. My program would generate an artificial foot for the photo. To be honest, it had some hilariously bad results sometimes.",
        "summary": "The AI foot generator created by the speaker had some amusingly poor results."
    },
    {
        "original": "I built an opinionated RSS/website reader - https://lenns.io. Everyone can register and use it, but it's built based on my requirements and vision only. Yet, I believe it could be useful to others, and that's why I made it open for everyone to use.",
        "summary": "I created an RSS/website reader tailored to my own requirements and vision, but open for anyone to use."
    },
    {
        "original": "Not yet built, but in my TODO list:\nA mango pi mq-pro, a custom written 100% risc-v 64bits assembly firmware, plate-mounted cherry switches (probably silent red, or black), lovely PBT key caps, laser cutted aluminium plates, diodes, a bit of electric wiring and:https://external-preview.redd.it/AxGrpEpxqpATGsX7MwsoSRrD2ie...",
        "summary": "The author plans to build a custom keyboard with a RISC-V 64-bit assembly firmware, plate-mounted cherry switches, PBT key caps, laser-cut aluminium plates, diodes, and electric wiring."
    },
    {
        "original": "I built a simple software that generates immersion of artist studios.\nExample (please refresh twice to visit) here:\nhttps://free-visit.net/fr/demo01- Why ?\nAs a parisian living in Belleville (poorest area), where artistes\nbuild things, I used to visit a lot of \"artists studios\". I have always loved this places. \"J'aurai voulu \u00eatre un artiste\", in a way.\nI always thought that no photography or 360-photo would feel the\nSpace, the immersive feeling.",
        "summary": "I created a software that generates an immersive experience of artist studios."
    },
    {
        "original": "I built a terminal-based gpt client for myself. It uses a sqlite db to store conversations and uses bubbletea for terminal drawing. I use it frequently while I'm writing code. It uses another library to render markdown so that code snippets gpt produces look pretty. It's not perfect by any stretch but it feels great to use it because I made it. https://github.com/collinvandyck/gpterm/",
        "summary": "I created a terminal-based GPT client that uses a SQLite database, BubbleTea for terminal drawing, and another library to render markdown, which I use frequently and feel great about."
    },
    {
        "original": "This Speak & Spell simulator: https://sha.nnoncarey.com/The only one I've found that's as accurate is the emulated version at https://archive.org/details/hh_snspell But mine also has two expansion modules to choose from :)",
        "summary": "This Speak & Spell simulator has two expansion modules and is as accurate as the emulated version at https://archive.org/details/hh_snspell."
    },
    {
        "original": "As a data engineer who is looking to leave a toxic workplace behind, I built a data streaming application to surface new dataeng jobs being posted on ATSes (Applicant Tracking Systems). There is a constant stream of new JDs being posted, which fans out to a bunch of RSS/Atom feeds for combinations of skillset and location. Most startups post JDs to either greenhouse or lever, statistically speaking.",
        "summary": "The data streaming application surfaces new data engineering jobs being posted on Applicant Tracking Systems, with most startups posting job descriptions to either Greenhouse or Lever."
    },
    {
        "original": "Machine-learning predictions for Draft Kings (NBA) :)It scraped basically every single player's performance in every single NBA game ever. I tried XGBoost and Keras, and the Keras model outperformed the XGBoost model. Was about to incorporate real-time injury data, so if a player was injured or out that game it would not select them.In the end it didn't perform too well. I think the limitation was my lack of domain knowledge, and not really knowing what features to select that would predict a players performance. Also data. I hear MLB is more consistent than NBA because there's just more data.",
        "summary": "Keras outperformed XGBoost in predicting NBA player performance, but the model was limited by the lack of domain knowledge and data available."
    },
    {
        "original": "Not too fancy, but I built a math model & interactive visualization of my parking spot to understand how to efficiently park there without bumping into anything: https://observablehq.com/@mourner/kinematics-of-reverse-angl...Discussed on HN here: https://news.ycombinator.com/item?id=21891919",
        "summary": "A math model and interactive visualization was created to help efficiently park without bumping into anything."
    },
    {
        "original": "Not programs, but plenty of virtual machines. Proud owner of 100 custom VMs all for different purposes.",
        "summary": "The owner has 100 custom virtual machines for various purposes."
    },
    {
        "original": "I wanted a Markdown notes app that I could access over the internet, and stored files in a files-on-s3 structure that would makes sense if I accessed it directly and would be stupidly simple to backup/restore.Ended up with an Amplify app that had basic login, file upload with image thumnbnails, indexing of frontmatter, some query macros to list pages matching specific criteria, autocomplete for frontmatter and macros, and ability to make specific pages public if I want to. Apart from login, it only uses direct S3 calls, so I'm effectively only paying for S3 storage costs.",
        "summary": "The Amplify app provides a Markdown notes app with basic login, file upload, indexing, query macros, autocomplete, and public page access, all using direct S3 calls, resulting in only S3 storage costs."
    },
    {
        "original": "Mine isn\u2019t particularly advanced or cool but I built this little directory of kaomojis (text-based emoji) with a cat mascot while I was in San Francisco for an interview at Flickr (this was a long time ago). At the time I was a junior designer with very little dev experience, so this project helped get my feet wet.http://kaomojicat.com/I originally built it for a now-ex-girlfriend, but I use it all the time myself to add a little spice to things like tweets or error messages.",
        "summary": "I built a directory of kaomojis with a cat mascot to gain development experience, which I now use to add spice to tweets and error messages."
    },
    {
        "original": "Our apartment has a key fob system to open the front door as well as an intercom system so people can call up and request to be let in. I put a Raspberry Pi Zero W inside the intercom receiver unit hooked up to the \"open door\" button. The Pi receives on a webhook that I control from a shortcut on my smartphone, so I can let people in even when I'm not home (or let myself in if I've forgotten the fob). The Pi also texts me whenever the doorbell rings. Not the sexiest project, but definitely the one that gets the most use!",
        "summary": "This project uses a Raspberry Pi Zero W to allow remote access to the apartment's intercom system and to notify the user when the doorbell rings."
    },
    {
        "original": "I was studying maths as a hobby and made myself a LaTeX editing environment in Emacs with inline rendering of mathematical content: https://github.com/dandavison/xenopsA handful of other people use it I think but I made it for myself and don't have time to maintain it when I'm not studying maths.",
        "summary": "The author created a LaTeX editing environment in Emacs for their own use, but does not have time to maintain it when not studying maths."
    },
    {
        "original": "I built a TypeScript-based DSL for Karabiner Elements that allows me to work with hyperkey sublayers, thus enabling me to have keyboard shortcuts for pretty much everything I do across my entire Mac: https://github.com/mxstbr/karabinerDemo: https://www.youtube.com/watch?v=j4b_uQX3Vu0",
        "summary": "I created a custom language for Karabiner Elements to create keyboard shortcuts for my Mac."
    },
    {
        "original": "I built a command line app that will execute a variety of different strategies for my crypto holdings.  To be clear, I'm not a degen trader, it's more about things like DCAing and rebalancing.Eg. \"Divide my current USD balance into 5 levels of descending orders where the first order is at 5% discount from the current price and every level after that is at a 10% discount.\"  Set it and forget it or run it again with different parameters if the market changes.",
        "summary": "The command line app allows for automated strategies such as DCAing, rebalancing and setting descending orders to manage crypto holdings."
    },
    {
        "original": "My first program was in C, input two dates in yyyy-mm-dd format, one by one,and tells the age. I used to call it Age Finder.exe Second version of it could work with dates entered in either order i.e. oldest newest or newest oldest.Now I use javascript & html. The most used ones in recent past was my own timesheet log app. Html form submit data to Google sheet through Google script. Another page shows the monthly summary & details.A telegram bot which logs my msgs as todo list to a Google sheet. I manually mark things done when done.Many others at apps.bydav.in",
        "summary": "The comment summarises the author's experience with programming, from creating a program in C to using Javascript and HTML to create a timesheet log app and a Telegram bot that logs messages to a Google sheet."
    },
    {
        "original": "I made a flashcard site with spaced repetition for learning Japanese (I moved to Japan few years ago). I love the idea behind Anki, but both the interface and having to take decision while trying to memorize were a drag on me, so I made the flashcards for a simple \"did I know it or not?\".I attribute around half of the Japanese I still know to repeating cards incessantly one after another for months, few years ago:https://core.cards/",
        "summary": "The author created a flashcard site with spaced repetition to help them learn Japanese, which they attribute to half of their current knowledge of the language."
    },
    {
        "original": "I hate the weather where I live (Chicagoland), so I spent a week a couple years ago downloading weather data from WUnderground and geo data from a bunch of places and turning it into a reverse weather index - instead of searching by place, you'd search by weather.I found the best weather for me  was in Antofagasta, Chile, but I never did anything with this knowledge :)Unfortunately it was all built on an OpenShift gear on the free tier, so it's dead now.",
        "summary": "I created a reverse weather index to find the best weather for me, which I found to be in Antofagasta, Chile, but I never used the knowledge."
    },
    {
        "original": "there are two things I\u2019ve built that maybe aren\u2019t groundbreaking but I think fit the brief. Might be helpful context that I\u2019m not a professional programmer so these are both hobby projects.1. I have too many aunts/uncles/cousins but we have a long (30 year at least) tradition of doing a family gift exchange over the holidays. After one too many years of forgetting who I had or having my mom get asked by my aunt what my cousin should get me I build a website for my family that allows them to manage a gift list. Started as a super basic Django app and that was about 7 years ago and every year I add one or two features. Now it\u2019s got all kinds things like notifications and will even help you track your incoming packages and know if they are gift wrapped or not.Thing 2, was a wedding evite/website for\nMy wedding. At the time I looked around and hated how impersonal all the evite options were, so I created a website with a cms that would give every user a customized, personalized experience. Invited to the rehearsal dinner? you see that dates and details. Are you one of my friends? You get the set of content with our inside jokes. It didn\u2019t need any kind of login or passwords but provided everyone with a custom page. It also provided me with a full database to manage rsvp, song requests, track who gave us gifts (and what), etc. Yes my partner thought it was overkill (to answer that question) but it was super fun to build and ended up getting retooled for my sister in law\u2019s wedding last year.",
        "summary": "I have created two hobby projects which are not groundbreaking, but fit the brief: a website for my family to manage a gift list and a wedding evite/website with a customised, personalised experience."
    },
    {
        "original": "Two years ago I decided to built my own web browser, with the underlying idea to use the internet more efficiently (and to force cache everything).Took a while to find the architecture, but it's still an unfinished ambitious project. You can probably spend forever working on HTML and CSS fixes alone...[1] https://github.com/tholian-network/stealth",
        "summary": "I decided to build my own web browser two years ago to use the internet more efficiently and it is still an unfinished ambitious project."
    },
    {
        "original": "I am a teacher and built a tool to generate images of ten-frames (used in early elementary math education). I tried to package it up for other educators as well, but so far I'm the only user. :) It's online at https://10f.io",
        "summary": "The author has created a tool to generate images of ten-frames for early elementary math education and has made it available online."
    },
    {
        "original": "I wrote a set of Python/PIL scripts to arrange image collages for print calendars, web backgrounds, ...etc.  In one particular script I use to build backgrounds, the images remain the same height but they can be different widths.  The images built are seamless.  Here's an example of some comic book covers in a collage using one of these scripts:https://jiml.us/bp/",
        "summary": "A Python/PIL script was written to arrange image collages with images of varying widths that are seamless."
    },
    {
        "original": "* When RSS was a thing but in my country a lot of news/content websites hadn't adopted yet, I wrote a service to quickly define scrapers that turn those sites into RSS feeds.* In one of my former workplaces I wrote (alongside another person) a gamified shared playlist app that allowed everyone to participate in being a DJ for our company hackathon (people getting more upvotes getting more playtime, songs getting many downvoted being skipped in the middle, etc). That was a lot of fun and surprisingly a very emotionally engaging experience for everyone.",
        "summary": "I wrote a service to quickly create RSS feeds from websites that had not yet adopted RSS, and I also wrote a gamified shared playlist app that was a fun and emotionally engaging experience for everyone."
    },
    {
        "original": "A little buzzer/led you can plug into an \u00e9p\u00e9e to detect hits without a scoring box, there's no grounding so it still triggers on hitting the opponents weapon but was more than good enough for practices.It was very simple, using a 555 timer and took almost no time to make, but it was among the best returns of effort I put in vs value I got out of it. It also stands out as one of my few personal projects that was something physical since most of them are only software now, and more tools than things purely for fun.",
        "summary": "This project was a simple and effective way to detect hits in \u00e9p\u00e9e practices, and it was a physical project that was enjoyable to make."
    },
    {
        "original": "A jazz generator, pre-machine learning. It had instruments and each instrument had Markov Chains to control pitch and note duration. I then used a bunch of helpers and functions to write markov chains that sounded cool. I used it to play bass and jam with me. This was 2009.The implementation was in netlogo I don\u2019t remember why. It was really fun",
        "summary": "In 2009, I created a jazz generator using Markov Chains and NetLogo to control pitch and note duration, which I used to jam with and have fun."
    },
    {
        "original": "I wrote a server that bridges Subsonic clients to my Spotify library. I like that it lets me to stream anything on Spotify but I can still fill in favorites that aren't available.",
        "summary": "The server bridges Subsonic clients to Spotify, allowing users to stream anything on Spotify and fill in favorites that are not available."
    },
    {
        "original": "Nothing special, but I didn't want to share my dietary habits with an unknown number of third parties, so I built my own calorie tracker. I didn't use anything fancy, I just ran Grist on my home server with a half dozen tables. Had to rewrite it a couple of times to support stuff like recipes, but it's good enough for my purposes. Didn't even need to add auth to it, I just use Tailscale on my personal devices to access the server from anywhere without exposing it to the internet.",
        "summary": "I built my own calorie tracker to keep my dietary habits private, using Grist and Tailscale to access it securely from anywhere."
    },
    {
        "original": "I wrote a Python script which checks the version of every programming language, JDK etc. on my Mac then scrapes the website of each language to compare it with the latest version. Simple but a great time-saver.",
        "summary": "The Python script saves time by automatically checking and comparing the versions of programming languages and JDKs on the user's Mac with the latest versions available."
    },
    {
        "original": "I built an image viewer application in winforms that allows- infinitely big or small resizing- has no visible borders- has a close all button- windows size enforces image aspect ratio- taskbar item thumbnail is the image- can be moved by clicking and pulling it anywhere (besides resize borders)- can be moved beyond the edges of the screen (no kind of snapping, like pushing windows below the top border)I used it for more effeciently using and managing my screen space during masturbation to images and it was a testiment to my almost complete mastery over winforms and p/invoke and the low level windows window api at the time.",
        "summary": "The comment highlights the author's mastery of Winforms and P/Invoke, as demonstrated by the creation of an image viewer application with various features to improve efficiency when viewing images."
    },
    {
        "original": "I made \n- A screenshot to text copied to clipboard\n- Another variant had translation from one of the local languages that I can't read to english\n- Built a keyboard identifier for windows that could know which USB keyboard the keypress came from and then suppress keystroke and then launch the program (differentiating keyboards is unnecessarily hard btw)\n- A python app that could pin any app 'on top' or change it's opacity %",
        "summary": "I created various applications to solve different problems, such as taking screenshots, translating languages, differentiating keyboards, and changing the opacity of applications."
    },
    {
        "original": "broca, a chatgpt powered dictionary + vocabulary book I'm working on.https://github.com/shi-yan/brocaon each of the computers I use, I have a open sublime text tab documenting words I don't know.they are scattering around, unorganized, get lost when the file tab is closed.I want to synchronize my vocabulary on different devices using git.broca saves to plain files that are git friendly. And using ChatGPT as a dictionary allows me to search for idioms/slang/phases with unlimited example sentences.",
        "summary": "Broca is a ChatGPT-powered dictionary and vocabulary book that allows users to synchronize their vocabulary across different devices using Git, and provides unlimited example sentences for idioms, slang, and phrases."
    },
    {
        "original": "Not really interesting per se, but useful when dealing with large recursive and sparse archives:A python script that recursively searches through zipped files within zip files (within zip files...) to find files by name and content. The goal was not to unzip the recursive structure to the file system, since the unzipped files contained hundreds gigabytes of sparse data each. Instead it works directly on the file stream and keeps the memory requirements constant.",
        "summary": "A python script was created to recursively search through zipped files without unzipping them, in order to reduce memory requirements."
    },
    {
        "original": "I tried to implement the TCP/IP protocol of internet from scratch + radio transceiverhttps://kyle.af/internet-from-scratch",
        "summary": "The comment is about attempting to create an internet connection using the TCP/IP protocol and a radio transceiver."
    },
    {
        "original": "it's pretty simple but on various consulting jobs I've had to build SQL databases sometimes with lot's of tables with lot's of columns. Sometimes we switch from on prem to cloud, or vice versa or switch from postgres to sql server, etc. I have this toolkit that automates a lot of the tedious stuff. it allows me to take pandas dataframes and do the following:- auto detect and convert column types- save as a parquet file in a folder- then autogenerate a sqlalchemy table/metadata file in python for all tables with sensible defaults for column types (e.g. 2x the longest string in a column for varchar)- build the db and all tables- load data from the files into the tablesthis makes it really easy to bootstrap the entire db from a folder of parquet files for testing with sqlite and then makes it easy to move to prod on postgres/sqlserver etc. Before I go to prod i still have to add constraints and keys and indexes but that doesn't take too long. and for dev/testing the data's not too big so performance doesn't really suffer from lack of keys/constraints then we can use something like alembic on the big sqlalchemy tables definition file to do db migrations.it's kind of like this: https://github.com/agronholm/sqlacodegen but solving an inverse problem.basically it bootstraps the db and schemas and gets me like 95% of the way there. my quality of life is better with it.",
        "summary": "This toolkit automates tedious tasks to quickly bootstrap a SQL database with sensible defaults for column types, allowing for easy migration between on-prem and cloud databases."
    },
    {
        "original": "The king.http://sam.zeloof.xyz/second-ic/",
        "summary": "The king is an important figure in society."
    },
    {
        "original": "From somebody else's design, a WWV/JYY repeater node with a copper loop antenna driven by HF gpio pin toggling on a rpi.It's so I can NTP sync my Citizen radio controlled wristwatch which otherwise only gets time signal if I happen to be in Europe or some parts of Asia.",
        "summary": "This comment describes a design for a repeater node that uses a copper loop antenna and a Raspberry Pi to enable NTP synchronization of a Citizen radio controlled wristwatch outside of Europe and Asia."
    },
    {
        "original": "I built a thing that\u2019s similar to supabase realtime or firebase, but for DynamoDB. It reads the DynamoDB kinesis stream and broadcasts the changes over Phoenix pubsub via a websocket connection, directly to the client.",
        "summary": "A thing was built that reads the DynamoDB kinesis stream and broadcasts the changes over Phoenix pubsub via a websocket connection to the client, similar to supabase realtime or firebase."
    },
    {
        "original": "I built this app for my self and based on my own needs and requirementshttps://play.google.com/store/apps/details?id=uk.co.darkruby...It's got hidden developer mode, where even more interesting stuff available",
        "summary": "The app was designed to meet the specific needs and requirements of the developer."
    },
    {
        "original": "A PDP11/40 emulator for the Teensy 4.1 development board.https://github.com/gounselor/Teensy11",
        "summary": "This project provides an emulator for the PDP11/40 on the Teensy 4.1 development board."
    },
    {
        "original": "I created a smart spreadsheet app for tracking any books, movies, or TV series I'm interested in watching which can automatically run web searches for sources to stream/rent/buy any item on the list (ex: Netflix, Amazon Prime, my local library, my local bookstore).This way I can focus on what I want to watch and not worry about how I will watch it.",
        "summary": "The spreadsheet app allows the user to focus on what they want to watch without worrying about how to access it."
    },
    {
        "original": "In 2020 I wanted to look up some classic StarCraft 1 maps that I used to play but there wasn't a good database around that I could easily search through. So I made https://scmscx.com to serve that purpose.",
        "summary": "A website was created to provide a database of classic StarCraft 1 maps for easy searching."
    },
    {
        "original": "I built a wifi controlled led strip controller with an ESP8266. I had it connected to an Android sleep tracking app (sleep as android), so that at some point I had the lights in my room go from 0 to 2500 lumens smoothly (following a log curve so that it's perceptually linear) over 5min or so in the morning at the optimal detected time for my sleep cycle. It was pretty awesome. I scrapped the entire thing since I last changed appartement though...",
        "summary": "I created a system that used an ESP8266 and an Android sleep tracking app to gradually increase the light in my room over 5 minutes in the morning, but I had to scrap it when I moved."
    },
    {
        "original": "Probably not as cool as everyone else\u2019s but I made savonius wind turbine to learn more about the basics of wind energy. It was a fun jaunt!",
        "summary": "Making a Savonius wind turbine was a fun way to learn more about the basics of wind energy."
    },
    {
        "original": "I've been meaning to write a blog post about this but the code is so messy I keep telling myself \"I'll clean it up first and then show it off\"...Growing up I had an alarm clock that you put a CD into and it would fade in the CD instead of an alarm noise. I really loved this, though having to wake up super early for school everyday, I will admit that I developed negative associations with the first track on many albums.I created an improvised version of this a few years ago: a timer switch hooked up to a light, a cassette player and a water heater. When the timer went off all three would turn on. This worked but wasn't great cause nothing faded in.I remodeled my bedroom last summer and wanted to replace this alarm with something more sophisticated.I used a Raspberry Pi to do the following:\n- At the set alarm time, access my media server and generate a playlist of 10 random songs. Start this playlist and slowly increase the volume.\n- I bought a separate module to hook up to a lamp that points at where I sleep. This module lets me slowly turn up the brightness of the lamp as the music volume increases.The water heater is hooked up to a timer in my kitchen now. But I just finished building an arduino based wifi switch, so once I get it integrated, that switch will get turned on 5-10 minutes before the alarm is set to go off and heat my water for coffee.I built a dashboard for all of this using HTMX. It lets you set the alarm time, snooze, play arbitrary playlists, adjust the light etc. I also added a weather widget and I have a JSON file of all important birthdays in my life, so it tells me whos birthday it is when I go to review the weather.Something that HN may appreciate, I have it setup so when I ssh into the Pi, I get dropped into a tmux session where an instance of emacs is running with the actual alarm code being executed inside of it. This makes editing and trying the new functions sort of like a lisp machine. You get dropped into emacs and can tweak all the scripts and test them in a sort of live environment (you have to restart the server to update the dashboard but everything else is 'live'). I have a dream of rewriting this so it really is a lisp machine and everything can be `c-x c-e`'d to run but I doubt I'll ever get around to that.I would also like to integrate motorized blinds and open them up when I wake. I'm still researching this, if anyone has recommendations.",
        "summary": "This comment describes a complex alarm system built with a Raspberry Pi, Arduino, HTMX, and other components, which can play music, adjust the brightness of a lamp, and provide a dashboard with weather and birthday information."
    },
    {
        "original": "I built https://playtune.app to have rhythm game with unlimited musics because it uses YouTube as the music playback provider. I play it often with my daughter.I consider removing the restart feature (or maybe just for her) because she kept restarting whenever she missed just a single note",
        "summary": "I created https://playtune.app to provide an enjoyable rhythm game experience for me and my daughter, but I am considering removing the restart feature to prevent her from restarting when she misses a single note."
    },
    {
        "original": "A \"framework\" to convert my Jekyll blog into Gemini and Gopher sites. Mainly converts markdown with Pandoc, but also generates a rudimentary site index and headers/footers for each page.https://github.com/ecliptik/ecliptik.github.io/blob/main/_sc...",
        "summary": "This framework uses Pandoc to convert markdown into Gemini and Gopher sites, and also generates a site index and headers/footers for each page."
    },
    {
        "original": "I have a hacky combination of Playwright browser automation plus Tesseract OCR that splits a Verizon group plan among members by posting individual totals to Splitwise. Simple at first glance, but there are always small changes due to people traveling overseas or changing devices.",
        "summary": "The hacky combination of Playwright browser automation and Tesseract OCR can be used to split a Verizon group plan among members, but small changes may occur due to people travelling or changing devices."
    },
    {
        "original": "LLaMA.go - open-source framework for LLM inference on regular CPUs [0]It took me about a month of full-time, hard, day and night coding (including weekends) to finally build a solid piece which can handle some crazy CPU workloads of tensor math.[0] https://github.com/gotzmann/llama.go",
        "summary": "LLama.go is an open-source framework for LLM inference on regular CPUs that was created through a month of hard work."
    },
    {
        "original": "I\u2019ve implemented a Bayesian optimizer for stable diffusion model merging [0]. This is because I do not have patience and/or time to try all different block combinations by hand. It started as a personal thing but now multiple people are working on it and a small community was born.[0] https://github.com/s1dlx/sd-webui-bayesian-merger",
        "summary": "A Bayesian optimizer has been implemented to automate the process of merging stable diffusion models, creating a small community of people working on it."
    },
    {
        "original": "After years of trying I've finally made something that my girlfriend would use without me nagging her to try.\nA small sveltekit app that registers our expenses and tracks who owns who, basically splitwise with way less features, but way more control over my data.\nI'm really happy every time I see her note down the expense into the app.",
        "summary": "My girlfriend is using an app I created to track our expenses, which makes me happy."
    },
    {
        "original": "I hated when Google killed iGoogle because I used it daily. So i took my data export and built one for myself. Even had the themes part mostly working. I used it for a few years but a lot of the RSS feeds stopped working as the web seemingly moved on from offering those. Not the most interesting tech but something I built just for me.",
        "summary": "The author built their own version of iGoogle after it was discontinued, but eventually the RSS feeds stopped working and the project became obsolete."
    },
    {
        "original": "a sub-ms trading platform written in Rust to try and do arbitrage across multiple FX brokers.",
        "summary": "A platform written in Rust has been created to facilitate arbitrage trading across multiple FX brokers."
    },
    {
        "original": "I created an optimizer for helping me make ship loadouts in the game highfleet. I put it online and added ship-sharing. Had a ton of help from a frontend dev, I mostly worked in C using SCIP, IPOPT, and such to solve the constrained optimization problem.https://hfopt.jodavaho.io",
        "summary": "I created an optimizer to help with ship loadouts in the game Highfleet, which uses C and various optimisation algorithms to solve a constrained optimisation problem."
    },
    {
        "original": "I built a small websocket server [0] that helps me write simple multiplayer backends. It spawns a process for the first client in a room, and routes subsequent clients to the same process.[0]: https://scalesocket.org",
        "summary": "The websocket server spawns a process for the first client in a room and routes subsequent clients to the same process, allowing for the creation of simple multiplayer backends."
    },
    {
        "original": "A service that ran on a Pi in my basement and periodically checks Oregon\u2019s liquor site (OLCC) for bottles of bourbon I was interested in, and which liquor stores got new shipments. It would use mailchimp\u2019s api to email me when inventories changed.https://github.com/dclowd9901/olccCheckerIt updated itself against the remote repo and ran on a daemon.",
        "summary": "This comment describes a service that runs on a Raspberry Pi and checks Oregon's liquor site for new shipments of bourbon, and uses Mailchimp's API to email the user when inventories change."
    },
    {
        "original": "RegExTractor - simple java program to search for regex in text, then replaces each string with another one and appends all those results in other text window. VERY useful when you need to extract something from a text dump and present it in another format, like extracting all events from a log and writing them in one line between quotes and comma separated, ready to dump into some db query.",
        "summary": "RegExTractor is a useful program for extracting and formatting data from a text dump."
    },
    {
        "original": "A desktop application with double countdown timer, styled as a digital clock. One counter measured the days until a friend's farewell party before they move abroad, the other was going towards a festival's opening date at a later time (when we would see this friend again).I didn't really plan this part, but since going past their target date they started counting upwards and have accumulated 4500 days or so.",
        "summary": "The double countdown timer serves as a reminder of the days until a friend's farewell party and a festival's opening date, and has now accumulated 4500 days."
    },
    {
        "original": "My brother and I built a mini webapp that takes data from the Strong app for workouts, and shows you a list of all your muscle groups and filters it with color based on how much fatigue each muscle has accrued over the week. It also gives you recommendations of how much weight you should lift for your next workout. It's a nice way to make sure each muscle group is getting exercised enough each week!",
        "summary": "The mini webapp helps to ensure that each muscle group is getting exercised enough each week by providing a list of muscle groups with colour-coded fatigue levels and weight lifting recommendations."
    },
    {
        "original": "I hooked up my old (~25y) stereo to an RPi via AUX in. The RPi has MPD and a pulseaudio sink to play audio. And it can be controlled via Home Assistant.But the feature I like most is that it turns on/off the stereo via an infrared LED. It detects sound and silence on the pulse output and sends the proper IR command. A small thing, but it still makes me happy whenever it does its work in the background.",
        "summary": "The feature that makes the speaker most enjoyable is its ability to turn on and off the stereo via an infrared LED, which detects sound and silence on the pulse output and sends the proper IR command."
    },
    {
        "original": "We have pet chickens that we close up every night. I built a door to let us open and close the chicken run from a web page. The door slides horizontally and is driven by a cheap electric drill motor with an all thread rod, which acts as a worm gear, and is controlled by a rpi.",
        "summary": "A Raspberry Pi is used to control a cheap electric drill motor with an all thread rod, which acts as a worm gear, to open and close a door for a chicken run."
    },
    {
        "original": "I want to learn to type telex on Vietnamese so I made a super simple app: https://0-sv.github.io/viet-typing-tutor/I still have to add a lot of words though, any feedback is welcome",
        "summary": "The author has created an app to help learn how to type telex in Vietnamese, but is looking for feedback to improve it."
    },
    {
        "original": "I have always been fascinated by live TV broadcasts from around the world. I created a website for it locally and have now released the code as open source. Please feel free to check it out on GitHub at github.com/tpkahlon/jackal.",
        "summary": "I have released the code for a website I created to broadcast live TV from around the world as open source on GitHub."
    },
    {
        "original": "Uhh, I'm building a virtual pet ant farm combined with journaling / breathing exercises. Ants get fed when I submit data. It pushes me to keep on top of my mental health each day in the same way getting a dog pushes someone to go for daily walks.It's kind of weird, but it's fun to make and serves a decent purpose.",
        "summary": "This virtual pet ant farm encourages users to keep track of their mental health by providing a fun and interactive way to do so."
    },
    {
        "original": "I wrote an app for reviewing and highlighting websites and most computer documents.  I can drag the highlights into a  built-in outliner and organize and comment them there.  I can drag relevant highlights into a built-in report outliner where I can write the corresponding section of the final report.  I knew I wanted it.  I thought others would too.  I was wrong on that.  Sigh!  I guess I built it just for myself after all.",
        "summary": "The author created an app for their own use, despite initially believing that others would find it useful."
    },
    {
        "original": "When I was a bit younger I had a TI-84+ that I adored and learned TI-BASIC on. I wanted to create a small little RPG which I proceeded to do. My favorite little piece of tech I made was the hex-mapper for the map builder. Years later, a careless me allowed the memory in that calc to go. RIP.",
        "summary": "The author's favorite piece of technology they created was a hex-mapper for a map builder, but the memory in the calculator was lost."
    },
    {
        "original": "Built it for me, but available to all -- Zillion: a python data modeling and analytics library.https://github.com/totalhack/zillion",
        "summary": "Zillion is a Python data modeling and analytics library that was built for one person, but is available for everyone to use."
    },
    {
        "original": "timer.express: tag-based, one-fee time tracking (in-progress, but online). React, php.\nTimerdoro: productivity timer. React, WordPress.\nMy own recipe site, not public. WordPress.\nDaily email-based diary. Two php scripts and Mailgun's api.",
        "summary": "This comment discusses four different projects, each of which uses different technologies such as React, PHP, and WordPress."
    },
    {
        "original": "I built a Frigate event listener and notifier service for Mobile phones that makes use of Pushover.The currently supported setup of Frigate alerts using homeassistant seemed to be very profoundly complex and I just thought I could use the Frigate API and wrote a small tool with Nodejs. It has been working flawlessly, including sending photos of events to my Android phone.",
        "summary": "A Node.js tool was created to use the Frigate API and Pushover to send event notifications and photos to an Android phone."
    },
    {
        "original": "I made a Mac app that turns my webcam light on and off with the camera. It\u2019s buggy, but I use it every day and I love it",
        "summary": "The Mac app I created allows me to easily control my webcam light, despite it being buggy, and I use it daily."
    },
    {
        "original": "Old School Runescape recently released a feature called \"group ironman\" that lets you play the game while only being able to trade with or assist others in your small >=5 man group. I made a small service that periodically scrapes the game's hiscore data and generate reports and metrics about the group's progress. And then a Discord bot to interact with the service",
        "summary": "A service and Discord bot have been created to track the progress of a group playing Old School Runescape's \"Group Ironman\" feature."
    },
    {
        "original": "Small scale stuff but I've wanted context sensitive snippets in my editor for a while now and i was able to make it work recently with treesitter and ultisnips in neovim.",
        "summary": "Using Treesitter and Ultisnips in Neovim allows for context-sensitive snippets in an editor."
    },
    {
        "original": "I used to spend a ton of time on reddit but, lately, I've been struggling to find content I enjoy there. So, I built a little RSS aggregator. It's hosted at https://www.trybsync.com/",
        "summary": "The speaker created an RSS aggregator to help them find content they enjoy on Reddit."
    },
    {
        "original": "I'm building an automatic file ingestion and processing pipeline which will run on a Raspberry Pi 3. It'll do some mundane tasks like renaming, and/or converting video files and sending to relevant people.It's like Node Red, but simpler and less resource intensive.The idea is to get the file to the \"Inbox\" of the system, and rest is automagically handled.",
        "summary": "The idea is to create an automated file ingestion and processing pipeline that runs on a Raspberry Pi 3 to simplify mundane tasks such as renaming and converting video files and sending them to relevant people."
    },
    {
        "original": "A few weeks ago, I built myself a web based IDE and deployment solution (like Replit) for quick experiment projects. It's built on Docker and designed to be self-hostable - I run it on a pair of servers at home.It's called Dock'n'Roll https://youtu.be/nITIMrND0Z0",
        "summary": "I built a self-hostable web-based IDE and deployment solution called Dock'n'Roll for quick experiment projects."
    },
    {
        "original": "I improved our kitchen hood vent by attaching a semi-rigid aluminum duct to one of the fans.  The other end of the duct can be positioned right over a frying pan to suck in cooking smell.  It works much better compared to the vent itself.",
        "summary": "Attaching a semi-rigid aluminum duct to one of the fans improved the kitchen hood vent, allowing it to more effectively suck in cooking smells."
    },
    {
        "original": "I built a simple recipe meal planner and shopping list generator to manage family meals or dinner parties.The recipes are stored as free text and the ingredients are parsed out of the text so you can just copy paste most recipes or record them the exact same way that your old family recipes were written down.",
        "summary": "This recipe meal planner and shopping list generator allows users to store recipes as free text and parse out the ingredients, making it easy to copy and paste recipes or record family recipes."
    },
    {
        "original": "I don't like mobile games,  mostly because of IAP and ads. There's also an oversaturation of chess apps, but none where an AI can play your own variants, so I made www.chesscraft.caFor years now it's the only mobile game I play, just about. The game took off a bit, but the core is still for me.",
        "summary": "The author created a mobile game, \"Chesscraft.ca\", to address the oversaturation of chess apps and the presence of in-app purchases and ads in other mobile games, and has been playing it for years."
    },
    {
        "original": "Hey! I am building a sailing simulator built in my own OpenGL engine. You can see videos about it here: https://archipelagosim.com/",
        "summary": "The comment is about a sailing simulator built in an OpenGL engine, which can be seen in videos at the given link."
    },
    {
        "original": "Currently i think my markdown to html converter, which i wrote without any dependencies and completely from scratch (except for a websocket lib). It supports watching for file changes and creating a live preview in the browser.Source: https://github.com/xNaCly/fleck",
        "summary": "The markdown to HTML converter is written from scratch, with the exception of a websocket library, and supports live preview in the browser."
    },
    {
        "original": "Most of mine was just automation or analysis-download mp3 rips from a streaming site, scrape parse and analyse jobs so I could see the market prices (span off a web app made a few hundred quid but killed it), a trading system and crypto analysis tool, most recently scraping and analysing housing market data.",
        "summary": "The comment describes a variety of projects involving automation, analysis, web app development, trading, and crypto analysis."
    },
    {
        "original": "I put together some operational amplifiers as filters to measure skin voltage and infrared absorption then used machine learning to learn to identify me and to measure blood pressure, pulse rate and oxygen saturation.I was close to predicting/estimating blood sugar when I lost momentum and also had a few errors making up PCBs.",
        "summary": "I used operational amplifiers, machine learning, and PCBs to measure skin voltage, infrared absorption, blood pressure, pulse rate, and oxygen saturation, and was close to predicting/estimating blood sugar."
    },
    {
        "original": "I made a portfolio rebalancing tool to help automate my investment purchases.https://github.com/TylerHillery/RePort",
        "summary": "A portfolio rebalancing tool was created to automate investment purchases."
    },
    {
        "original": "Raspberry Pi temperature monitor in a big freezer full of breast milk. It would email me if the temperature got above some threshold for a certain duration.It only fired once (outside testing anyway). But that one time made the whole endeavor more than worthwhile.",
        "summary": "The Raspberry Pi temperature monitor was worth the effort as it successfully alerted the user when the temperature exceeded the threshold."
    },
    {
        "original": "I wrote tweetscreenr.com to fetch articles from my twitter feed, and convert it into an RSS feed. The initial use case was to follow AI researchers on twitter and get notified whenever they post a link to an arxiv.org paper. Works well for me - I get all the news from Twitter, minus all the politicized/opinionated crap.",
        "summary": "TweetScreenr.com allows users to follow AI researchers on Twitter and receive notifications when they post links to Arxiv.org papers, without the distraction of politicized/opinionated content."
    },
    {
        "original": "Self-driving LEGO car that uses iphone as a lidar/camera and runs computations on a macbook air\nhttps://blog.mind1m.xyz/posts/lego-car-part-1/",
        "summary": "A self-driving LEGO car can be built using an iPhone as a lidar/camera and a Macbook Air for computations."
    },
    {
        "original": "Some background:\n- Samsung Galaxy phones have \"Routines\", background tasks that can fire based on a number of conditionals, including time, geofencing, messages received, etc.\n- I have a good friend who I regularly grab dinner with at Texas Roadhouse. In fact, for over a year, we went twice a week or more after we each bought $1200 worth of gift cards for $900 during a promo that was intended for businesses (we both have LLCs we were able to use).\n- Our Texas Roadhouse has crazy long wait times during peak hours. Like 45 to 90 minutes. This was especially frustrating given my friend was about 10-15 minutes from that location, with traffic.\n- Texas Roadhouse offers an online reservation system. You fill out the form, and they will send you a text with the estimated wait, to which you must respond to confirm your reservation.\n- Once you are texted again to be notified your table is ready, you have 20 minutes or you lose your reservation.As VIP customers (the entire restaurant knew us both on a first name basis, we always tipped generously [e.g. $20 on $40 of food], we often received preferential service from staff. One of our waiters was actually a young man with a budding tech interest, who, after considerable encouragement, mentorship, and a quality boot camp some of my former coworkers enjoyed, is now a software engineer making several times more income than he made as a waiter.We were very pleased with this arrangement in all but one way: while we could talk to several of our waiter friends who were staff members of the restaurant to get a table without a reservation even when it was 1 table short of being packed, it often was packed, or our waiter friends were not working that night, and we did not like waiting in a noisy, crowded lobby.I picked apart the reservation website and found a very simple, wide-open API. I quickly hacked together a script to make a reservation with a single GET request to my own site, with reservation options in URL parameters, then created Samsung Routines such that when I arrived within 100 feet of my friend's house between 3pm and 9pm, it would automatically send a properly formatted GET request to my website, which in turn made a properly formatted POST to the API, and then it would also immediately respond to the incoming text confirming the reservation. Before I'd even made it to his front door, we'd have an ETA, so we could decide on whether to start a movie, play some split screen diablo, etc. I'd then get a text a short time later, and we'd leave for TRH. Upon arrival, we'd walk up to the counter, mention our reservation was called up, and proceed to be seated immediately regardless of how busy it was, or whether any of our waiter friends were working that night.DIY VIP Reservation system :)",
        "summary": "A DIY VIP Reservation system was created using Samsung Routines to automatically make a reservation at Texas Roadhouse, allowing the user to bypass long wait times and receive preferential service."
    },
    {
        "original": "The most useful thing I built for myself is my workflow.\nBeing both on the ASD and ADHD spectrums, I intuitively knew I need systems, and started working on them, long before I was diagnosed and got treatment.One of my dearest parts of my system is the knowledge, task, and time management part. There's many things to improve, but I'm really happy to where I got.TLDR; custom org/markdown/hyperlists-inspired document syntax powered by tree-sitter, go library for accessing the data, command line utility with interactive task manager (built in with a custom React-like component-based TUI framework), Neovim plugins and integrations.This short video explains more than I can in a short time: https://gist.ro/slang.mp4Extra - Thank you Org mode:\nI do my work in a terminal emulator, so (obviously) my editor is Neovim. Two years ago I allocated a few weeks to learn Emacs and to review Org mode, I was hooked on so many concepts, and I loved it. Didn't like Emacs through, it's just too slow for me, and Elisp felt very meh if not yuck. There's quite a few things that I liked so much while testing Org mode, and that I tried to port.",
        "summary": "I have built a custom workflow to manage my knowledge, tasks and time, inspired by Org mode."
    },
    {
        "original": "I built a Chrome extension to be able to use spaced repetitions for chess puzzles/exercises that I found online. Used it for a couple years and gained at least 200 Elo rating with it :)Recently I built a public facing website for that, if anybody is curious: chess.braimax.com",
        "summary": "A Chrome extension was built to use spaced repetitions for chess puzzles/exercises, which resulted in a 200 Elo rating increase and is now available to the public at chess.braimax.com."
    },
    {
        "original": "- build a tool to easily connect and analyze public datasets. Eg connect dataset for country population with the dataset on international students in the US and get new dataset on international students in the US per capita\n- build a tool to publish my personal website from my Apple Notes",
        "summary": "This comment does not relate to the key idea."
    },
    {
        "original": "Personal assistance with chat interface for keeping notes, link, with a lot of extensions to make use of the information. It's one of my side project. https://zettel.ooo/",
        "summary": "Chat interface with personal assistance and extensions to store and use information is a side project of mine."
    },
    {
        "original": "I created a little mind dumping text app that I use on the daily. Originally it was intended as a throwaway little app but turned out to be my most used app that I\u2019ve created.I am currently working on a todo list that stores all info in the browser only.",
        "summary": "The app I created has become my most used app, and I am now working on a to-do list that stores all information in the browser."
    },
    {
        "original": "I made an app to control my pedalboard via WebMIDIhttps://github.com/rajangdavis/macrocosm_jsWas inspired by some existing editors so I made my own and extended it to create macros for sending sysex/PC messages to multiple devices.",
        "summary": "The app was created to control a pedalboard using WebMIDI, and was extended to create macros for sending sysex/PC messages to multiple devices."
    },
    {
        "original": "Almost one year ago, I\u2019ve built a personal diary app with gamificatiin features: streaks and email reminders.My current streak is 347 days! It really made ME journaling daily. A number of folks who have also registered maxed at 61 only :(https://5yearsback.com",
        "summary": "Using gamification features such as streaks and email reminders can help motivate people to journal daily."
    },
    {
        "original": "Driving simulator in unreal engine. Can do ADAS and now has a real HUD which is warped and quasi raytraced.",
        "summary": "Driving simulators in Unreal Engine can now be used to simulate Advanced Driver Assistance Systems (ADAS) with a realistic Heads-Up Display (HUD) that is warped and quasi raytraced."
    },
    {
        "original": "https://github.com/luciano-fiandesio/beanborgA set of Python scripts to automate the importing of financial transactions into Beancount. Been using it consistently for ths last 3 years to manage my finances.",
        "summary": "Beancount can be automated with Beanborg to manage finances over a period of three years."
    },
    {
        "original": "I've built a simple website to watch other People's mood around the world!\nhttps://mymood.today/",
        "summary": "The website 'MyMood.Today' allows users to observe the moods of people around the world."
    },
    {
        "original": "Not all that interesting but I recently built a server for 2FA.It mainly consists of a simple CLI utility that generates TOTP codes using an AES encrypted lookup table of secrets.I piggybacked access to this off an unrelated web site and it is now readily available from any device if you can provide the decrypt and lookup key and know the URL.",
        "summary": "A server for 2FA was built which generates TOTP codes using an AES encrypted lookup table of secrets, and is accessible from any device with the decrypt and lookup key and URL."
    },
    {
        "original": "I made https://chitchatter.im/ because I don\u2019t trust third parties not to spy on me. I can trust Chitchatter because I know how it works and I built it myself. :)",
        "summary": "I created Chitchatter to ensure my privacy and security, as I have full control over how it works."
    },
    {
        "original": "I mean, I put a 4 litre V8 in my mx-5, which I guess is 'tech I built just for myself'",
        "summary": "I built a custom 4 litre V8 engine for my mx-5."
    },
    {
        "original": "I wrote a WebGL, WebGL2, and WebGPU statistics tracker: https://web3dsurvey.com. Well it is useful at least.",
        "summary": "This comment suggests that the WebGL, WebGL2, and WebGPU statistics tracker created by the author is useful."
    },
    {
        "original": "I built a tool for measuring iOS app animation performance that makes dropped frames audible as clicks.https://github.com/kconner/KMCGeigerCounter",
        "summary": "This tool allows developers to measure iOS app animation performance by making dropped frames audible as clicks."
    },
    {
        "original": "Automatic stand-up message generator powered by GPT-4: https://github.com/golergka/standup_generatorI've only spent about 6 hours on this, but it helps me every day.",
        "summary": "This project has been successful in providing a useful tool in a short amount of time."
    },
    {
        "original": "I made an iPhone VR app to control a lego mindstorms robot by lashing an old Windows 8 phone onto it.https://pcblues.com/assets/videos/vrlegorobot.mp4",
        "summary": "The iPhone VR app allows a Windows 8 phone to be used to control a Lego Mindstorms robot."
    },
    {
        "original": "Not very interesting, but used VB script to make Netflix sleep timer for the active tab. (looks for the browser process, makes the windows active,sends a ctrl+W to the window to close the video player, and finally sleeps the display.This way I can fall asleep to noise that doesn't later wake me up.",
        "summary": "Using VB script, a Netflix sleep timer was created to close the video player and put the display to sleep, allowing the user to fall asleep to noise without being woken up."
    },
    {
        "original": "Not really sophisticated but I wrote a ~200 line Python script to trawl a few data sources like USPTO and Reddit and aggregate that info into an e-mail for me to review daily.  It was extremely helpful in getting me up to speed in a new job that I lacked the background for.",
        "summary": "A Python script was created to aggregate data from multiple sources and provide a daily summary, which was beneficial in helping the author gain knowledge in a new job."
    },
    {
        "original": "I can ask siri in the car \"Check parking\" and it will tell me if there are any available spaces in the parking lot near my building.There is also a telegram bot that can show me the latest camera image with vacant places highlighted.",
        "summary": "Technology can be used to easily check for available parking spaces."
    },
    {
        "original": "I have finally built myself reader app that fulfills my own needs first.I totally absolutely enjoyed every minute building my own thing and I highly recommend it for the burnout developers.https://awesomegoat.com",
        "summary": "Building your own app can be a rewarding experience and can help with burnout for developers."
    },
    {
        "original": "A 3D luring audio visual experience that's using a simple 2d canvas, in the browser.https://vanilla-lattice.mtassoumt.uk/Totally deprived of any use, but very satisfying.",
        "summary": "This comment suggests that although the 3D audio visual experience is limited to a 2D canvas, it can still be satisfying."
    },
    {
        "original": "I made a silly twilio app for my daughter\u2019s 1st birthday party where guests had a set of photos in front of them and they had to guess the correct age ordering and could validate their guess to win a prize using the temporary number I had setup.",
        "summary": "A Twilio app was created for a birthday party where guests had to guess the correct age ordering of photos to win a prize."
    },
    {
        "original": "Not very cool but was useful for my hex-crawling D&D campaign: https://ajuc.github.io/outdoorsBattlemapGenerator/",
        "summary": "The Outdoors Battlemap Generator was useful for creating a hex-crawling D&D campaign."
    },
    {
        "original": "I built a tool that auto-generates guitar chord-melody arrangements with tabs and chord diagrams, given a jazz leadsheet (melody + chord symbols) in MusicXML form:https://chordmelody.io/",
        "summary": "This tool automatically creates guitar chord-melody arrangements with tabs and chord diagrams from a jazz leadsheet in MusicXML form."
    },
    {
        "original": "My daughter enjoyed playing Othello at a friend\u2019s house, so I made this we can use on an iPad: https://jawj.github.io/fliptiles/",
        "summary": "My daughter's enjoyment of Othello inspired me to create a digital version of the game for use on an iPad."
    },
    {
        "original": "I have langchain hooked up to a SMS number with some of the tools. I want to extend it to voice and pictures but, I have used it also to replace googling or Wikipedia for a bit.",
        "summary": "Langchain can be used to access information through SMS, voice, and pictures, as an alternative to using Google or Wikipedia."
    },
    {
        "original": "Not really that high-tech or that cool, but I've made a firefox add-on that sorts YouTube video tabs by duration. Recently I realized that someone else actually uses it too (he left a review), so I got motivated to patch it",
        "summary": "Someone else is using the Firefox add-on created by the speaker, which has motivated them to patch it."
    },
    {
        "original": "I have a esp32 board that listens to voice commands and turns on and off the lights in my workshop.  For fun and for the kids it has a rainbows mode since it controls multi color led strip of lights.",
        "summary": "The ESP32 board can control multi-color LED strip lights and can be used to turn lights on and off with voice commands, as well as providing a fun \"rainbow mode\" for kids."
    },
    {
        "original": "mock - language agnostic API mocking and testing utility\nhttps://github.com/dhuan/mockI built it because I needed an easy way to set-up API endpoints that weren't implemented yet by some other team. After a while I open-sourced it.wikicmd\nhttps://github.com/dhuan/wikicmdNavigating through mediawiki to get pages edited all time requires a bunch of clicks. I wanted to be able to quickly edit wiki pages using any editor program instead of the browser.",
        "summary": "dhuan created mock and wikicmd to provide an easier way to set up API endpoints and navigate through mediawiki respectively."
    },
    {
        "original": "Created a fuckup counter for my team on an old ipad. Inspired by the \"x days with no accident\" from the Simpsons, a webapp that shows in kiosk mode the number of days without a fuckup and a reset button.",
        "summary": "A webapp was created to track the number of days without a 'fuckup' and provide a reset button for a team on an old iPad."
    },
    {
        "original": "Profiling tool with custom instrumentation, low overhead, and CPU perf counter support.https://github.com/lally/ppt",
        "summary": "This profiling tool provides custom instrumentation, low overhead, and CPU performance counter support."
    },
    {
        "original": "My own gpu accelerated neural network trainer using backpropagation: https://github.com/zbendefy/machine.academy",
        "summary": "This comment provides a link to a GitHub repository containing a GPU-accelerated neural network trainer using backpropagation."
    },
    {
        "original": "A browser extension to help me rate science fiction stories for compellingsciencefiction.com. It triggers an AWS Lambda-backed API to store my ratings and some story metadata, makes things way less tedious!",
        "summary": "A browser extension can help make rating science fiction stories for compellingsciencefiction.com less tedious by triggering an AWS Lambda-backed API to store ratings and story metadata."
    },
    {
        "original": "I got fed up of trying to access servers I was whitelisted to but my IP had changed so I wrote a script that runs on startup and lets me copy my IP if I want. ghbarton.com/blog",
        "summary": "A script was written to allow the user to easily copy their IP address if it changes, eliminating the need to manually access servers they are whitelisted to."
    },
    {
        "original": "I made an iOS app which I use to control the Bontrager Flare and ION bike lights via Bluetooth LE.It turns on/off the lights, changes the mode and also shows the battery status",
        "summary": "The iOS app allows users to control the Bontrager Flare and ION bike lights via Bluetooth LE, enabling them to turn the lights on/off, change the mode, and view the battery status."
    },
    {
        "original": "yaycorn.com texts me 2 week warnings for upcoming birthdays. SMS as a CLI is underused IMO",
        "summary": "Yaycorn.com is an example of how SMS can be used as a customer service tool."
    },
    {
        "original": "Created a query builder for microsoft's KQL for making my life easier for a client project. Turned out that this company still uses this library after 5 years :).Probably the best feeling ever in work.",
        "summary": "Creating a query builder for Microsoft's KQL was a successful project that has been used for five years, providing a great feeling of accomplishment."
    },
    {
        "original": "I built an open-source low-code platform to build mobile apps in JSON, https://www.nanoapp.dev/",
        "summary": "Nanoapp.dev is an open-source low-code platform for building mobile apps in JSON."
    },
    {
        "original": "\u2022 3D printed aeroponic misting nozzles. I followed a patent, so it can't be open sourced.\u2022 Automatic turret to guard a pond against herons. They come during winter and eat many goldfish. This year was catastrophic enough I started developing a turret using a raspberrypi4 with a YOLO computer vision nnet with weights from Tencent (not fined tuned, I just look for big bounding boxes tagged as a bird). The \"gun\" is composed of a coffee machine pump and a 3D printed polycarbonate pressure tank. Pan-tilt mount using sg90 servos. I didn't finish the project because it turned out quite a lot of fishes survived, they were just very good at hiding.",
        "summary": "The comment discusses the development of an automatic turret to guard a pond against herons using a Raspberry Pi 4, YOLO computer vision, a coffee machine pump, a 3D printed polycarbonate pressure tank, and sg90 servos."
    },
    {
        "original": "I mean I guess I did build an overbed table to put the TV on. I don't know whether it counts as tech though.",
        "summary": "I built an overbed table to hold a TV, but I'm not sure if it counts as a tech project."
    },
    {
        "original": "Latest vaguely interesting projects I've done, I repurposed an old Nook to be an e-ink family dashboard, showing weather, tidal times and our family calendar.",
        "summary": "Repurposing an old Nook to be an e-ink family dashboard can be a useful and interesting project."
    },
    {
        "original": "OOOH I've got one - I made a short script that lets me play any video on any site at arbitrary speed (speed controlled by arrow keys).//@ts-check\nwindow.kVideoSpeed = 1;\nwindow.initialVolume = 1;NUMPAD_3 = \"99\"\nNUMPAD_2 = \"98\"\nNUMPAD_6 = \"102\"\nNUMPAD_5 = \"101\"UP_ARROW = \"38\"\nDOWN_ARROW = \"40\"let timeoutId = null;\ndocument.onkeydown = (e) => {\n    if (!document.querySelectorAll(\"video\").length) {\n        // no-op for pages with no videos\n        return;\n    }\n    window.initialVolume = document.querySelector('video')?.volume || 1    let myDiv = getOrMakeDiv();\n    e = e || window.event;\n    let KEYCODE = e.keyCode;\n\n    // NOTE: can't use left/right b/c those go forward/back 10s on some sites\n    if ((KEYCODE == UP_ARROW || KEYCODE == NUMPAD_6) && window.kVideoSpeed < 4) {\n        // up arrow\n        window.kVideoSpeed += 0.5;\n        myDiv.textContent = window.kVideoSpeed;\n    } else if ((KEYCODE == DOWN_ARROW || KEYCODE == NUMPAD_5) && window.kVideoSpeed > 1) {\n        // down arrow\n        window.kVideoSpeed -= 0.5;\n        myDiv.textContent = window.kVideoSpeed;\n    }\n    for (let el of document.querySelectorAll(\"video\")) {\n        el.playbackRate = window.kVideoSpeed;\n\n        // prevent volume from changing\n        setTimeout(() => {\n            el.volume = window.initialVolume\n        }, 100)\n    }\n    if (timeoutId) {\n        clearTimeout(timeoutId);\n    }\n    // set timeout to remove div\n    timeoutId = setTimeout(() => { myDiv.remove() }, 1000);\n};\nfunction getOrMakeDiv() {\n    if (!document.getElementById(\"myDiv\")) {        let div = document.createElement(\"div\");\n        div.id = \"myDiv\";\n        // add styles to div\n        div.style.padding = \"8px\";\n        div.style.textAlign = \"center\";\n        div.style.fontSize = \"16px\";\n        div.style.position = \"fixed\";\n        div.style.fontWeight = \"600\";\n        div.style.border = \"1px solid yellow\";\n        div.style.color = \"white\";\n        div.style.backgroundColor = \"black\";\n        div.style.zIndex = \"999999\";\n        // insert div at the top of the body\n        if (document.fullscreenElement) {\n            document.fullscreenElement.prepend(div, document.fullscreenElement.firstChild)\n        }\n        else {\n            document.body.insertBefore(div, document.body.firstChild);\n        }\n    }\n    return document.getElementById(\"myDiv\");\n}",
        "summary": "This comment describes a script that allows users to control the speed of videos on any website using arrow keys."
    },
    {
        "original": "Very simple one. I geofenced my workplace with IFTTT, and used a tiny bit of javascript glue to drop a line in a google sheet. Instant timesheets.",
        "summary": "Using IFTTT and a small amount of javascript, it is possible to create an automated timesheet system."
    },
    {
        "original": "CitiBikeHistory.comI CitiBike a lot around NYC and this gives me (and my friends/coworkers) access to the full station history",
        "summary": "CitiBikeHistory.com provides access to the full station history for people who use CitiBike in NYC."
    },
    {
        "original": "Malware scanner for anything uploaded to web servers. Was pretty cool at the time learning and identifying things in the wild then creating custom rulesets.",
        "summary": "Creating custom rulesets to identify malware on web servers was a valuable learning experience."
    },
    {
        "original": "RGB room lights controlled via Arduino with a companion mobile app for changing colors/modes. Used zeroconf for finding the device on the network.",
        "summary": "This comment describes a system that uses Arduino, a mobile app, and Zeroconf to control RGB room lights."
    },
    {
        "original": "The most interesting tech I made for myself is rather mundane, but it's one I use every day, it's the FinalKey password manager.",
        "summary": "The FinalKey password manager is a mundane but useful tech I use every day."
    },
    {
        "original": "tool used to download instagram images to a google photo album for use with things like chromecast screensaver https://github.com/mcpengelly/instagram-saved-to-google-phot...",
        "summary": "This tool allows users to download Instagram images to a Google Photo album for use with Chromecast screensavers."
    },
    {
        "original": "I built a home brewing system with an Arduino, a 4G router, mqtt/pyton stack and a grafana frontend :D",
        "summary": "I created a home brewing system using Arduino, 4G router, MQTT/Python stack and Grafana frontend."
    },
    {
        "original": "Detect garage door opened or closed using ordinary magnetic sensor.Browser extensions that I use everyday.Emacs packages that I use everyday.",
        "summary": "Using an ordinary magnetic sensor, it is possible to detect whether a garage door is opened or closed."
    },
    {
        "original": "TL;DR: A React front-end component workshop, a simple version of Storybook.So around 5 months ago, I needed a tool to preview front-end (React) components whilst I create them for a personal project of mine. There were two options: Storybook or Ladle.Storybook is the tool everybody knows. I've used it before quite a lot. It's very big, full-fat, supports loads of use-cases, etc.Ladle comes out of Uber. It's very small, lean, and doesn't support that much. After trying it out for a while, it just gives me a feeling that it is an Uber engineer's 20% project to learn some new tech.So I realised that I wanted something kind of in the middle. Something that's a bit more customizable and full-fat than Ladle, but something simpler, less intrusive, and less \"framework magic\" than Storybook.This led me to create Exhibitor (https://github.com/samhuk/exhibitor) (https://demo.exhibitor.dev).I worked on it on-and-off for a couple months, and it ended up being something that I'm quite proud of. It's not perfect, and supports only a fraction of what Storybook does, however for a tool made by 1 engineer vs the 20+ for Storybook, I'm quite happy about it!",
        "summary": "Exhibitor is a React front-end component workshop, created as a simpler version of Storybook."
    },
    {
        "original": "I\u2019ve got a few that I think are interesting enough to share.When I was getting divorced a few years ago, I had to wait out the mandatory six month waiting period (aka \u201ccooling off\u201d period). Since I had the actual date the divorce would be finalized, I wrote a script and scheduled it to send me a countdown every morning at 4am. For a few months upon waking up I was greeted by an SMS with the ever decreasing number. I called it my freedom counter and loved watching people I told about it go from curious to mildly uncomfortable to amused.Years later I repurposed the idea and made a wedding day countdown. This one started counting up after the big day, for continuous joy.At some point I started building a ridiculously tiny SaaS service around it (and even registered domains undorthe.wedding and dothe.wedding), but never got around to finishing and launching it.---I\u2019ve been tracking my weight daily since 2019. I used to just add an entry to an Airtable base, but the free plan has a per-base entry limit I\u2019ve long surpassed.I didn\u2019t want to pay $10/mo just for that one thing, so I built a solution which let me send an SMS with the daily weight to a Twilio number, which then sent a request to an API endpoint I built, which then stored it in a TinyDB file on the server, which I then backed up to Backblaze using restic. The code behind the endpoint also sent me a graph of the last two weeks worth of entries, and the date I last weight that much or less.I then decided to decommission the server hosting the endpoint, and in order to avoid having to pay for something else rebuilt it as a combination of Airtable and GH Actions. I have a base in which I enter the daily weight, then a GH Action fires a few hours later, and it gets all the entries in the base, reads a TinyDB file from a separate repo, updates relevant records, updates the TinyDB file, and deletes old entries from the Airtable base. This is now costing me $0, which is fun in its own right.---I started working from home during the pandemic, and my living room worked quite well as a personal office while I was single, living with just a cat. As my wife and I moved in together, there have been some challenges with working from a shared space, and we particularly found a need to communicate when I\u2019m on a video call.I used the Circuit Playground Express I got at PyCon 2019 as an on-air light. It was plugged into my computer, which exposed it as a USB drive, and it ran an infinite loop that set the LEDs to red if I was on a call and green if I wasn\u2019t. I wrote a script that would detect the presence of a Zoom call process to do that automatically, and then another to manually toggle the flag using xbar.---EDIT: I thought of one I actually wrote for work! We\u2019re a small team and were discussing making our on-call rotation official some time ago. Since we were starting from scratch, I suggested we try daily rotations (instead of the customary weekly ones), largely based on some things I\u2019d read right here on HN. We don\u2019t yet use any tooling beyond a manually managed Google Calendar, so I wrote a script to generate a fair schedule (e.g., no one gets stuck with all Fridays) and output importable files for both the shared calendar and people\u2019s individual ones. We\u2019ve used it for a few periods of time, and it seems to be good enough for our needs.",
        "summary": "I have created scripts to help me with various life events, and have also written a script for work to generate a fair on-call rotation schedule."
    },
    {
        "original": "I homelab and my hypervisor is a Proxmox installstion. I marvel at it every time I use it.Https://www.Proxmox.comI have Hewlett Packard Z840 machines as nodes, they are awesome.",
        "summary": "Proxmox is an impressive hypervisor installation, and Hewlett Packard Z840 machines are great nodes to use with it."
    },
    {
        "original": "VLF (polar) heart rate monitor receiver. stress reaction feedback to the wearer via audio.",
        "summary": "The VLF heart rate monitor receiver provides audio feedback to the wearer about their stress reaction."
    },
    {
        "original": "Wrote a RoyalRoad scraper to convert any of their series into an ebook.",
        "summary": "A scraper has been created to convert RoyalRoad series into ebooks."
    },
    {
        "original": "a web and android app (free) for lossless jpeg recompression (saves me some space on the phone)https://reductor.app/",
        "summary": "Reductor is a free web and Android app that can help save space on a phone by losslessly recompressing JPEGs."
    },
    {
        "original": "Not sure about interesting, but I wrote a cli tool to apply boolean set operations on lines of text, so e.g. I can get the intersection of the lines in three different files, or all lines piped into stdin that do not appear in a certain file, or merge the lines from multiple files without duplicates.\nI made it because this specific task came up repeatedly in my bash scripting but solving it in bash is ugly and really, really slow.And right now I am working on my own modal text editor which might never be used by anyone else. Just for fun and to see whether some Vim features could be improved or done in other interesting ways. tl;dr so far: Vim does things really damn well, sometimes to a point you don't even think about it because it simply never fails. That said I did manage to finally solve a tiny issue with the keybinding system that always bugged me, resulting in support for smooth text macros as a side effect.",
        "summary": "I created a CLI tool to apply boolean set operations on lines of text and I am working on a modal text editor for fun."
    },
    {
        "original": "How do you find time and resources to build all these cool things?",
        "summary": "Finding the time and resources to build cool things can be challenging."
    },
    {
        "original": "I wanted to play an Xbox gamepad like an instrument, so I used GameMaker 2 to make one. It doubles as a controller tester.https://github.com/crawsome/Orchestroller",
        "summary": "Using GameMaker 2, it is possible to create an Xbox gamepad that can be used as an instrument and also serves as a controller tester."
    },
    {
        "original": "The first build of DemoTime was for myself. Obviously it no longer is.",
        "summary": "DemoTime has evolved from being built for one person to being used by many."
    },
    {
        "original": "It's nor entirely cool, nor revolutionary, but I use this many times a day, so I thought that it could maybe fit in. I've built dew (https://github.com/efrecon/dew). It's a glorified way of running a docker container as yourself with the current directory mapped as itself inside the container. Sometimes you will also need some access to the XDG directories.I got tired of installations that would break others and of project requirements that would differ from others in tooling. So I use dew to run most of the CLI tools that I need and to build development environments that fit the (sub-)project at hand. When things go mad or disk space has become short, it is only a matter of cleaning the set of docker images to recover.You don't need dew to do all this, aliases will do in most cases. They would all be mostly the same and you would have to remember how to solve problems for each tool at hand. So dew groups those under a few concepts that you can turn on and off for the specific tool/environment to run. It hides all those ugly CLI parameters behind configuration variables, and finds the set of necessary variables for a given tool/environment under a .env file automatically. dew is quick enough. In most cases there is little difference between running \"dew yourfantastictool\" compared to running yourfantastictool installed directly on the host.The code has grown with time so I have used dew as an exercise in trying to write readable code and organise it, even though it's written in good old shell and has long passed the size of what should be written in shell...Things that perhaps are a little cool with dew:\n- It can rebase a barebone image on top of another one, so that you can use the tool from the barebone image and perhaps rebase on something that has coreutils or similar. This is remembered as a local image for next time.\n- It can inject commands to be run before becoming \"you\" in the shell, so you can install more (as root inside the container) before switching to a gentle user. This is remembered as a local image for next time.\n- It can use a local Dockerfile for complex scenarios. This can replace the two cases above.\n- You can have access to docker from inside the container, and it downloads the latest version of the docker client for you (by default: this can be turned off).\n- It can create files and directories, possibly with initial content for you before running the container. This is because -v xxx:xxx will always create a directory if xxx did not exist, and because some tools require a minimal configuration file to run.\n- It has initial support for podman, but I still haven't given this as much love than the rest so your mileage may vary...",
        "summary": "dew is a tool that simplifies running docker containers with the current directory mapped as itself inside the container, and provides additional features such as rebasing a barebone image, injecting commands, using a local Dockerfile, and creating files and directories."
    },
    {
        "original": "the time tracker  https://github.com/esseti/-schrodinger",
        "summary": "The time tracker https://github.com/esseti/-schrodinger helps to track and manage time efficiently."
    },
    {
        "original": "I'm late to the party, but I'll compensate by posting 2 things.\n1. [Zircon][zircon] is a text gui library I have been working on for a few years in my spare time, although I haven't contributed much to it lately. It also comes with a tutorial in which I implement a simple roguelike game ([Caves of Zircon](caves-of-zircon)).2. This is more recent (in fact I haven't finished it yet): I have been working on a toolkit in the last few weeks that includes a scheduler, an event bus and a state machine library ([Cobalt](cobalt-ts)). Using these in conjuncion you can easily implement a workflow engine (that's what I'm gonna use this for). The interesting part is that it is implemented by using functional programming. Feel free to check it out if you need something like it (permissive license).[zircon]: https://github.com/Hexworks/zircon\n[caves-of-zircon]: https://hexworks.org/posts/tutorials/2018/12/04/how-to-make-...\n[cobalt-ts]: https://github.com/Hexworks/cobalt-ts/blob/master/libs/hexwo...",
        "summary": "I have been working on two projects: a text gui library called Zircon and a toolkit called Cobalt which includes a scheduler, an event bus and a state machine library."
    },
    {
        "original": "My ISP is total crap and charges a fortune for a miserable service that at this point should be nationalized, and I'm not a radical communist either. Anyway, I need to monitor my usage and the interface they provide is a dumpster fire so I created the most spectacular Rube Goldberg abstraction to get access to all my past data using damn epoch timestamps and a data scrapper and now I can forecast my usage, set SMS alerts, get usage on a Telegram bot and access all my data via API. I think other people might want to use it but I've always been too busy to polish the product for an audience.",
        "summary": "I created a complex system to monitor my usage, but have not had the time to make it available to others."
    },
    {
        "original": "declarative code generation https://github.com/hofstadter-io/hof because I was tired of having to change 10+ files in a full stack app to add a field to one type, so I brought ideas from devops to application developmentit's now generalized and for everyone",
        "summary": "Declarative code generation with Hofstadter.io allows developers to make changes to multiple files in an application with minimal effort."
    },
    {
        "original": "Telegram bot that uses gpt3.5 to summarise news and comments from HN.\nhttps://t.me/hacker_news_tldrCosts around $1/day to maintain, but me and a few of my tech friends use it everyday.An example of this post summary:Personal tech projects showcased by developers include ad-blocking tools, stock data downloading, AI foot generation, usage monitoring systems, simulation of universes based on theories, market data downloading and heart rate monitoring.",
        "summary": "A Telegram bot that uses GPT-3.5 to summarise news and comments from Hacker News is available for around $1/day and is used by some tech friends every day, with examples of summarised posts including ad-blocking tools, stock data downloading, AI foot generation, usage monitoring systems, simulation of universes based on theories, market data downloading and heart rate monitoring."
    },
    {
        "original": "I wrote a script that takes all the info in the database of the FLOSS DJ Software Mixxx' databse (sqlite, yeah!), and writes it to the tags of the MP3s/OGGs/FLACs.I have another script that reads the info from the tags and writes in back into the database. So I never have to set the cue-points/comments/scores/BPMs again for my tracks :) And all is self contained in the audio file.",
        "summary": "The scripts allow for the cue-points, comments, scores, and BPMs of the FLOSS DJ Software Mixxx to be stored in the audio file, eliminating the need to reset them."
    },
    {
        "original": "It started as a necessity project and evolved over time. You see my daughter started to wanted to have her independence around 5th grade (11 years old) and didn't liked me or her mother to go to school or get her home from school. So she needed a key to enter the apartment. Problem was that she lacked the necessary strength to actually unlock the door - door lock had a certain key position and until you hit that position it required quite a strength to do that. So every day she came from school she was ringing at the door. Whoever (me most of the time) was at home, had to go to the door and open it for her.So that's how I started this project. Get the door to be unlocked. Bought a new lock, with electromagnetic locker in it, hooked up a Raspberry Pi to command a switch for 0.5 seconds and then wrote a server application for RPi that does the command. Wrote another Android app, that connects to RPi, sends the user/pwd via WiFi, the server verifies if all is OK and then unlocks the door.Then started expand the tech. Get new users to be added by an Admin user (so roles were implemented). Used as DB SQLite in RPi. Wrote my own protocol on top of crypto libraries so communication is secured with a 4096 RSA key over WiFi. Then one day a little accident happened - my daughter had problems with her stomach and the door could not open fast enough for her to go to toilet, so a little soiled pants came out of that event :).\nThat prompted me to start expanding even more and invest in a little LoRa PCB attached to RPi so the communication now can happen from distance instead of just few meters from the door.Then I wanted to expand the usefulness of RPi. So when we go to vacation a little pump is pumping a predefined liters of water on our flower pots. And to make sure those do not actually get too little or too much I hooked also a number of webcams on RPi to watch them. And since I was at this step and I wanted to flex my muscle in computer vision so another camera is on our front door and automatically will try to recognize people going through its field of vision. This last step is still refined. So this is where I am with this project. Still in development, pretty sure I'll have more ideas in the future I'll attach to that RPi.",
        "summary": "This project started as a way to give the speaker's daughter independence and has since evolved to include a range of features such as roles, security protocols, LoRa communication, and computer vision."
    },
    {
        "original": "In 2017 I spent a while messing around and creating a system to code and control my computer via voice. I was experiencing RSI pain at the time, and thought I should be proactive and have a strategy where I could still work and use my computer in case it kept getting worse and it became an impedance to create such a tool. I tried every voice to text I could find, and unfortunately for me the only acceptable one in terms of quality was Dragon Naturally Speaking, which was commercial and Windows only (I use Linux). I decided to build a virtual machine running Windows XP which ran the voice -> text translation, and then run a local server on the Linux side which would receive packets of text from the virtual machine. It was then a matter of parsing the string for language primitives, as you'd need a custom alphabet of keywords to do certain actions like type any given key combination, and inventing your own primitives for this reduces ambiguity (voice detection is only so accurate and the use case here means it's going to be less accurate than usual since you are not speaking in expected english, plus you want everything to be single syllable).The process of building a dictionary of primitives and shorts was very much akin to what court reporters / Stenographers do to type fast, and was also probably related to my RSI given that I started my career out as a Stenographer. Something I regret in retrospect.In terms of voice coding, things really have gotten so much better since then where we now have amazing free and open source options for text to speech, and we've also seen a proliferation of apps used to code via voice. I'm partial to Talon, though I don't do any voice coding today. https://talonvoice.com/. Github also just announced a voice to code copilot type thing, and at this point given the advances we're seeing in AI I'm sure I'll be okay if my RSI gets bad. This video was one of the things I watched and helped me in building the system, https://www.youtube.com/watch?v=8SkdfdXWYaII'm also building a video game, and plan on building many more. I'm writing it in  a monorepo where I have a common shared foundation, and then apps using and building on that foundation. I believe in dogfooding my code, and have built a bunch of things with it towards that endThe thing I'm happiest with and use the most is a small and simple music player. I never could find a replacement Foobar2000, so I wrote my own. It runs nearly 24/7 on my PC's.I've also built a breathing app after discovering that breathing exercises were like magic in terms of improving mood and reducing blood pressure. The one I built was modeled after https://github.com/jithware/brethap, and I mainly built it because it was trivial to do and Firefox kept putting the web tab to sleep. If you have high blood pressure, I 100% recommend exploring different breathing exercises.I've also built two different GUI wrappers around image generators. The first app was built around VQGan+Clip back before Stable Diffusion, and it supported swapping the backends to change generators. I built it as a web app with Svelte, and it let me explore the images and auto-generate based on a theme or with a given sentence structure where parts of the sentence could be sampled from a pool. The second one was much the same, but it was built with my monorepo, it was built around Stable Diffusion, and I added an image-to-image component where I have a simple UI to draw on the input image through the app. The usefulness of this project is near 0 as there are better open source versions out there.I also built a static website generator in Ruby for my personal website. I've since soured on Ruby though, and my website is no longer online. There are other things but I'll leave it there because this is already too long.",
        "summary": "The author built a system to code and control their computer via voice, as well as other projects such as a music player, breathing app, and static website generator."
    },
    {
        "original": "My parents have a door in their kitchen that is right next to two ovens and a drawer. When the ovens or drawer are open, then someone opening the kitchen door would smash it into the opened oven or drawer, damaging both sides. I built an interlock system that detects when the ovens or drawer are open, and engages an electromagnetic lock to prevent the kitchen door from being opened. It unlocks as soon as the ovens and drawer are closed.The open/closed detectors for the drawer and one of the ovens use Hall effect sensors with neodymium magnets. I found a very thin, but very strong magnet (gold-plated for corrosion resistance) that I adhered to the glass on the oven door with Kapton tape (on the bezel, outside of the hot part). I also built a 3D-printed housing for the sensor on the back of the oven frame opposite it.Due to physical constraints, it wasn't possible to put a Hall effect sensor on the other oven. Instead, I reverse-engineered the oven's control board, found the exact (somewhat obscure) wiring connectors that the oven uses, and made a passthrough sensor that MITMs two of the wiring harnesses (one for signal, one for power). It uses a MOSFET to amplify a signal that my custom control board uses to sense when the oven's own door open/closed switch is engaged. It also uses an optocoupler so that the oven and the rest of the system are electrically isolated. I was surprised that the oven uses the duty cycle of a PWM signal (instead of just a simple on/off signal) to represent whether the oven door is open or closed.There's also a push button switch next to the door to disengage the system. It's fail-safe, in that there are no electronics or software involved. It's a simple electrical disconnection of the power that goes to the door lock. The lock itself is fail-safe, too: it's an electromagnetic lock (rather than one with a physical bolt or latch), so if power goes out, it's guaranteed to disengage.The brains of the operation is a custom control board with an off-the-shelf Arduino nano soldered onto it. I could have put all of the Arduino components directly onto the board, but it was easier to use a pre-fabbed Arduino and just design the custom parts.I ran CAT5 to most of the sensors, but used some heavier 18 AWG wire for the lock, since it needs to handle more current. I used JST XH connectors for most things, but larger XT30U for higher-current components.A few other things I'm proud of:- All of this was non-invasive to the ovens. I didn't drill any holes or cut any wires.- I designed some custom PCBs for this (my first time) using Kicad (Phil's Lab on YouTube is great!) and had them fabbed and partially SMT-assembled at JLCPCB. They turned out great. Pretty amazing compared to when I had some boards fabbed locally 20+ years ago. Turnaround time, quality, price, and general experience are loads better than they used to be.- I taught myself CAD and 3D-printed enclosures for the electronics and sensors. I used OnShape, which has a semi-hidden version that's free for personal use, as long as you make your designs public.- I taught myself surface-mount electronic assembly for this project. It was easier than I expected.- The push button on the wall has an RGB LED in it that shows status. It also allows the system to be disabled temporarily for 5 minutes by long-pressing it.- Given that some of the electronics will be installed in or near an oven, I took care to characterize the thermal environment and respect the thermal constraints for all of the components I used.- I put a temperature sensor in the electronics in the oven, and if the electronics ever get too hot, it will indicate overheating via the LED that's in the pushbutton switch on the wall. (I checked the temperature in the sensor location while the oven was running before installation, so this is just a precaution. It hasn't ever overheated.)- The control board enclosure has a laser-printed label on its face that marks the ports for all of the sensors, actuators, and power connections.- The whole system is basically invisible except for the button and the electromagnetic switch.This whole project is a bit of a Rube Goldberg machine, but it was really fun to do the design, hardware, software, and physical assembly. It turned out really well, and has been working great for a few years now.",
        "summary": "I built an interlock system that uses Hall effect sensors, neodymium magnets, a MOSFET, an optocoupler, a push button switch, an electromagnetic lock, an Arduino nano, CAT5, JST XH connectors, XT30U connectors, custom PCBs, 3D-printed enclosures, a temperature sensor, and a laser-printed label to detect when the ovens or drawer are open and prevent the kitchen door from being opened."
    },
    {
        "original": "I built a device out of a large copper block interfacing with a matrix of water cooled TEC on one side to cool the block and a TEC tower on the other, with the top of the TEC tower opening into an insulated chamber. The chamber has a valve to a CO2 canister. It\u2019s able to make dry ice without any adiabatic cooling. I 3D printed the entire insulated enclosure using Build123D (a parametric python CAD library). I\u2019ve always been fascinating the using non mechanical systems for all sorts of tasks, in this case transferring large amounts of heat. It\u2019s a pretty inefficient way to do things; and I did cheat by having a mechanical pump moving the water cooling into a heat exchanger with fans. The amounts of dry ice are also very small. My favorite bit was the large pure copper block acting as a large efficient thermal mass in the middle of the system.",
        "summary": "This device uses a copper block, TECs, and a CO2 canister to make dry ice without adiabatic cooling, with a 3D printed insulated enclosure and a mechanical pump to move the water cooling."
    },
    {
        "original": "I dropped acid one time and turned a coffee grinder and an arduino into a system that opens my front door. I showed it to my friends but they laughed at me. But it worked, so I don\u2019t give a shit.",
        "summary": "I created a system using acid, a coffee grinder, and an arduino that successfully opened my front door, despite my friends' disbelief."
    },
    {
        "original": "I wrote my own home automation controller. Recently I wired up a sump pump alarm I can monitor with it. In my car it also logs GPS and speed. It's very badly written though and I recommend against others using it, generally.",
        "summary": "The author created their own home automation controller which monitors a sump pump alarm and logs GPS and speed in a car, but they do not recommend others using it."
    },
    {
        "original": "When I lived in SF, I built a webcam with a raspberry pi which looked down on the street in front of my apartment and uploaded to a website if a parking spot was available.  My friends could visit the page on the drive up to see me, and check if there was a parking spot available before they got to the house ... so they didn't have to circle around looking for other spots if there was a vacancy right in front.",
        "summary": "A webcam with a raspberry pi was built to show if a parking spot was available in front of the apartment, allowing friends to check if there was a vacancy before arriving."
    },
    {
        "original": "I hated scrolling ikea.com for new products, way too cluttered and all over the place. Found their hidden api and created a RSS feed from the new products.",
        "summary": "Creating a RSS feed from the new products on Ikea.com made it easier to find new products."
    },
    {
        "original": "IceCast stream ripper website. Listen, download mp3 from online radio stations.https://stream.local.hesamian.com/",
        "summary": "This website allows users to listen and download MP3s from online radio stations using an IceCast stream ripper."
    },
    {
        "original": "Hard to answer. Because the most technically challenging and interesting work I've done has been for employers or clients, and under NDA, closed source, and now part of their IP or trade secrets.Whereas for myself in my own free time I bias more to the ruthlessly pragmatic, which often means the simplest or easiest solution, so I can move on to the next thing.Random pick from those:- many many years ago I once wrote a Terminal-like UI widget for Java AWT/Swing apps. This was in the very very early days of Java. To scratch my own itch. It gave me a way in my Swing/AWT desktop apps to embed a console/REPL-like widget (which could be kept invisible/inactive by default, then only appear when a special key pressed) to let me issue CLI-like commands in-app, for example for cheat codes or dev testing or to provide extra features to advanced users. It provided an API for registering comands and their handlers. Had built-in commands like \"help\" and to repeat the last command, etc. So my Java GUI apps could have the best of both worlds: the \"friendliness\" of the GUI and the power and conciseness of a terminal workflow. Super simple. Only ever used in a few of my hobby apps (and a few games I considered selling then.)I named it, originally, in private, SwingShell. Then renamed it to Grio, because that had more personality. (Obligatory Pulp Fiction reference.) I even devised my own little theme song for it. Okay more of a tune. A melodic catchphrase. Why? Here let me show you my nerd license. Hold still, please. This will only take a second.",
        "summary": "The author created a Terminal-like UI widget for Java AWT/Swing apps to combine the \"friendliness\" of a GUI with the power and conciseness of a terminal workflow."
    },
    {
        "original": "I just wrote a long bash script to automate the trimming and organising of a large collection of videos.I recently bought a drone for photography. But the video looks so good that I end up taking a lot of video, too. Video is new to me, so the raw files keep piling up in my \"in\" tray.  I will have to learn to edit video, one day, or send them to a pro to edit for me.I decided that the least I could do is watch the videos, organize them, and trim them to just the interesting parts. Saves on disk space.I wrote a bash script to help me:- Loop over all videos in a dir.- Play each video.- Extract the clips I want.- Tag, rate and organize the clips.  The script opens each video in two MPV players.  One is full screen and unscaled (watching 4k on a 2k screen means the video appears zoomed in to a 2k region). This is for pixel peaking. I can quickly check, at a glance, the raw video quality. Another MPV window acts like a PIP, taking up a quarter of the screen, and showing the whole video scaled down. \n\n If a video is DLOG, a LUT is applied to MPV to show the video in a more natural colour (raw LOG video looks grey before it is processed). \n\n  Hacking this together, without a plan, I use simple msg boxes, on top of the playing videos, to control the process. Better than having to flick back and forth to a terminal window.\n\n  When I see a good place in the video to start my cut, I press the \"Start\" button. An input box pops up, prefilled with the current time of the player, e.g. 00:00:09 if the video is 9 seconds in.\n\n  I watch some more of the video and notice some messy, jerky camera movement starting at 38s. I press the \"End\" button, and another input box pops up to capture the end time of the clip. I change it to 00:00:37 to exclude that jerky part.\n\n  Now, in the background, ffmpeg is called to extract the section of video between 9s and 37s. I use keyframes so that video does not need to be re-encoded. It sets the real start time to the nearest keyframe before the start, and the real end time to the next keyframe after the input end_time. This means the output video is always a bit longer than I chose. I can trim those few extra frames when I use the clip. Because we don't re-encode, the extraction time is near instantaneous.\n\n  A preview of the clipped file is played back at high-speed.\n\n  If the source video is long, and contains more content I want, I continue playing until I see the next clip I want to extract.\n\n  When I finish with a source file, I am asked to give a star rating (1-5) for the videos and then to choose tags. For these I make use of the rating and file tagging extended metadata (xdg). I can select any number of pre-existing tags, and add new tags. Some metadata tags will be added automatically, such as frame_rate, resolution, and colour_profile.\n\n  Now the clips are in the output dir, and I choose to send the original file to the wastebin. The next video in the source dir starts playing, and the process continues until the dir is empty.\n\nThen, using Dolphin file browser, or Digikam, I can click on a tag and instantly see all clips under it. I can see all videos that are 50fps and DLog color. Or, I can filter all clips tagged \"sea\" and \"sunset\", or \"mountains\" and \"sunrise\".The result is a neat pile of trimmed and catalogued video clips. Ready to be thrown into some YouTube video.Only problem, now? I'm more interested in refining the bash script, than I am in learning to use Resolve to make a finished video.",
        "summary": "A bash script was written to automate the trimming and organising of a large collection of videos, which includes playing the videos, extracting clips, tagging, rating and organizing them, and applying a LUT to MPV to show the video in a more natural colour."
    },
    {
        "original": "I got tired of editing videos, so I wrote a tiny web app that allows me to record uniform ready-to-publish videos for my SaaS in real-time, so creating & publishing a 5-min video only takes me about 15 minutes.The videos look like this one: https://www.youtube.com/watch?v=1rdeir2-bVACreating a video is simple:- think about the subject (usually during the week)- 5 min: copy an existing video script and edit it to match the current subject- 5 min: record the video with OBS capturing the web output- 5 min: publish it on FB/LI/youtube/...It uses a simple scripting language with actions that I can trigger by pressing a button. The script has custom commands that allow you to mount HTML/overlay the webcam video/show the webcam video as a thumbnail/play music/... And you can compose commands into other commands.Here's an example script I used for the video mentioned in the beginning:    const script:Record<string,string[]> = {\n        Intro: [\n            `/name empty screen with overlays\n    /remove *\n    /volume 0`,\n            `/name empty screen without overlays\n    /remove *\n    /volume 0\n    /append div.hide-overlay`,\n            `/subs \n    How to quickly qualify leads\n    for premium outdoor structures\n    without a configurator\n    `,\n            `/intro\n    ![](vsl-TV-transparent.png)\n    # Quickly qualify leads\n    ## for premium outdoor structures\n    ### without a configurator\n    /caption Tom Janssens / Owner\n    /wait 3s\n    /remove *\n    /subs \n    https://virtualsaleslab.com\n    marketeers of premium outdoor structures\n    activate & qualify leads\n    via online 3D configurators\n    In this video\n    explain you \n    a simple and easy way \n    to qualify a lead\n    without using a configurator`\n        ],\n\n        Main: [`/remove *\n    /append img#bg.fullscreen[src=\"prices.png\"]\n    /select #bg\n    /animate fade-in 3s both\n    `,\n\n        ],\n        Outro: [\n            `/site https://**OBFUSCATED**/r/vsl/vsl/en/designer/index/ts-alu`,\n            `/remove *\n    /caption Tom Janssens / Owner\n    /wait 5s\n    /cfg https://**OBFUSCATED**/r/vsl/vsl/nl/designer/index/solar-de\n        `,\n            `/remove *\n    /outro\n    ![](vsl-TV-transparent.png)\n    # https://virtualsaleslab.com\n    ### tom@virtualsaleslab.com`]\n    };\n\n    export default script;\n\n\nUpdate: Obfuscated some urls in the example script, as they are pointing to my test environment ;)",
        "summary": "A web app was created to allow recording of uniform ready-to-publish videos for a SaaS in real-time, reducing the time taken to create and publish a 5-minute video to 15 minutes."
    },
    {
        "original": "time machine",
        "summary": "Time travel is possible through the use of a time machine."
    },
    {
        "original": "Proxy server with full mitm support for removing / blocking ads, modifying cookies to per session cookies, injecting of anti-fingerprinting javascript into pages, caching, various blocking lists, cname resolving, ASN blocking,...It was written as I got sick of particularities of squid proxy. Using it for 5 years for home network as transparent proxy, never released it.\"A picture is worth a thousand words\":Application Options:      --listen=                                            Listening ip and port (format \"address:port\") (default: 127.0.0.1:8080)\n\n      --ini=                                               Path for .ini file, if not there it will be created with defaults\n\n      --id=                                                Unique id, used for caching and avoiding detection of injected js. (default: machineid)\n\nCertificate Authority:      --cakey=                                             CA Private Key for MITMing https connections (default: ca.key)\n\n      --cacrt=                                             CA Certificate for MITMing https connections. It must be imported into client(browser) as trusted CA (default: ca.crt)\n\n      --cagen=[512|1024|2048|4096]                         CA Private Key (and CA Certificate) generation, keysize. (default: 1024)\n\nUpstream Proxy:      --upstream.proxy=                                    Upstream proxy (format \"address:port\")\n\n      --upstream.cacrt=                                    Upstream proxy CA certificate\n\nLists Options:      --list.update=                                       Update databases interval for https paths (default: 24h)\n\n      --list.path=                                         Path for caching downloaded lists (default: lists)\n  -D, --domain.blacklist=                                  File/url paths with domain blacklist\n\n      --domain.whitelist=                                  File/url paths with domain whitelist\n  -U, --url.blacklist=                                     File/url paths with url blacklist\n\n      --url.whitelist=                                     File/url paths with url whitelist\n  -A, --adblock.blacklist=                                 File/url paths for adblock rules\n\n      --adblock.whitelist=                                 File/url paths for adblock whitelist rules\n  -N, --cname.blacklist=                                   File/url paths for cname masked domain blacklist\n\n      --cname.whitelist=                                   File/url paths for cname masked domain whitelist\n  -S, --asn.blocklist=                                     ASN address ranges to block (macros:\"facebook\", \"google\", \"microsoft\", \"apple\", \"amazon\")\n\n      --asn.whitelist=                                     ASN address ranges to whitelist (macros:\"facebook\", \"google\", \"microsoft\", \"apple\", \"amazon\")\n  -R, --regexp=                                            File/url paths for regular expression replace rules\n\n      --inject.list=                                       File/url paths with js injection rules\n\n      --inject.cache                                       Inject into cache, faster, updating script require cache invalidation\n\nCDN caching:\n  -C, --cdn.blacklist=                                     File/url paths for cache forever cdn rules      --cdn.whitelist=                                     File/url paths for cdn whitelist\n\n      --cdn.expires=                                       Defines expiration for CDN cache (default: 30d)\n\nDNS resolve:      --dns=                                               File/url path to list of dns servers to use\n\n      --dns.change=                                        Defines timeout for changing the dns (default: 10s)\n\n      --dns.timeout=                                       Defines timeout for dns to respond, if exceeded it will be excluded (default: 250ms)\n\nUser Agent:      --user-agents=                                       File/url paths to list of user-agents used\n\n      --user-agents.random=                                Generate specified number of random user agents\n\n      --user-agents.change=                                Defines timeout for user-agent randomization (default: 300s)\n\nPrivacy Options:      --header.cspreport                                   Allow CSP reporting\n\n      --header.cache                                       Allow cache headers reach clients\n\n      --header.expectct                                    Allow Expect-CT header\n\n      --header.etag.remove                                 Enable removing of ETag used for cookieless tracking\n\n      --header.hsts.remove                                 Enable removing of HSTS header (we are doing mitm anyway)\n\n      --header.dnt.enable                                  Set Do-Not-Track header\n\n      --image.reencode                                     Enable re-encoding of images to remove hidden tagging\n\n      --amp.allow                                          Allow AMP redirection\n\n      --cookie.validity=                                   Change domain cookie validity ('0' is per-session cookie, off for disabled) (default: off)\n\n      --cookie.validity.3rd=                               Change 3rd party domain cookie validity ('0' is per-session cookie, 'off' disabled) (default: 1h)\n\nDocumentation:\n  -v, --version                                            Version information\n  -l, --licenses                                           License information      --man                                                Generate man page\n\n      --txt                                                Generate text documentation\n\nCaching:      --cache.compression.disable                          Disable all compression\n\n      --cache.sharing.clients                              Enable clients share same cache\n\n      --cache.sharing.xsite                                Allow cache sharing for 3rd party domains\n\n      --cache.media.enable                                 Cache media content (disk & memory impact!)\n\nMemory Caching:      --cache.mem.disable                                  Disable caching\n\n      --cache.mem.size=                                    Maximum size, if reached expire oldest entries (default: 512mb)\n\n      --cache.mem.expires=                                 Maximum time before it expires (default: 24h)\n\n      --cache.mem.nocompression                            Disable memory cache compression\n\n      --cache.mem.min=                                     Minimum content size to cache (kb, mb, gb) (default: 512)\n\n      --cache.mem.max=                                     Maximum content size to cache (kb, mb, gb) (default: 2mb)\n\nDisk Caching:      --cache.disk.disable                                 Disable caching\n\n      --cache.disk.path=                                   Path for on disk caching (default: webcache)\n\n      --cache.disk.size=                                   Maximum cache size in megabytes (default: 1024mb)\n\n      --cache.disk.expires=                                Maximum time before cache expires (default: 30d)\n\n      --cache.disk.ttlexpire=                              Timeout to execute task for expiring cache values (default: 10m)\n\n      --cache.disk.nocompression                           Disable disk cache compression\n\n      --cache.disk.min=                                    Minimum size to cache (kb, mb, gb) (default: 512)\n\n      --cache.disk.max=                                    Maximum size to cache (kb, mb, gb) (default: 10mb)\n\nDeveloper Options:      --log.level=[trace|debug|info|error|fatal|panic|off] Logging level (default: error)\n\n      --log.output=                                        Logging output filename or stdout, stderr (default: stderr)\n\n      --log.json                                           Logging is formatted as json\n\n      --header.debug                                       Enable sending debug headers to clients\n\n      --db.optimize                                        Enable statistic database optimizations\n\n      --threadpool.size=                                   Size of thread pool (0 disables thread pooling) (default: 200)\n\n      --threadpool.proxy.disable                           Disable thread pool for proxying\n\n      --threadpool.filter.disable                          Disable thread pool for filtering\n\n      --threadpool.tools.disable                           Disable thread pool for tools\n\n      --domain.resources=                                  Proxy resource access domain (default: my.proxy)\n\nHelp Options:\n  -h, --help                                               Show this help message",
        "summary": "This comment describes a proxy server with features such as ad blocking, cookie modification, anti-fingerprinting, caching, blocking lists, and CNAME resolving."
    },
    {
        "original": "This is exactly the type of shit I see benevolent AGI doing for us",
        "summary": "Benevolent AGI could help us in many ways."
    },
    {
        "original": "A number of years ago I decided that I had enough of iTunes and that I needed to handle my digital music collection myself.Blog post about it: https://swampbits.bearblog.dev/first-cloud-music-library/    Original python implementation: https://github.com/pauldardeau/cloud-jukebox\n    Go implementation: https://github.com/pauldardeau/go-cloud-jukebox\n    C# implementation: https://github.com/pauldardeau/CSharpCloudJukebox\n    Oxygene on Mac implementation: https://github.com/pauldardeau/MacOxygeneCloudJukebox\n    Oxygene on Windows implementation: https://github.com/pauldardeau/WinOxygeneCloudJukebox\n    C++ implementation: https://github.com/pauldardeau/cpp-cloud-jukebox\n\nP.S. I'm looking to find my next job, so if you think I might be a good fit for an opening you know about I'd appreciate hearing about it!",
        "summary": "I created a digital music collection management system in multiple languages to replace iTunes."
    }
]